2022-02-15 15:55:03  [ main:0 ] - [ DEBUG ]  Start method
2022-02-15 15:55:03  [ main:31 ] - [ DEBUG ]  Logging Provider: org.jboss.logging.Log4jLoggerProvider
2022-02-15 15:55:03  [ main:41 ] - [ DEBUG ]  Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2022-02-15 15:55:03  [ main:43 ] - [ DEBUG ]  Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2022-02-15 15:55:03  [ main:47 ] - [ DEBUG ]  Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2022-02-15 15:55:03  [ main:71 ] - [ INFO ]  HHH000412: Hibernate ORM core version 5.6.1.Final
2022-02-15 15:55:03  [ main:72 ] - [ DEBUG ]  HHH000206: hibernate.properties not found
2022-02-15 15:55:03  [ main:276 ] - [ DEBUG ]  Interpreting public/system identifier : [-//Hibernate/Hibernate Configuration DTD//EN] - [http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd]
2022-02-15 15:55:03  [ main:276 ] - [ DEBUG ]  Recognized hibernate-configuration identifier; attempting to resolve on classpath under org/hibernate/
2022-02-15 15:55:03  [ main:283 ] - [ DEBUG ]  cfg.xml document did not define namespaces; wrapping in custom event reader to introduce namespace information
2022-02-15 15:55:03  [ main:447 ] - [ DEBUG ]  Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2022-02-15 15:55:03  [ main:448 ] - [ DEBUG ]  Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2022-02-15 15:55:03  [ main:448 ] - [ DEBUG ]  Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2022-02-15 15:55:03  [ main:452 ] - [ DEBUG ]  Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2022-02-15 15:55:03  [ main:452 ] - [ DEBUG ]  Building session factory using provided StandardServiceRegistry
2022-02-15 15:55:03  [ main:458 ] - [ DEBUG ]  Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2022-02-15 15:55:03  [ main:459 ] - [ DEBUG ]  Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2022-02-15 15:55:03  [ main:469 ] - [ INFO ]  HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2022-02-15 15:55:04  [ main:495 ] - [ DEBUG ]  Adding type registration boolean -> org.hibernate.type.BooleanType@58fb7731
2022-02-15 15:55:04  [ main:495 ] - [ DEBUG ]  Adding type registration boolean -> org.hibernate.type.BooleanType@58fb7731
2022-02-15 15:55:04  [ main:496 ] - [ DEBUG ]  Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@58fb7731
2022-02-15 15:55:04  [ main:496 ] - [ DEBUG ]  Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@349c1daf
2022-02-15 15:55:04  [ main:497 ] - [ DEBUG ]  Adding type registration true_false -> org.hibernate.type.TrueFalseType@aafcffa
2022-02-15 15:55:04  [ main:498 ] - [ DEBUG ]  Adding type registration yes_no -> org.hibernate.type.YesNoType@5f7b97da
2022-02-15 15:55:04  [ main:499 ] - [ DEBUG ]  Adding type registration byte -> org.hibernate.type.ByteType@315f43d5
2022-02-15 15:55:04  [ main:499 ] - [ DEBUG ]  Adding type registration byte -> org.hibernate.type.ByteType@315f43d5
2022-02-15 15:55:04  [ main:500 ] - [ DEBUG ]  Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@315f43d5
2022-02-15 15:55:04  [ main:501 ] - [ DEBUG ]  Adding type registration character -> org.hibernate.type.CharacterType@78365cfa
2022-02-15 15:55:04  [ main:501 ] - [ DEBUG ]  Adding type registration char -> org.hibernate.type.CharacterType@78365cfa
2022-02-15 15:55:04  [ main:501 ] - [ DEBUG ]  Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@78365cfa
2022-02-15 15:55:04  [ main:502 ] - [ DEBUG ]  Adding type registration short -> org.hibernate.type.ShortType@485e36bc
2022-02-15 15:55:04  [ main:503 ] - [ DEBUG ]  Adding type registration short -> org.hibernate.type.ShortType@485e36bc
2022-02-15 15:55:04  [ main:503 ] - [ DEBUG ]  Adding type registration java.lang.Short -> org.hibernate.type.ShortType@485e36bc
2022-02-15 15:55:04  [ main:504 ] - [ DEBUG ]  Adding type registration integer -> org.hibernate.type.IntegerType@2371aaca
2022-02-15 15:55:04  [ main:504 ] - [ DEBUG ]  Adding type registration int -> org.hibernate.type.IntegerType@2371aaca
2022-02-15 15:55:04  [ main:504 ] - [ DEBUG ]  Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@2371aaca
2022-02-15 15:55:04  [ main:505 ] - [ DEBUG ]  Adding type registration long -> org.hibernate.type.LongType@3f390d63
2022-02-15 15:55:04  [ main:506 ] - [ DEBUG ]  Adding type registration long -> org.hibernate.type.LongType@3f390d63
2022-02-15 15:55:04  [ main:506 ] - [ DEBUG ]  Adding type registration java.lang.Long -> org.hibernate.type.LongType@3f390d63
2022-02-15 15:55:04  [ main:507 ] - [ DEBUG ]  Adding type registration float -> org.hibernate.type.FloatType@424fd310
2022-02-15 15:55:04  [ main:507 ] - [ DEBUG ]  Adding type registration float -> org.hibernate.type.FloatType@424fd310
2022-02-15 15:55:04  [ main:507 ] - [ DEBUG ]  Adding type registration java.lang.Float -> org.hibernate.type.FloatType@424fd310
2022-02-15 15:55:04  [ main:508 ] - [ DEBUG ]  Adding type registration double -> org.hibernate.type.DoubleType@85e6769
2022-02-15 15:55:04  [ main:508 ] - [ DEBUG ]  Adding type registration double -> org.hibernate.type.DoubleType@85e6769
2022-02-15 15:55:04  [ main:508 ] - [ DEBUG ]  Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@85e6769
2022-02-15 15:55:04  [ main:509 ] - [ DEBUG ]  Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@4e858e0a
2022-02-15 15:55:04  [ main:509 ] - [ DEBUG ]  Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@4e858e0a
2022-02-15 15:55:04  [ main:509 ] - [ DEBUG ]  Adding type registration big_integer -> org.hibernate.type.BigIntegerType@56c698e3
2022-02-15 15:55:04  [ main:510 ] - [ DEBUG ]  Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@56c698e3
2022-02-15 15:55:04  [ main:510 ] - [ DEBUG ]  Adding type registration string -> org.hibernate.type.StringType@7ce97ee5
2022-02-15 15:55:04  [ main:510 ] - [ DEBUG ]  Adding type registration java.lang.String -> org.hibernate.type.StringType@7ce97ee5
2022-02-15 15:55:04  [ main:511 ] - [ DEBUG ]  Adding type registration nstring -> org.hibernate.type.StringNVarcharType@32811494
2022-02-15 15:55:04  [ main:511 ] - [ DEBUG ]  Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@2eced48b
2022-02-15 15:55:04  [ main:512 ] - [ DEBUG ]  Adding type registration url -> org.hibernate.type.UrlType@4bd1f8dd
2022-02-15 15:55:04  [ main:512 ] - [ DEBUG ]  Adding type registration java.net.URL -> org.hibernate.type.UrlType@4bd1f8dd
2022-02-15 15:55:04  [ main:513 ] - [ DEBUG ]  Adding type registration Duration -> org.hibernate.type.DurationType@5d1659ea
2022-02-15 15:55:04  [ main:513 ] - [ DEBUG ]  Adding type registration java.time.Duration -> org.hibernate.type.DurationType@5d1659ea
2022-02-15 15:55:04  [ main:515 ] - [ DEBUG ]  Adding type registration Instant -> org.hibernate.type.InstantType@7c098bb3
2022-02-15 15:55:04  [ main:516 ] - [ DEBUG ]  Adding type registration java.time.Instant -> org.hibernate.type.InstantType@7c098bb3
2022-02-15 15:55:04  [ main:517 ] - [ DEBUG ]  Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@13f17eb4
2022-02-15 15:55:04  [ main:517 ] - [ DEBUG ]  Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@13f17eb4
2022-02-15 15:55:04  [ main:518 ] - [ DEBUG ]  Adding type registration LocalDate -> org.hibernate.type.LocalDateType@7ec3394b
2022-02-15 15:55:04  [ main:518 ] - [ DEBUG ]  Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@7ec3394b
2022-02-15 15:55:04  [ main:519 ] - [ DEBUG ]  Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@4351c8c3
2022-02-15 15:55:04  [ main:519 ] - [ DEBUG ]  Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@4351c8c3
2022-02-15 15:55:04  [ main:520 ] - [ DEBUG ]  Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@aeab9a1
2022-02-15 15:55:04  [ main:521 ] - [ DEBUG ]  Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@aeab9a1
2022-02-15 15:55:04  [ main:522 ] - [ DEBUG ]  Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@45905bff
2022-02-15 15:55:04  [ main:522 ] - [ DEBUG ]  Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@45905bff
2022-02-15 15:55:04  [ main:523 ] - [ DEBUG ]  Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@7c541c15
2022-02-15 15:55:04  [ main:523 ] - [ DEBUG ]  Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@7c541c15
2022-02-15 15:55:04  [ main:524 ] - [ DEBUG ]  Adding type registration date -> org.hibernate.type.DateType@549949be
2022-02-15 15:55:04  [ main:524 ] - [ DEBUG ]  Adding type registration java.sql.Date -> org.hibernate.type.DateType@549949be
2022-02-15 15:55:04  [ main:525 ] - [ DEBUG ]  Adding type registration time -> org.hibernate.type.TimeType@20f12539
2022-02-15 15:55:04  [ main:525 ] - [ DEBUG ]  Adding type registration java.sql.Time -> org.hibernate.type.TimeType@20f12539
2022-02-15 15:55:04  [ main:526 ] - [ DEBUG ]  Adding type registration timestamp -> org.hibernate.type.TimestampType@77a98a6a
2022-02-15 15:55:04  [ main:526 ] - [ DEBUG ]  Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@77a98a6a
2022-02-15 15:55:04  [ main:526 ] - [ DEBUG ]  Adding type registration java.util.Date -> org.hibernate.type.TimestampType@77a98a6a
2022-02-15 15:55:04  [ main:527 ] - [ DEBUG ]  Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@45e37a7e
2022-02-15 15:55:04  [ main:528 ] - [ DEBUG ]  Adding type registration calendar -> org.hibernate.type.CalendarType@5e81e5ac
2022-02-15 15:55:04  [ main:528 ] - [ DEBUG ]  Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@5e81e5ac
2022-02-15 15:55:04  [ main:528 ] - [ DEBUG ]  Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@5e81e5ac
2022-02-15 15:55:04  [ main:529 ] - [ DEBUG ]  Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@6035b93b
2022-02-15 15:55:04  [ main:529 ] - [ DEBUG ]  Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@58fe0499
2022-02-15 15:55:04  [ main:530 ] - [ DEBUG ]  Adding type registration locale -> org.hibernate.type.LocaleType@5c00384f
2022-02-15 15:55:04  [ main:530 ] - [ DEBUG ]  Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@5c00384f
2022-02-15 15:55:04  [ main:530 ] - [ DEBUG ]  Adding type registration currency -> org.hibernate.type.CurrencyType@1cbf6e72
2022-02-15 15:55:04  [ main:531 ] - [ DEBUG ]  Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@1cbf6e72
2022-02-15 15:55:04  [ main:531 ] - [ DEBUG ]  Adding type registration timezone -> org.hibernate.type.TimeZoneType@fb9c7aa
2022-02-15 15:55:04  [ main:531 ] - [ DEBUG ]  Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@fb9c7aa
2022-02-15 15:55:04  [ main:532 ] - [ DEBUG ]  Adding type registration class -> org.hibernate.type.ClassType@5dd91bca
2022-02-15 15:55:04  [ main:532 ] - [ DEBUG ]  Adding type registration java.lang.Class -> org.hibernate.type.ClassType@5dd91bca
2022-02-15 15:55:04  [ main:533 ] - [ DEBUG ]  Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@a5bd950
2022-02-15 15:55:04  [ main:533 ] - [ DEBUG ]  Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@a5bd950
2022-02-15 15:55:04  [ main:533 ] - [ DEBUG ]  Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@2313052e
2022-02-15 15:55:04  [ main:534 ] - [ DEBUG ]  Adding type registration binary -> org.hibernate.type.BinaryType@565b064f
2022-02-15 15:55:04  [ main:534 ] - [ DEBUG ]  Adding type registration byte[] -> org.hibernate.type.BinaryType@565b064f
2022-02-15 15:55:04  [ main:534 ] - [ DEBUG ]  Adding type registration [B -> org.hibernate.type.BinaryType@565b064f
2022-02-15 15:55:04  [ main:535 ] - [ DEBUG ]  Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@62f4ff3b
2022-02-15 15:55:04  [ main:535 ] - [ DEBUG ]  Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@62f4ff3b
2022-02-15 15:55:04  [ main:535 ] - [ DEBUG ]  Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@62f4ff3b
2022-02-15 15:55:04  [ main:536 ] - [ DEBUG ]  Adding type registration row_version -> org.hibernate.type.RowVersionType@2b5825fa
2022-02-15 15:55:04  [ main:536 ] - [ DEBUG ]  Adding type registration image -> org.hibernate.type.ImageType@7c209437
2022-02-15 15:55:04  [ main:537 ] - [ DEBUG ]  Adding type registration characters -> org.hibernate.type.CharArrayType@1698ee84
2022-02-15 15:55:04  [ main:537 ] - [ DEBUG ]  Adding type registration char[] -> org.hibernate.type.CharArrayType@1698ee84
2022-02-15 15:55:04  [ main:537 ] - [ DEBUG ]  Adding type registration [C -> org.hibernate.type.CharArrayType@1698ee84
2022-02-15 15:55:04  [ main:538 ] - [ DEBUG ]  Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@75459c75
2022-02-15 15:55:04  [ main:538 ] - [ DEBUG ]  Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@75459c75
2022-02-15 15:55:04  [ main:538 ] - [ DEBUG ]  Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@75459c75
2022-02-15 15:55:04  [ main:539 ] - [ DEBUG ]  Adding type registration text -> org.hibernate.type.TextType@67ab1c47
2022-02-15 15:55:04  [ main:539 ] - [ DEBUG ]  Adding type registration ntext -> org.hibernate.type.NTextType@15cafec7
2022-02-15 15:55:04  [ main:540 ] - [ DEBUG ]  Adding type registration blob -> org.hibernate.type.BlobType@338494fa
2022-02-15 15:55:04  [ main:540 ] - [ DEBUG ]  Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@338494fa
2022-02-15 15:55:04  [ main:540 ] - [ DEBUG ]  Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@5af3a0f
2022-02-15 15:55:04  [ main:542 ] - [ DEBUG ]  Adding type registration clob -> org.hibernate.type.ClobType@53812a9b
2022-02-15 15:55:04  [ main:542 ] - [ DEBUG ]  Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@53812a9b
2022-02-15 15:55:04  [ main:543 ] - [ DEBUG ]  Adding type registration nclob -> org.hibernate.type.NClobType@531c311e
2022-02-15 15:55:04  [ main:543 ] - [ DEBUG ]  Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@531c311e
2022-02-15 15:55:04  [ main:544 ] - [ DEBUG ]  Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@40c80397
2022-02-15 15:55:04  [ main:544 ] - [ DEBUG ]  Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@ed3068a
2022-02-15 15:55:04  [ main:545 ] - [ DEBUG ]  Adding type registration serializable -> org.hibernate.type.SerializableType@fd8294b
2022-02-15 15:55:04  [ main:548 ] - [ DEBUG ]  Adding type registration object -> org.hibernate.type.ObjectType@1080b026
2022-02-15 15:55:04  [ main:548 ] - [ DEBUG ]  Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1080b026
2022-02-15 15:55:04  [ main:549 ] - [ DEBUG ]  Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@a4b2d8f
2022-02-15 15:55:04  [ main:549 ] - [ DEBUG ]  Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@dcfda20
2022-02-15 15:55:04  [ main:549 ] - [ DEBUG ]  Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@6d304f9d
2022-02-15 15:55:04  [ main:549 ] - [ DEBUG ]  Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@f73dcd6
2022-02-15 15:55:04  [ main:549 ] - [ DEBUG ]  Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@5c87bfe2
2022-02-15 15:55:04  [ main:550 ] - [ DEBUG ]  Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@2fea7088
2022-02-15 15:55:04  [ main:550 ] - [ DEBUG ]  Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@40499e4f
2022-02-15 15:55:04  [ main:550 ] - [ DEBUG ]  Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@51cd7ffc
2022-02-15 15:55:04  [ main:565 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2022-02-15 15:55:04  [ main:565 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2022-02-15 15:55:04  [ main:565 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2022-02-15 15:55:04  [ main:566 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2022-02-15 15:55:04  [ main:566 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2022-02-15 15:55:04  [ main:566 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2022-02-15 15:55:04  [ main:567 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2022-02-15 15:55:04  [ main:568 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-02-15 15:55:04  [ main:568 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2022-02-15 15:55:04  [ main:569 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2022-02-15 15:55:04  [ main:569 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2022-02-15 15:55:04  [ main:569 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2022-02-15 15:55:04  [ main:569 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-02-15 15:55:04  [ main:570 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2022-02-15 15:55:04  [ main:574 ] - [ WARN ]  HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2022-02-15 15:55:04  [ main:578 ] - [ INFO ]  HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:testdb1;DB_CLOSE_DELAY=-1]
2022-02-15 15:55:04  [ main:579 ] - [ INFO ]  HHH10001001: Connection properties: {password=root, user=root}
2022-02-15 15:55:04  [ main:579 ] - [ INFO ]  HHH10001003: Autocommit mode: false
2022-02-15 15:55:04  [ main:581 ] - [ DEBUG ]  Initializing Connection pool with 1 Connections
2022-02-15 15:55:04  [ main:581 ] - [ INFO ]  HHH000115: Hibernate connection pool size: 20 (min=1)
2022-02-15 15:55:04  [ main:694 ] - [ DEBUG ]  Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2022-02-15 15:55:04  [ main:694 ] - [ DEBUG ]  Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2022-02-15 15:55:04  [ main:694 ] - [ DEBUG ]  JDBC version : 4.1
2022-02-15 15:55:04  [ main:701 ] - [ INFO ]  HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2022-02-15 15:55:04  [ main:724 ] - [ DEBUG ]  JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2022-02-15 15:55:04  [ main:737 ] - [ INFO ]  HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
2022-02-15 15:55:04  [ main:739 ] - [ DEBUG ]  Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2022-02-15 15:55:04  [ main:741 ] - [ DEBUG ]  Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1358b28e] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@1a78dacd]
2022-02-15 15:55:04  [ main:763 ] - [ DEBUG ]  Binding entity from annotated class: User
2022-02-15 15:55:04  [ main:782 ] - [ DEBUG ]  Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-02-15 15:55:04  [ main:785 ] - [ DEBUG ]  Import with entity name User
2022-02-15 15:55:04  [ main:786 ] - [ DEBUG ]  Bind entity User on table USERS_DB
2022-02-15 15:55:04  [ main:798 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(USERS_DB), mappingColumn=id, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:04  [ main:799 ] - [ DEBUG ]  Not known whether passed class name [User] is safe
2022-02-15 15:55:04  [ main:800 ] - [ DEBUG ]  No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : User
2022-02-15 15:55:04  [ main:800 ] - [ DEBUG ]  MetadataSourceProcessor property id with lazy=false
2022-02-15 15:55:04  [ main:801 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [User:id]
2022-02-15 15:55:04  [ main:802 ] - [ DEBUG ]  building SimpleValue for id
2022-02-15 15:55:04  [ main:803 ] - [ DEBUG ]  Building property id
2022-02-15 15:55:04  [ main:805 ] - [ DEBUG ]  #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2022-02-15 15:55:04  [ main:805 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(USERS_DB), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:04  [ main:805 ] - [ DEBUG ]  MetadataSourceProcessor property birthday with lazy=false
2022-02-15 15:55:04  [ main:806 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [User:birthday]
2022-02-15 15:55:04  [ main:806 ] - [ DEBUG ]  building SimpleValue for birthday
2022-02-15 15:55:04  [ main:806 ] - [ DEBUG ]  Building property birthday
2022-02-15 15:55:04  [ main:806 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(USERS_DB), mappingColumn=email, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:04  [ main:806 ] - [ DEBUG ]  MetadataSourceProcessor property email with lazy=false
2022-02-15 15:55:04  [ main:806 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [User:email]
2022-02-15 15:55:04  [ main:806 ] - [ DEBUG ]  building SimpleValue for email
2022-02-15 15:55:04  [ main:806 ] - [ DEBUG ]  Building property email
2022-02-15 15:55:04  [ main:807 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(USERS_DB), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:04  [ main:807 ] - [ DEBUG ]  MetadataSourceProcessor property firstName with lazy=false
2022-02-15 15:55:04  [ main:807 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [User:firstName]
2022-02-15 15:55:04  [ main:807 ] - [ DEBUG ]  building SimpleValue for firstName
2022-02-15 15:55:04  [ main:807 ] - [ DEBUG ]  Building property firstName
2022-02-15 15:55:04  [ main:807 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(USERS_DB), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:04  [ main:807 ] - [ DEBUG ]  MetadataSourceProcessor property lastName with lazy=false
2022-02-15 15:55:04  [ main:807 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [User:lastName]
2022-02-15 15:55:04  [ main:808 ] - [ DEBUG ]  building SimpleValue for lastName
2022-02-15 15:55:04  [ main:808 ] - [ DEBUG ]  Building property lastName
2022-02-15 15:55:04  [ main:808 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(USERS_DB), mappingColumn=login, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:04  [ main:808 ] - [ DEBUG ]  MetadataSourceProcessor property login with lazy=false
2022-02-15 15:55:04  [ main:808 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [User:login]
2022-02-15 15:55:04  [ main:808 ] - [ DEBUG ]  building SimpleValue for login
2022-02-15 15:55:04  [ main:808 ] - [ DEBUG ]  Building property login
2022-02-15 15:55:04  [ main:808 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(USERS_DB), mappingColumn=password, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:04  [ main:809 ] - [ DEBUG ]  MetadataSourceProcessor property password with lazy=false
2022-02-15 15:55:04  [ main:809 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [User:password]
2022-02-15 15:55:04  [ main:809 ] - [ DEBUG ]  building SimpleValue for password
2022-02-15 15:55:04  [ main:809 ] - [ DEBUG ]  Building property password
2022-02-15 15:55:04  [ main:810 ] - [ DEBUG ]  Binding column: Ejb3JoinColumn{logicalColumnName='role_id', referencedColumn='', mappedBy=''}
2022-02-15 15:55:04  [ main:810 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(USERS_DB), mappingColumn=role, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:04  [ main:811 ] - [ DEBUG ]  Building property role
2022-02-15 15:55:04  [ main:815 ] - [ DEBUG ]  Binding entity from annotated class: Role
2022-02-15 15:55:04  [ main:816 ] - [ DEBUG ]  Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-02-15 15:55:04  [ main:816 ] - [ DEBUG ]  Import with entity name Role
2022-02-15 15:55:04  [ main:816 ] - [ DEBUG ]  Bind entity Role on table ROLES_DB
2022-02-15 15:55:04  [ main:818 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ROLES_DB), mappingColumn=id, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:04  [ main:818 ] - [ DEBUG ]  Not known whether passed class name [Role] is safe
2022-02-15 15:55:04  [ main:819 ] - [ DEBUG ]  No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : Role
2022-02-15 15:55:04  [ main:819 ] - [ DEBUG ]  MetadataSourceProcessor property id with lazy=false
2022-02-15 15:55:04  [ main:819 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [Role:id]
2022-02-15 15:55:04  [ main:819 ] - [ DEBUG ]  building SimpleValue for id
2022-02-15 15:55:04  [ main:819 ] - [ DEBUG ]  Building property id
2022-02-15 15:55:04  [ main:819 ] - [ DEBUG ]  #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2022-02-15 15:55:04  [ main:819 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ROLES_DB), mappingColumn=name, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:04  [ main:819 ] - [ DEBUG ]  MetadataSourceProcessor property name with lazy=false
2022-02-15 15:55:04  [ main:820 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [Role:name]
2022-02-15 15:55:04  [ main:820 ] - [ DEBUG ]  building SimpleValue for name
2022-02-15 15:55:04  [ main:820 ] - [ DEBUG ]  Building property name
2022-02-15 15:55:04  [ main:820 ] - [ DEBUG ]  Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='role'}
2022-02-15 15:55:04  [ main:820 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ROLES_DB), mappingColumn=users, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:04  [ main:821 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ROLES_DB), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:04  [ main:827 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ROLES_DB), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:04  [ main:827 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ROLES_DB), mappingColumn=users_KEY, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:04  [ main:828 ] - [ DEBUG ]  Binding column: Ejb3JoinColumn{logicalColumnName='users_KEY', referencedColumn='null', mappedBy='null'}
2022-02-15 15:55:04  [ main:829 ] - [ DEBUG ]  Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='role'}
2022-02-15 15:55:04  [ main:829 ] - [ DEBUG ]  Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='role'}
2022-02-15 15:55:04  [ main:829 ] - [ DEBUG ]  Collection role: Role.users
2022-02-15 15:55:04  [ main:830 ] - [ DEBUG ]  Building property users
2022-02-15 15:55:04  [ main:832 ] - [ DEBUG ]  Starting fillSimpleValue for id
2022-02-15 15:55:04  [ main:833 ] - [ DEBUG ]  Starting fillSimpleValue for birthday
2022-02-15 15:55:04  [ main:833 ] - [ DEBUG ]  Starting fillSimpleValue for email
2022-02-15 15:55:04  [ main:833 ] - [ DEBUG ]  Starting fillSimpleValue for firstName
2022-02-15 15:55:04  [ main:833 ] - [ DEBUG ]  Starting fillSimpleValue for lastName
2022-02-15 15:55:04  [ main:833 ] - [ DEBUG ]  Starting fillSimpleValue for login
2022-02-15 15:55:04  [ main:833 ] - [ DEBUG ]  Starting fillSimpleValue for password
2022-02-15 15:55:04  [ main:833 ] - [ DEBUG ]  Starting fillSimpleValue for id
2022-02-15 15:55:04  [ main:834 ] - [ DEBUG ]  Starting fillSimpleValue for name
2022-02-15 15:55:04  [ main:836 ] - [ DEBUG ]  Forcing column [id] to be non-null as it is part of the primary key for table [users_db]
2022-02-15 15:55:04  [ main:836 ] - [ DEBUG ]  Forcing column [id] to be non-null as it is part of the primary key for table [roles_db]
2022-02-15 15:55:04  [ main:837 ] - [ DEBUG ]  Second pass for collection: Role.users
2022-02-15 15:55:04  [ main:837 ] - [ DEBUG ]  Binding a OneToMany: Role.users through a foreign key
2022-02-15 15:55:04  [ main:837 ] - [ DEBUG ]  Mapping collection: Role.users -> USERS_DB
2022-02-15 15:55:04  [ main:838 ] - [ DEBUG ]  Retrieving property User.role
2022-02-15 15:55:04  [ main:838 ] - [ DEBUG ]  Mapped collection key: role_id, one-to-many: User
2022-02-15 15:55:04  [ main:839 ] - [ DEBUG ]  Resolving reference to class: Role
2022-02-15 15:55:04  [ main:842 ] - [ DEBUG ]  Resolving reference to class: Role
2022-02-15 15:55:04  [ main:866 ] - [ DEBUG ]  Building session factory
2022-02-15 15:55:04  [ main:867 ] - [ DEBUG ]  SessionFactory name : null
2022-02-15 15:55:04  [ main:867 ] - [ DEBUG ]  Automatic flush during beforeCompletion(): enabled
2022-02-15 15:55:04  [ main:867 ] - [ DEBUG ]  Automatic session close at end of transaction: disabled
2022-02-15 15:55:04  [ main:868 ] - [ DEBUG ]  Statistics: disabled
2022-02-15 15:55:04  [ main:868 ] - [ DEBUG ]  Deleted entity synthetic identifier rollback: disabled
2022-02-15 15:55:04  [ main:868 ] - [ DEBUG ]  Default entity-mode: pojo
2022-02-15 15:55:04  [ main:868 ] - [ DEBUG ]  Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2022-02-15 15:55:04  [ main:868 ] - [ DEBUG ]  Allow initialization of lazy state outside session : disabled
2022-02-15 15:55:04  [ main:868 ] - [ DEBUG ]  Using BatchFetchStyle : LEGACY
2022-02-15 15:55:04  [ main:868 ] - [ DEBUG ]  Default batch fetch size: -1
2022-02-15 15:55:04  [ main:868 ] - [ DEBUG ]  Maximum outer join fetch depth: null
2022-02-15 15:55:04  [ main:868 ] - [ DEBUG ]  Default null ordering: NONE
2022-02-15 15:55:04  [ main:869 ] - [ DEBUG ]  Order SQL updates by primary key: disabled
2022-02-15 15:55:04  [ main:869 ] - [ DEBUG ]  Order SQL inserts for batching: disabled
2022-02-15 15:55:04  [ main:869 ] - [ DEBUG ]  multi-tenancy strategy : NONE
2022-02-15 15:55:04  [ main:869 ] - [ DEBUG ]  JTA Track by Thread: enabled
2022-02-15 15:55:04  [ main:869 ] - [ DEBUG ]  Query language substitutions: {}
2022-02-15 15:55:04  [ main:869 ] - [ DEBUG ]  Named query checking : enabled
2022-02-15 15:55:04  [ main:869 ] - [ DEBUG ]  Second-level cache: disabled
2022-02-15 15:55:04  [ main:869 ] - [ DEBUG ]  Second-level query cache: disabled
2022-02-15 15:55:04  [ main:869 ] - [ DEBUG ]  Second-level query cache factory: null
2022-02-15 15:55:04  [ main:870 ] - [ DEBUG ]  Second-level cache region prefix: null
2022-02-15 15:55:04  [ main:870 ] - [ DEBUG ]  Optimize second-level cache for minimal puts: disabled
2022-02-15 15:55:04  [ main:870 ] - [ DEBUG ]  Structured second-level cache entries: disabled
2022-02-15 15:55:04  [ main:870 ] - [ DEBUG ]  Second-level cache direct-reference entries: disabled
2022-02-15 15:55:04  [ main:870 ] - [ DEBUG ]  Automatic eviction of collection cache: disabled
2022-02-15 15:55:04  [ main:870 ] - [ DEBUG ]  JDBC batch size: 15
2022-02-15 15:55:04  [ main:870 ] - [ DEBUG ]  JDBC batch updates for versioned data: enabled
2022-02-15 15:55:04  [ main:870 ] - [ DEBUG ]  Scrollable result sets: enabled
2022-02-15 15:55:04  [ main:870 ] - [ DEBUG ]  Wrap result sets: disabled
2022-02-15 15:55:04  [ main:870 ] - [ DEBUG ]  JDBC3 getGeneratedKeys(): enabled
2022-02-15 15:55:04  [ main:871 ] - [ DEBUG ]  JDBC result set fetch size: null
2022-02-15 15:55:04  [ main:871 ] - [ DEBUG ]  Connection release mode: AFTER_TRANSACTION
2022-02-15 15:55:04  [ main:871 ] - [ DEBUG ]  Generate SQL with comments: disabled
2022-02-15 15:55:04  [ main:871 ] - [ DEBUG ]  JPA compliance - query : disabled
2022-02-15 15:55:04  [ main:871 ] - [ DEBUG ]  JPA compliance - closed-handling : disabled
2022-02-15 15:55:04  [ main:871 ] - [ DEBUG ]  JPA compliance - lists : disabled
2022-02-15 15:55:04  [ main:871 ] - [ DEBUG ]  JPA compliance - transactions : disabled
2022-02-15 15:55:04  [ main:901 ] - [ DEBUG ]  EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2022-02-15 15:55:04  [ main:902 ] - [ DEBUG ]  EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2022-02-15 15:55:04  [ main:908 ] - [ DEBUG ]  Session factory constructed with filter configurations : {}
2022-02-15 15:55:04  [ main:909 ] - [ DEBUG ]  Instantiating session factory with properties: {sun.desktop=gnome, awt.toolkit=sun.awt.X11.XToolkit, dialect=org.hibernate.dialect.H2Dialect, java.specification.version=11, sun.cpu.isalist=, hibernate.dbcp.maxIdle=10, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/home/NIX/mirzoiev-r/.local/share/JetBrains/Toolbox/apps/IDEA-U/ch-0/213.6777.52/lib/idea_rt.jar:/home/NIX/mirzoiev-r/.local/share/JetBrains/Toolbox/apps/IDEA-U/ch-0/213.6777.52/plugins/junit/lib/junit5-rt.jar:/home/NIX/mirzoiev-r/.local/share/JetBrains/Toolbox/apps/IDEA-U/ch-0/213.6777.52/plugins/junit/lib/junit-rt.jar:/home/NIX/mirzoiev-r/IdeaProject/mirzoiev.r/19_jpa_hibernate/target/test-classes:/home/NIX/mirzoiev-r/IdeaProject/mirzoiev.r/19_jpa_hibernate/target/classes:/home/NIX/mirzoiev-r/.m2/repository/org/slf4j/slf4j-api/1.7.2/slf4j-api-1.7.2.jar:/home/NIX/mirzoiev-r/.m2/repository/org/slf4j/slf4j-log4j12/1.7.2/slf4j-log4j12-1.7.2.jar:/home/NIX/mirzoiev-r/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/home/NIX/mirzoiev-r/.m2/repository/commons-dbcp/commons-dbcp/1.4/commons-dbcp-1.4.jar:/home/NIX/mirzoiev-r/.m2/repository/commons-pool/commons-pool/1.5.4/commons-pool-1.5.4.jar:/home/NIX/mirzoiev-r/.m2/repository/org/dbunit/dbunit/2.7.2/dbunit-2.7.2.jar:/home/NIX/mirzoiev-r/.m2/repository/com/github/database-rider/rider-core/1.32.0/rider-core-1.32.0.jar:/home/NIX/mirzoiev-r/.m2/repository/org/yaml/snakeyaml/1.16/snakeyaml-1.16.jar:/home/NIX/mirzoiev-r/.m2/repository/org/codehaus/jackson/jackson-mapper-lgpl/1.9.13/jackson-mapper-lgpl-1.9.13.jar:/home/NIX/mirzoiev-r/.m2/repository/org/codehaus/jackson/jackson-core-lgpl/1.9.13/jackson-core-lgpl-1.9.13.jar:/home/NIX/mirzoiev-r/.m2/repository/mysql/mysql-connector-java/8.0.25/mysql-connector-java-8.0.25.jar:/home/NIX/mirzoiev-r/.m2/repository/com/google/protobuf/protobuf-java/3.11.4/protobuf-java-3.11.4.jar:/home/NIX/mirzoiev-r/.m2/repository/junit/junit/4.11/junit-4.11.jar:/home/NIX/mirzoiev-r/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/NIX/mirzoiev-r/.m2/repository/com/github/dbunit-rules/core/0.15.1/core-0.15.1.jar:/home/NIX/mirzoiev-r/.m2/repository/org/apache/geronimo/specs/geronimo-osgi-locator/1.1/geronimo-osgi-locator-1.1.jar:/home/NIX/mirzoiev-r/.m2/repository/org/hibernate/hibernate-entitymanager/5.6.1.Final/hibernate-entitymanager-5.6.1.Final.jar:/home/NIX/mirzoiev-r/.m2/repository/org/jboss/logging/jboss-logging/3.4.2.Final/jboss-logging-3.4.2.Final.jar:/home/NIX/mirzoiev-r/.m2/repository/org/hibernate/common/hibernate-commons-annotations/5.1.2.Final/hibernate-commons-annotations-5.1.2.Final.jar:/home/NIX/mirzoiev-r/.m2/repository/javax/persistence/javax.persistence-api/2.2/javax.persistence-api-2.2.jar:/home/NIX/mirzoiev-r/.m2/repository/net/bytebuddy/byte-buddy/1.11.20/byte-buddy-1.11.20.jar:/home/NIX/mirzoiev-r/.m2/repository/org/jboss/spec/javax/transaction/jboss-transaction-api_1.2_spec/1.1.1.Final/jboss-transaction-api_1.2_spec-1.1.1.Final.jar:/home/NIX/mirzoiev-r/.m2/repository/org/apache/tomee/javaee-api/8.0/javaee-api-8.0.jar:/home/NIX/mirzoiev-r/.m2/repository/org/hibernate/hibernate-core/5.6.1.Final/hibernate-core-5.6.1.Final.jar:/home/NIX/mirzoiev-r/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar:/home/NIX/mirzoiev-r/.m2/repository/org/jboss/jandex/2.2.3.Final/jandex-2.2.3.Final.jar:/home/NIX/mirzoiev-r/.m2/repository/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar:/home/NIX/mirzoiev-r/.m2/repository/javax/activation/javax.activation-api/1.2.0/javax.activation-api-1.2.0.jar:/home/NIX/mirzoiev-r/.m2/repository/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar:/home/NIX/mirzoiev-r/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.1/jaxb-runtime-2.3.1.jar:/home/NIX/mirzoiev-r/.m2/repository/org/glassfish/jaxb/txw2/2.3.1/txw2-2.3.1.jar:/home/NIX/mirzoiev-r/.m2/repository/com/sun/istack/istack-commons-runtime/3.0.7/istack-commons-runtime-3.0.7.jar:/home/NIX/mirzoiev-r/.m2/repository/org/jvnet/staxex/stax-ex/1.8/stax-ex-1.8.jar:/home/NIX/mirzoiev-r/.m2/repository/com/sun/xml/fastinfoset/FastInfoset/1.2.15/FastInfoset-1.2.15.jar:/home/NIX/mirzoiev-r/.m2/repository/com/h2database/h2/1.4.200/h2-1.4.200.jar:/home/NIX/mirzoiev-r/.m2/repository/org/junit/jupiter/junit-jupiter/5.8.2/junit-jupiter-5.8.2.jar:/home/NIX/mirzoiev-r/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.8.2/junit-jupiter-api-5.8.2.jar:/home/NIX/mirzoiev-r/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/home/NIX/mirzoiev-r/.m2/repository/org/junit/platform/junit-platform-commons/1.8.2/junit-platform-commons-1.8.2.jar:/home/NIX/mirzoiev-r/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/NIX/mirzoiev-r/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.8.2/junit-jupiter-params-5.8.2.jar:/home/NIX/mirzoiev-r/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.8.2/junit-jupiter-engine-5.8.2.jar:/home/NIX/mirzoiev-r/.m2/repository/org/junit/platform/junit-platform-engine/1.8.2/junit-platform-engine-1.8.2.jar, java.vm.vendor=Ubuntu, sun.arch.data.model=64, idea.test.cyclic.buffer.size=1048576, hbm2ddl.auto=create-drop, java.vendor.url=https://ubuntu.com/, user.timezone=Europe/Kiev, hibernate.dbcp.maxWaitMillis=-1, os.name=Linux, java.vm.specification.version=11, current_session_context_class=thread, sun.java.launcher=SUN_STANDARD, user.country=US, sun.boot.library.path=/usr/lib/jvm/java-11-openjdk-amd64/lib, sun.java.command=com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit4 DataSourceDBRiderTest, jdk.debug=release, sun.cpu.endian=little, user.home=/home/NIX/mirzoiev-r, user.language=en, java.specification.vendor=Oracle Corporation, java.version.date=2021-10-19, java.home=/usr/lib/jvm/java-11-openjdk-amd64, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.specification.name=Java Platform API Specification, java.vm.specification.vendor=Oracle Corporation, java.awt.graphicsenv=sun.awt.X11GraphicsEnvironment, hibernate.hbm2ddl.auto=create-drop, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=11.0.13+8-Ubuntu-0ubuntu1.20.04, user.name=mirzoiev-r, path.separator=:, hibernate.connection.username=****, hibernate.dbcp.minIdle=5, os.version=5.13.0-28-generic, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:h2:mem:testdb1;DB_CLOSE_DELAY=-1, file.encoding=UTF-8, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, hibernate.dbcp.initialSize=5, hibernate.dbcp.maxTotal=20, hibernate.current_session_context_class=thread, show_sql=true, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugs.launchpad.net/ubuntu/+source/openjdk-lts, java.io.tmpdir=/tmp, java.version=11.0.13, user.dir=/home/NIX/mirzoiev-r/IdeaProject/mirzoiev.r/19_jpa_hibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.print.PSPrinterJob, hibernate.connection.password=****, sun.os.patch.level=unknown, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@4cb0a000, java.library.path=/usr/java/packages/lib:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib, java.vendor=Ubuntu, java.vm.info=mixed mode, sharing, java.vm.version=11.0.13+8-Ubuntu-0ubuntu1.20.04, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, java.class.version=55.0}
2022-02-15 15:55:04  [ main:918 ] - [ DEBUG ]  Unable to acquire Bean Validation ValidatorFactory, skipping activation
2022-02-15 15:55:04  [ main:918 ] - [ DEBUG ]  Skipping JACC integration as it was not enabled
2022-02-15 15:55:04  [ main:919 ] - [ DEBUG ]  Instantiated session factory
2022-02-15 15:55:04  [ main:919 ] - [ DEBUG ]  Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1358b28e] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@66ad7bf0]
2022-02-15 15:55:04  [ main:952 ] - [ DEBUG ]  Not known whether passed class name [User] is safe
2022-02-15 15:55:04  [ main:952 ] - [ DEBUG ]  No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : User
2022-02-15 15:55:04  [ main:1057 ] - [ DEBUG ]  Not known whether passed class name [Role] is safe
2022-02-15 15:55:04  [ main:1057 ] - [ DEBUG ]  No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : Role
2022-02-15 15:55:04  [ main:1073 ] - [ DEBUG ]  Static SQL for collection: Role.users
2022-02-15 15:55:04  [ main:1074 ] - [ DEBUG ]   Row insert: update USERS_DB set role_id=? where id=?
2022-02-15 15:55:04  [ main:1074 ] - [ DEBUG ]   Row update: update USERS_DB set  where id=?
2022-02-15 15:55:04  [ main:1074 ] - [ DEBUG ]   Row delete: update USERS_DB set role_id=null where role_id=? and id=?
2022-02-15 15:55:04  [ main:1074 ] - [ DEBUG ]   One-shot delete: update USERS_DB set role_id=null where role_id=?
2022-02-15 15:55:04  [ main:1076 ] - [ DEBUG ]  Static SQL for entity: User
2022-02-15 15:55:04  [ main:1077 ] - [ DEBUG ]   Version select: select id from USERS_DB where id =?
2022-02-15 15:55:04  [ main:1077 ] - [ DEBUG ]   Snapshot select: select user_.id, user_.birthday as birthday2_1_, user_.email as email3_1_, user_.firstname as firstnam4_1_, user_.lastname as lastname5_1_, user_.login as login6_1_, user_.password as password7_1_, user_.role_id as role_id8_1_ from USERS_DB user_ where user_.id=?
2022-02-15 15:55:04  [ main:1077 ] - [ DEBUG ]   Insert 0: insert into USERS_DB (birthday, email, firstname, lastname, login, password, role_id, id) values (?, ?, ?, ?, ?, ?, ?, ?)
2022-02-15 15:55:04  [ main:1077 ] - [ DEBUG ]   Update 0: update USERS_DB set birthday=?, email=?, firstname=?, lastname=?, login=?, password=?, role_id=? where id=?
2022-02-15 15:55:04  [ main:1077 ] - [ DEBUG ]   Delete 0: delete from USERS_DB where id=?
2022-02-15 15:55:04  [ main:1077 ] - [ DEBUG ]   Identity insert: insert into USERS_DB (id, birthday, email, firstname, lastname, login, password, role_id) values (null, ?, ?, ?, ?, ?, ?, ?)
2022-02-15 15:55:04  [ main:1087 ] - [ DEBUG ]  Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@80bfa9d]
2022-02-15 15:55:04  [ main:1087 ] - [ DEBUG ]  Visiting attribute path : birthday
2022-02-15 15:55:04  [ main:1088 ] - [ DEBUG ]  Visiting attribute path : email
2022-02-15 15:55:04  [ main:1088 ] - [ DEBUG ]  Visiting attribute path : firstName
2022-02-15 15:55:04  [ main:1088 ] - [ DEBUG ]  Visiting attribute path : lastName
2022-02-15 15:55:04  [ main:1088 ] - [ DEBUG ]  Visiting attribute path : login
2022-02-15 15:55:04  [ main:1088 ] - [ DEBUG ]  Visiting attribute path : password
2022-02-15 15:55:04  [ main:1088 ] - [ DEBUG ]  Visiting attribute path : role
2022-02-15 15:55:04  [ main:1090 ] - [ DEBUG ]  Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5ed4bc]
2022-02-15 15:55:04  [ main:1090 ] - [ DEBUG ]  Building LoadPlan...
2022-02-15 15:55:04  [ main:1095 ] - [ DEBUG ]  processing queryspace <gen:0>
2022-02-15 15:55:04  [ main:1097 ] - [ DEBUG ]  LoadPlan(entity=User)
    - Returns
       - EntityReturnImpl(entity=User, querySpaceUid=<gen:0>, path=User)
          - EntityAttributeFetchImpl(entity=Role, querySpaceUid=<gen:1>, path=User.role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2022-02-15 15:55:04  [ main:1098 ] - [ DEBUG ]  Static select for entity User [NONE]: select user0_.id as id1_1_0_, user0_.birthday as birthday2_1_0_, user0_.email as email3_1_0_, user0_.firstname as firstnam4_1_0_, user0_.lastname as lastname5_1_0_, user0_.login as login6_1_0_, user0_.password as password7_1_0_, user0_.role_id as role_id8_1_0_ from USERS_DB user0_ where user0_.id=?
2022-02-15 15:55:04  [ main:1098 ] - [ DEBUG ]  Static SQL for entity: Role
2022-02-15 15:55:04  [ main:1098 ] - [ DEBUG ]   Version select: select id from ROLES_DB where id =?
2022-02-15 15:55:04  [ main:1098 ] - [ DEBUG ]   Snapshot select: select role_.id, role_.name as name2_0_ from ROLES_DB role_ where role_.id=?
2022-02-15 15:55:04  [ main:1098 ] - [ DEBUG ]   Insert 0: insert into ROLES_DB (name, id) values (?, ?)
2022-02-15 15:55:04  [ main:1098 ] - [ DEBUG ]   Update 0: update ROLES_DB set name=? where id=?
2022-02-15 15:55:04  [ main:1099 ] - [ DEBUG ]   Delete 0: delete from ROLES_DB where id=?
2022-02-15 15:55:04  [ main:1099 ] - [ DEBUG ]   Identity insert: insert into ROLES_DB (id, name) values (null, ?)
2022-02-15 15:55:04  [ main:1099 ] - [ DEBUG ]  Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2d64c100]
2022-02-15 15:55:04  [ main:1099 ] - [ DEBUG ]  Visiting attribute path : name
2022-02-15 15:55:04  [ main:1099 ] - [ DEBUG ]  Visiting attribute path : users
2022-02-15 15:55:04  [ main:1099 ] - [ DEBUG ]  Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7d904ff1]
2022-02-15 15:55:04  [ main:1100 ] - [ DEBUG ]  Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@26fb4d06]
2022-02-15 15:55:04  [ main:1100 ] - [ DEBUG ]  Building LoadPlan...
2022-02-15 15:55:04  [ main:1100 ] - [ DEBUG ]  processing queryspace <gen:0>
2022-02-15 15:55:04  [ main:1101 ] - [ DEBUG ]  LoadPlan(entity=Role)
    - Returns
       - EntityReturnImpl(entity=Role, querySpaceUid=<gen:0>, path=Role)
          - CollectionAttributeFetchImpl(collection=Role.users, querySpaceUid=<gen:1>, path=Role.users)
             - (collection element) CollectionFetchableElementEntityGraph(entity=User, querySpaceUid=<gen:2>, path=Role.users.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2022-02-15 15:55:04  [ main:1101 ] - [ DEBUG ]  Static select for entity Role [NONE]: select role0_.id as id1_0_0_, role0_.name as name2_0_0_ from ROLES_DB role0_ where role0_.id=?
2022-02-15 15:55:04  [ main:1102 ] - [ DEBUG ]  Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@27fe9713]
2022-02-15 15:55:04  [ main:1103 ] - [ DEBUG ]  Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@11c3ff67]
2022-02-15 15:55:04  [ main:1103 ] - [ DEBUG ]  Visiting attribute path : birthday
2022-02-15 15:55:04  [ main:1103 ] - [ DEBUG ]  Visiting attribute path : email
2022-02-15 15:55:04  [ main:1104 ] - [ DEBUG ]  Visiting attribute path : firstName
2022-02-15 15:55:04  [ main:1104 ] - [ DEBUG ]  Visiting attribute path : lastName
2022-02-15 15:55:04  [ main:1104 ] - [ DEBUG ]  Visiting attribute path : login
2022-02-15 15:55:04  [ main:1104 ] - [ DEBUG ]  Visiting attribute path : password
2022-02-15 15:55:04  [ main:1104 ] - [ DEBUG ]  Visiting attribute path : role
2022-02-15 15:55:04  [ main:1104 ] - [ DEBUG ]  Property path deemed to be circular : role
2022-02-15 15:55:04  [ main:1104 ] - [ DEBUG ]  Building LoadPlan...
2022-02-15 15:55:04  [ main:1105 ] - [ DEBUG ]  processing queryspace <gen:0>
2022-02-15 15:55:04  [ main:1106 ] - [ DEBUG ]  LoadPlan(collection=Role.users)
    - Returns
       - CollectionReturnImpl(collection=Role.users, querySpaceUid=<gen:0>, path=[Role.users])
          - (collection element) CollectionFetchableElementEntityGraph(entity=User, querySpaceUid=<gen:1>, path=[Role.users].<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=Role.users)
          - SQL table alias mapping - users0_
          - alias suffix - 0_
          - suffixed key columns - {role_id8_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=User)
                - SQL table alias mapping - users0_
                - alias suffix - 1_
                - suffixed key columns - {id1_1_1_}

2022-02-15 15:55:04  [ main:1106 ] - [ DEBUG ]  Static select for collection Role.users: select users0_.role_id as role_id8_1_0_, users0_.id as id1_1_0_, users0_.id as id1_1_1_, users0_.birthday as birthday2_1_1_, users0_.email as email3_1_1_, users0_.firstname as firstnam4_1_1_, users0_.lastname as lastname5_1_1_, users0_.login as login6_1_1_, users0_.password as password7_1_1_, users0_.role_id as role_id8_1_1_ from USERS_DB users0_ where users0_.role_id=?
2022-02-15 15:55:04  [ main:1125 ] - [ DEBUG ]  drop table if exists ROLES_DB CASCADE 
2022-02-15 15:55:04  [ main:1126 ] - [ INFO ]  HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@7dffda8b] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2022-02-15 15:55:04  [ main:1127 ] - [ DEBUG ]  drop table if exists USERS_DB CASCADE 
2022-02-15 15:55:04  [ main:1128 ] - [ DEBUG ]  create table ROLES_DB (id bigint generated by default as identity, name varchar(255), primary key (id))
2022-02-15 15:55:04  [ main:1128 ] - [ INFO ]  HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@8cc8cdb] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2022-02-15 15:55:04  [ main:1133 ] - [ DEBUG ]  create table USERS_DB (id bigint generated by default as identity, birthday date, email varchar(255), firstname varchar(255), lastname varchar(255), login varchar(255), password varchar(255), role_id bigint, primary key (id))
2022-02-15 15:55:04  [ main:1134 ] - [ DEBUG ]  alter table USERS_DB add constraint FK1wn5f4npo3veii76yo6ldueg9 foreign key (role_id) references ROLES_DB
2022-02-15 15:55:04  [ main:1143 ] - [ DEBUG ]  Checking 0 named HQL queries
2022-02-15 15:55:04  [ main:1143 ] - [ DEBUG ]  Checking 0 named SQL queries
2022-02-15 15:55:04  [ main:1145 ] - [ DEBUG ]  EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2022-02-15 15:55:04  [ main:1147 ] - [ DEBUG ]  Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@5562c2c9
2022-02-15 15:55:04  [ main:1148 ] - [ DEBUG ]  Registering SessionFactory: fcce3e5b-e834-426a-9379-dd54091b5f4b (<unnamed>)
2022-02-15 15:55:04  [ main:1148 ] - [ DEBUG ]  Not binding SessionFactory to JNDI, no JNDI name configured
2022-02-15 15:55:04  [ main:1148 ] - [ DEBUG ]  Finish method
2022-02-15 15:55:04  [ main:1152 ] - [ DEBUG ]  creating executor instance default
2022-02-15 15:55:04  [ main:1161 ] - [ DEBUG ]  Database connection info: 
	database product name=H2
	database version=1.4.200 (2019-10-14)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.200 (2019-10-14)
	jdbc driver major version=1
	jdbc driver minor version=4

2022-02-15 15:55:04  [ main:1162 ] - [ DEBUG ]  validateSchema(validateStrict=false) - start
2022-02-15 15:55:04  [ main:1162 ] - [ DEBUG ]  Schema is null. Nothing to validate.
2022-02-15 15:55:04  [ main:1162 ] - [ INFO ]  The property ending with 'schema' was not found. Please notify a dbunit developer to add the property to the class org.dbunit.database.DatabaseConfig
2022-02-15 15:55:04  [ main:1162 ] - [ INFO ]  The property ending with 'replacers' was not found. Please notify a dbunit developer to add the property to the class org.dbunit.database.DatabaseConfig
2022-02-15 15:55:04  [ main:1163 ] - [ INFO ]  DBUnit configuration for dataset executor 'default':cacheConnection: true
cacheTableNames: true
caseInsensitiveStrategy: UPPERCASE
columnSensing: false
leakHunter: false
mergeDataSets: false
mergingStrategy: METHOD
disableSequenceFiltering: false
alwaysCleanBefore: false
alwaysCleanAfter: false
raiseExceptionOnCleanUp: false
disablePKCheckFor: com.github.database.rider.core.configuration.DBUnitConfig@6b78273c
schema: 
tableType: [TABLE]
allowEmptyFields: false
fetchSize: 100
qualifiedTableNames: false
batchSize: 100
batchedStatements: false
caseSensitiveTableNames: false
replacers: [com.github.database.rider.core.replacers.DateTimeReplacer@2740e316, com.github.database.rider.core.replacers.UnixTimestampReplacer@5b5a4aed, com.github.database.rider.core.replacers.NullReplacer@2c991465]

2022-02-15 15:55:04  [ main:1175 ] - [ WARN ]  Database will not be populated because no dataset has been provided.
2022-02-15 15:55:04  [ main:1175 ] - [ DEBUG ]  Start method
2022-02-15 15:55:04  [ main:1203 ] - [ DEBUG ]  Statistics initialized [enabled=false]
2022-02-15 15:55:04  [ main:1223 ] - [ DEBUG ]  SELECT * FROM ROLES_DB
2022-02-15 15:55:04  [ main:1224 ] - [ DEBUG ]  Result set row: 0
2022-02-15 15:55:04  [ main:1226 ] - [ DEBUG ]  Result row: EntityKey[Role#1]
2022-02-15 15:55:04  [ main:1228 ] - [ DEBUG ]  Result set row: 1
2022-02-15 15:55:04  [ main:1228 ] - [ DEBUG ]  Result row: EntityKey[Role#2]
2022-02-15 15:55:04  [ main:1229 ] - [ DEBUG ]  Resolving attributes for [Role#1]
2022-02-15 15:55:04  [ main:1230 ] - [ DEBUG ]  Processing attribute `name` : value = Admin
2022-02-15 15:55:04  [ main:1230 ] - [ DEBUG ]  Attribute (`name`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:04  [ main:1230 ] - [ DEBUG ]  Processing attribute `users` : value = NOT NULL COLLECTION
2022-02-15 15:55:04  [ main:1230 ] - [ DEBUG ]  Attribute (`users`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:04  [ main:1234 ] - [ DEBUG ]  Done materializing entity [Role#1]
2022-02-15 15:55:04  [ main:1234 ] - [ DEBUG ]  Resolving attributes for [Role#2]
2022-02-15 15:55:04  [ main:1234 ] - [ DEBUG ]  Processing attribute `name` : value = user
2022-02-15 15:55:04  [ main:1234 ] - [ DEBUG ]  Attribute (`name`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:04  [ main:1234 ] - [ DEBUG ]  Processing attribute `users` : value = NOT NULL COLLECTION
2022-02-15 15:55:04  [ main:1234 ] - [ DEBUG ]  Attribute (`users`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:04  [ main:1234 ] - [ DEBUG ]  Done materializing entity [Role#2]
2022-02-15 15:55:04  [ main:1237 ] - [ DEBUG ]  Initiating JDBC connection release from afterTransaction
2022-02-15 15:55:04  [ main:1237 ] - [ DEBUG ]  createDataSet() - start
2022-02-15 15:55:04  [ main:1239 ] - [ DEBUG ]  Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:04  [ main:1239 ] - [ DEBUG ]  Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:04  [ main:1241 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1241 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1241 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1241 ] - [ DEBUG ]  setConsumer(consumer) - start
2022-02-15 15:55:04  [ main:1241 ] - [ DEBUG ]  produce() - start
2022-02-15 15:55:04  [ main:1245 ] - [ DEBUG ]  setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@20999517, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@6ec63f8) - start
2022-02-15 15:55:04  [ main:1245 ] - [ DEBUG ]  setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@20999517, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@6ec63f8) - start
2022-02-15 15:55:04  [ main:1246 ] - [ DEBUG ]  startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@40bb4f87) - start
2022-02-15 15:55:04  [ main:1247 ] - [ DEBUG ]  startDataSet() - start
2022-02-15 15:55:04  [ main:1247 ] - [ DEBUG ]  startElement(uri=, localName=, qName=ROLES_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@40bb4f87) - start
2022-02-15 15:55:04  [ main:1247 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1247 ] - [ DEBUG ]  isLastTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1247 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1247 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1247 ] - [ DEBUG ]  createTableMetaData(tableName=ROLES_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@40bb4f87) - start
2022-02-15 15:55:04  [ main:1254 ] - [ DEBUG ]  getColumns(columnNames=[], columns=[(NAME, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:04  [ main:1255 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=tableName=ROLES_DB, columns=[(NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:04  [ main:1255 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1255 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1255 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1255 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1255 ] - [ DEBUG ]  startTable(metaData=tableName=ROLES_DB, columns=[(NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:04  [ main:1255 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  row(values=Admin) - start
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  addRow(values=Admin) - start
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  endElement(uri=, localName=, qName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  startElement(uri=, localName=, qName=ROLES_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@40bb4f87) - start
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  isLastTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1256 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  row(values=user) - start
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  addRow(values=user) - start
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  endElement(uri=, localName=, qName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  endElement(uri=, localName=, qName=dataset) - start
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  endTable() - start
2022-02-15 15:55:04  [ main:1257 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1258 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1258 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLES_DB, columns=[(NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
2022-02-15 15:55:04  [ main:1258 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1258 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1258 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1258 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1258 ] - [ DEBUG ]  endDataSet() - start
2022-02-15 15:55:04  [ main:1258 ] - [ DEBUG ]  endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLES_DB], _tableMap={ROLES_DB=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLES_DB, columns=[(NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
2022-02-15 15:55:04  [ main:1258 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:04  [ main:1259 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:04  [ main:1259 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1259 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1259 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1259 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1259 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@59edb4f5, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@59edb4f5) - start
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@59edb4f5, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@59edb4f5) - start
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1262 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1263 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1263 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1263 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1263 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1263 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1263 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1264 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YESTERDAY], replacementSubstring=2022-02-14 15:55:04) - start
2022-02-15 15:55:04  [ main:1264 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,TOMORROW], replacementSubstring=2022-02-16 15:55:04) - start
2022-02-15 15:55:04  [ main:1264 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_AFTER], replacementSubstring=2022-02-22 15:55:04) - start
2022-02-15 15:55:04  [ main:1264 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_BEFORE], replacementSubstring=2022-02-08 15:55:04) - start
2022-02-15 15:55:04  [ main:1264 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_AFTER], replacementSubstring=2022-03-17 15:55:04) - start
2022-02-15 15:55:04  [ main:1264 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_BEFORE], replacementSubstring=2022-01-16 15:55:04) - start
2022-02-15 15:55:04  [ main:1264 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_BEFORE], replacementSubstring=2021-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1264 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_AFTER], replacementSubstring=2023-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1265 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1265 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_ONE], replacementSubstring=2022-02-15 16:55:04) - start
2022-02-15 15:55:04  [ main:1265 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_ONE], replacementSubstring=2022-02-15 14:55:04) - start
2022-02-15 15:55:04  [ main:1265 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_TEN], replacementSubstring=2022-02-16 01:55:04) - start
2022-02-15 15:55:04  [ main:1265 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_TEN], replacementSubstring=2022-02-15 05:55:04) - start
2022-02-15 15:55:04  [ main:1266 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1266 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_ONE], replacementSubstring=2022-02-15 15:56:04) - start
2022-02-15 15:55:04  [ main:1266 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_ONE], replacementSubstring=2022-02-15 15:54:04) - start
2022-02-15 15:55:04  [ main:1266 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_TEN], replacementSubstring=2022-02-15 16:05:04) - start
2022-02-15 15:55:04  [ main:1266 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_TEN], replacementSubstring=2022-02-15 15:45:04) - start
2022-02-15 15:55:04  [ main:1266 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_30], replacementSubstring=2022-02-15 16:25:04) - start
2022-02-15 15:55:04  [ main:1266 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_30], replacementSubstring=2022-02-15 15:25:04) - start
2022-02-15 15:55:04  [ main:1267 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1267 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_ONE], replacementSubstring=2022-02-15 15:55:05) - start
2022-02-15 15:55:04  [ main:1267 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_ONE], replacementSubstring=2022-02-15 15:55:03) - start
2022-02-15 15:55:04  [ main:1267 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_TEN], replacementSubstring=2022-02-15 15:55:14) - start
2022-02-15 15:55:04  [ main:1267 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_TEN], replacementSubstring=2022-02-15 15:54:54) - start
2022-02-15 15:55:04  [ main:1267 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_30], replacementSubstring=2022-02-15 15:55:34) - start
2022-02-15 15:55:04  [ main:1267 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_30], replacementSubstring=2022-02-15 15:54:34) - start
2022-02-15 15:55:04  [ main:1267 ] - [ DEBUG ]  addReplacementObject(originalObject=[UNIX_TIMESTAMP], replacementObject=1644933304) - start
2022-02-15 15:55:04  [ main:1267 ] - [ DEBUG ]  addReplacementObject(originalObject=[null], replacementObject=null) - start
2022-02-15 15:55:04  [ main:1267 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:04  [ main:1267 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:04  [ main:1268 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1268 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1268 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:04  [ main:1268 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@59edb4f5) - start
2022-02-15 15:55:04  [ main:1268 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1268 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1268 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1268 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1268 ] - [ DEBUG ]  getTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1268 ] - [ DEBUG ]  getTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1268 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1268 ] - [ DEBUG ]  The table name map has already been initialized.
2022-02-15 15:55:04  [ main:1268 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1268 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1268 ] - [ DEBUG ]  createReplacementTable(table=com.github.database.rider.core.api.dataset.ScriptableTable@59edb4f5) - start
2022-02-15 15:55:04  [ main:1269 ] - [ DEBUG ]  setStrictReplacement(strictReplacement=false) - start
2022-02-15 15:55:04  [ main:1269 ] - [ DEBUG ]  getTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1269 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1269 ] - [ DEBUG ]  Initializing the data set from the database...
2022-02-15 15:55:04  [ main:1270 ] - [ DEBUG ]  
	database product name=H2
	database version=1.4.200 (2019-10-14)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.200 (2019-10-14)
	jdbc driver major version=1
	jdbc driver minor version=4

2022-02-15 15:55:04  [ main:1270 ] - [ DEBUG ]  metadata resultset=rs8: org.h2.result.LocalResultImpl@76e90da5 columns: 11 rows: 2 pos: -1
2022-02-15 15:55:04  [ main:1270 ] - [ DEBUG ]  getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@4e3e11b9, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@67cffead, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.ext.h2.H2DataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@214beff9], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ff15a50, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@217c23ce, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null, http://www.dbunit.org/properties/allowVerifytabledefinitionExpectedtableCountMismatch=false}]) - start
2022-02-15 15:55:04  [ main:1270 ] - [ DEBUG ]  Qualified table names feature is disabled. Returning plain table name
2022-02-15 15:55:04  [ main:1270 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ROLES_DB, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1270 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=null) - start
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@4e3e11b9, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@67cffead, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.ext.h2.H2DataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@214beff9], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ff15a50, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@217c23ce, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null, http://www.dbunit.org/properties/allowVerifytabledefinitionExpectedtableCountMismatch=false}]) - start
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  Qualified table names feature is disabled. Returning plain table name
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=USERS_DB, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  add(tableName=USERS_DB, object=null) - start
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  getTableMetaData(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1271 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1272 ] - [ DEBUG ]  isEscaped returns 'false' for tableName=ROLES_DB (dbIdentifierQuoteString=")
2022-02-15 15:55:04  [ main:1272 ] - [ DEBUG ]  Validating if table 'ROLES_DB' exists in schema 'null' ...
2022-02-15 15:55:04  [ main:1277 ] - [ DEBUG ]  close(resultSet=rs9: org.h2.result.LocalResultImpl@6cbe68e9 columns: 11 rows: 1 pos: 0) - start
2022-02-15 15:55:04  [ main:1278 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1296 ] - [ DEBUG ]  The current database 'H2' fits to the configured data type factory 'org.dbunit.ext.h2.H2DataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@214beff9]'. Validation successful.
2022-02-15 15:55:04  [ main:1296 ] - [ DEBUG ]  Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TESTDB1 schema: null<=>PUBLIC table: ROLES_DB<=>ROLES_DB column: null<=>ID
2022-02-15 15:55:04  [ main:1296 ] - [ DEBUG ]  createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLES_DB, columnName=ID) - start
2022-02-15 15:55:04  [ main:1296 ] - [ DEBUG ]  createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
2022-02-15 15:55:04  [ main:1296 ] - [ DEBUG ]  createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
2022-02-15 15:55:04  [ main:1296 ] - [ DEBUG ]  forSqlType(sqlType=-5) - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  nullableValue(nullable=0) - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  autoIncrementValue(isAutoIncrement=YES) - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TESTDB1 schema: null<=>PUBLIC table: ROLES_DB<=>ROLES_DB column: null<=>NAME
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLES_DB, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  forSqlType(sqlType=12) - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:04  [ main:1297 ] - [ DEBUG ]  nullableValue(nullable=1) - start
2022-02-15 15:55:04  [ main:1298 ] - [ DEBUG ]  autoIncrementValue(isAutoIncrement=NO) - start
2022-02-15 15:55:04  [ main:1298 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1298 ] - [ DEBUG ]  getPrimaryKeyNames() - start
2022-02-15 15:55:04  [ main:1300 ] - [ DEBUG ]  getName() - start
2022-02-15 15:55:04  [ main:1300 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1300 ] - [ DEBUG ]  getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
2022-02-15 15:55:04  [ main:1300 ] - [ DEBUG ]  getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
2022-02-15 15:55:04  [ main:1300 ] - [ DEBUG ]  update(tableName=ROLES_DB, object=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)]) - start
2022-02-15 15:55:04  [ main:1300 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1300 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1300 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1301 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1301 ] - [ DEBUG ]  Statement fetch size set to 100
2022-02-15 15:55:04  [ main:1301 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1301 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1301 ] - [ DEBUG ]  getSelectStatement(schema=null, metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], escapePattern=null) - start
2022-02-15 15:55:04  [ main:1301 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1301 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1302 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1302 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1302 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1302 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1302 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1302 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ROLES_DB, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1302 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1302 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1302 ] - [ DEBUG ]  Query: select ID, NAME from ROLES_DB order by ID
2022-02-15 15:55:04  [ main:1302 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)]], _resultSet=[rs12: org.h2.result.LocalResultImpl@554188ac columns: 2 rows: 2 pos: -1], _statement=[stat8]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs12: org.h2.result.LocalResultImpl@554188ac columns: 2 rows: 2 pos: 0) - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs12: org.h2.result.LocalResultImpl@554188ac columns: 2 rows: 2 pos: 0) - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1303 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1304 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1304 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs12: org.h2.result.LocalResultImpl@554188ac columns: 2 rows: 2 pos: 1) - start
2022-02-15 15:55:04  [ main:1304 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1304 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1304 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1304 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1304 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs12: org.h2.result.LocalResultImpl@554188ac columns: 2 rows: 2 pos: 1) - start
2022-02-15 15:55:04  [ main:1304 ] - [ DEBUG ]  getValue(row=2, columnName=ID) - start
2022-02-15 15:55:04  [ main:1305 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1305 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1305 ] - [ DEBUG ]  includedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], columns=[(NAME, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:04  [ main:1305 ] - [ DEBUG ]  includeColumns(columns=(NAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1305 ] - [ DEBUG ]  addPattern(patternName=NAME) - start
2022-02-15 15:55:04  [ main:1305 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1306 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[NAME], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1306 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1306 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1306 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1306 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(NAME, VARCHAR, nullable)) - start
2022-02-15 15:55:04  [ main:1306 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1306 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1306 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1306 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1306 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[NAME], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1306 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1306 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1306 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1308 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1308 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1308 ] - [ DEBUG ]  assertEqualsIgnoreCols(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@59edb4f5, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], ignoreCols=[]) - start
2022-02-15 15:55:04  [ main:1308 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@59edb4f5, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], columnNames=[]) - start
2022-02-15 15:55:04  [ main:1308 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:04  [ main:1308 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:04  [ main:1308 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(NAME, UNKNOWN, nullableUnknown)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1308 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(NAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1308 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1309 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1309 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1309 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1309 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1309 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], columnNames=[]) - start
2022-02-15 15:55:04  [ main:1309 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:04  [ main:1309 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:04  [ main:1309 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1309 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(NAME, VARCHAR, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1309 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(NAME, VARCHAR, nullable)) - start
2022-02-15 15:55:04  [ main:1309 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1309 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1309 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1309 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1310 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1310 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@59edb4f5, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2]) - start
2022-02-15 15:55:04  [ main:1310 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1310 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1310 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@59edb4f5, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], additionalColumnInfo=null) - start
2022-02-15 15:55:04  [ main:1311 ] - [ DEBUG ]  assertWithValueComparer: expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@59edb4f5, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null]
2022-02-15 15:55:04  [ main:1312 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1312 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1312 ] - [ DEBUG ]  assertWithValueComparer: actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2]
2022-02-15 15:55:04  [ main:1312 ] - [ DEBUG ]  assertWithValueComparer: failureHandler=null
2022-02-15 15:55:04  [ main:1312 ] - [ DEBUG ]  assertWithValueComparer: defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer
2022-02-15 15:55:04  [ main:1312 ] - [ DEBUG ]  assertWithValueComparer: columnValueComparers=null
2022-02-15 15:55:04  [ main:1312 ] - [ DEBUG ]  FailureHandler is null. Using default implementation
2022-02-15 15:55:04  [ main:1313 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1313 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1313 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1313 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1313 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1313 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@53f0d09c) - start
2022-02-15 15:55:04  [ main:1313 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@47acd13b) - start
2022-02-15 15:55:04  [ main:1313 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@53f0d09c, columnsToSearch=[(NAME, VARCHAR, nullable)])
2022-02-15 15:55:04  [ main:1313 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1313 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@47acd13b, columnsToSearch=[(NAME, UNKNOWN, nullableUnknown)])
2022-02-15 15:55:04  [ main:1313 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1314 ] - [ DEBUG ]  getComparisonDataType(tableName=ROLES_DB, expectedColumn=(NAME, UNKNOWN, nullableUnknown), actualColumn=(NAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1314 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1314 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1314 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@59edb4f5, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@236eccd1], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null], defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer, columnValueComparers=null) - start
2022-02-15 15:55:04  [ main:1314 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1314 ] - [ DEBUG ]  determineValidColumnValueComparers: using getDefaultValueComparerMap()={} as columnValueComparers=null for tableName=ROLES_DB
2022-02-15 15:55:04  [ main:1314 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1314 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1314 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1314 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@59edb4f5, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@236eccd1], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1314 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1314 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1314 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1314 ] - [ DEBUG ]  getValue(row=0, column=NAME) - start
2022-02-15 15:55:04  [ main:1314 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1314 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  getValue(row=0, column=NAME) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  compare(o1=Admin, o2=Admin) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  getValue(row=1, column=NAME) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1315 ] - [ DEBUG ]  getValue(row=1, column=NAME) - start
2022-02-15 15:55:04  [ main:1316 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:04  [ main:1316 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:04  [ main:1316 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1316 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1316 ] - [ DEBUG ]  compare(o1=user, o2=user) - start
2022-02-15 15:55:04  [ main:1316 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1316 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1316 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1316 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1316 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@59edb4f5, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@236eccd1], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1316 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1316 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1316 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1316 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1319 ] - [ DEBUG ]  Start method
2022-02-15 15:55:04  [ main:1326 ] - [ WARN ]  Database will not be populated because no dataset has been provided.
2022-02-15 15:55:04  [ main:1326 ] - [ DEBUG ]  Start method
2022-02-15 15:55:04  [ main:1327 ] - [ DEBUG ]  On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-02-15 15:55:04  [ main:1327 ] - [ DEBUG ]  begin
2022-02-15 15:55:04  [ main:1332 ] - [ DEBUG ]  committing
2022-02-15 15:55:04  [ main:1333 ] - [ DEBUG ]  Processing flush-time cascades
2022-02-15 15:55:04  [ main:1333 ] - [ DEBUG ]  Dirty checking collections
2022-02-15 15:55:04  [ main:1337 ] - [ DEBUG ]  Flushed: 0 insertions, 1 updates, 0 deletions to 1 objects
2022-02-15 15:55:04  [ main:1338 ] - [ DEBUG ]  Flushed: 0 (re)creations, 0 updates, 1 removals to 0 collections
2022-02-15 15:55:04  [ main:1338 ] - [ DEBUG ]  Listing entities:
2022-02-15 15:55:04  [ main:1338 ] - [ DEBUG ]  Role{name=guest, id=2, users=null}
2022-02-15 15:55:04  [ main:1341 ] - [ DEBUG ]  update ROLES_DB set name=? where id=?
2022-02-15 15:55:04  [ main:1345 ] - [ DEBUG ]  Initiating JDBC connection release from afterTransaction
2022-02-15 15:55:04  [ main:1346 ] - [ DEBUG ]  Initiating JDBC connection release from afterTransaction
2022-02-15 15:55:04  [ main:1346 ] - [ DEBUG ]  HHH000420: Closing un-released batch
2022-02-15 15:55:04  [ main:1346 ] - [ DEBUG ]  createDataSet() - start
2022-02-15 15:55:04  [ main:1346 ] - [ DEBUG ]  Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:04  [ main:1346 ] - [ DEBUG ]  Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:04  [ main:1346 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1346 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1346 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1347 ] - [ DEBUG ]  setConsumer(consumer) - start
2022-02-15 15:55:04  [ main:1347 ] - [ DEBUG ]  produce() - start
2022-02-15 15:55:04  [ main:1347 ] - [ DEBUG ]  setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@67bb4dcd, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@738d37fc) - start
2022-02-15 15:55:04  [ main:1347 ] - [ DEBUG ]  setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@67bb4dcd, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@738d37fc) - start
2022-02-15 15:55:04  [ main:1347 ] - [ DEBUG ]  startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@6fa2448b) - start
2022-02-15 15:55:04  [ main:1347 ] - [ DEBUG ]  startDataSet() - start
2022-02-15 15:55:04  [ main:1347 ] - [ DEBUG ]  startElement(uri=, localName=, qName=ROLES_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@6fa2448b) - start
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  isLastTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  createTableMetaData(tableName=ROLES_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@6fa2448b) - start
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  startTable(metaData=tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1348 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  row(values=1) - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  addRow(values=1) - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  endElement(uri=, localName=, qName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  startElement(uri=, localName=, qName=ROLES_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@6fa2448b) - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  isLastTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1349 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  row(values=2) - start
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  addRow(values=2) - start
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  endElement(uri=, localName=, qName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  endElement(uri=, localName=, qName=dataset) - start
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  endTable() - start
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  endDataSet() - start
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLES_DB], _tableMap={ROLES_DB=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
2022-02-15 15:55:04  [ main:1350 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@46fb0c33, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@46fb0c33) - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@46fb0c33, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@46fb0c33) - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1351 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1352 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1352 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1352 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1352 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1352 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YESTERDAY], replacementSubstring=2022-02-14 15:55:04) - start
2022-02-15 15:55:04  [ main:1352 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,TOMORROW], replacementSubstring=2022-02-16 15:55:04) - start
2022-02-15 15:55:04  [ main:1352 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_AFTER], replacementSubstring=2022-02-22 15:55:04) - start
2022-02-15 15:55:04  [ main:1352 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_BEFORE], replacementSubstring=2022-02-08 15:55:04) - start
2022-02-15 15:55:04  [ main:1352 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_AFTER], replacementSubstring=2022-03-17 15:55:04) - start
2022-02-15 15:55:04  [ main:1352 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_BEFORE], replacementSubstring=2022-01-16 15:55:04) - start
2022-02-15 15:55:04  [ main:1353 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_BEFORE], replacementSubstring=2021-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1353 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_AFTER], replacementSubstring=2023-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1353 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1353 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_ONE], replacementSubstring=2022-02-15 16:55:04) - start
2022-02-15 15:55:04  [ main:1353 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_ONE], replacementSubstring=2022-02-15 14:55:04) - start
2022-02-15 15:55:04  [ main:1353 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_TEN], replacementSubstring=2022-02-16 01:55:04) - start
2022-02-15 15:55:04  [ main:1353 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_TEN], replacementSubstring=2022-02-15 05:55:04) - start
2022-02-15 15:55:04  [ main:1353 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1353 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_ONE], replacementSubstring=2022-02-15 15:56:04) - start
2022-02-15 15:55:04  [ main:1353 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_ONE], replacementSubstring=2022-02-15 15:54:04) - start
2022-02-15 15:55:04  [ main:1354 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_TEN], replacementSubstring=2022-02-15 16:05:04) - start
2022-02-15 15:55:04  [ main:1354 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_TEN], replacementSubstring=2022-02-15 15:45:04) - start
2022-02-15 15:55:04  [ main:1354 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_30], replacementSubstring=2022-02-15 16:25:04) - start
2022-02-15 15:55:04  [ main:1354 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_30], replacementSubstring=2022-02-15 15:25:04) - start
2022-02-15 15:55:04  [ main:1354 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1354 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_ONE], replacementSubstring=2022-02-15 15:55:05) - start
2022-02-15 15:55:04  [ main:1354 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_ONE], replacementSubstring=2022-02-15 15:55:03) - start
2022-02-15 15:55:04  [ main:1354 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_TEN], replacementSubstring=2022-02-15 15:55:14) - start
2022-02-15 15:55:04  [ main:1354 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_TEN], replacementSubstring=2022-02-15 15:54:54) - start
2022-02-15 15:55:04  [ main:1354 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_30], replacementSubstring=2022-02-15 15:55:34) - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_30], replacementSubstring=2022-02-15 15:54:34) - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  addReplacementObject(originalObject=[UNIX_TIMESTAMP], replacementObject=1644933304) - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  addReplacementObject(originalObject=[null], replacementObject=null) - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@46fb0c33) - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  getTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  getTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  The table name map has already been initialized.
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  createReplacementTable(table=com.github.database.rider.core.api.dataset.ScriptableTable@46fb0c33) - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  setStrictReplacement(strictReplacement=false) - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  getTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  getTableMetaData(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1355 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1356 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1356 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1356 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1356 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1356 ] - [ DEBUG ]  Statement fetch size set to 100
2022-02-15 15:55:04  [ main:1356 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1356 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1356 ] - [ DEBUG ]  getSelectStatement(schema=null, metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], escapePattern=null) - start
2022-02-15 15:55:04  [ main:1356 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1356 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1356 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1356 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1356 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1356 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1356 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1356 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ROLES_DB, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1357 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1357 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1357 ] - [ DEBUG ]  Query: select ID, NAME from ROLES_DB order by ID
2022-02-15 15:55:04  [ main:1357 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1357 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1357 ] - [ DEBUG ]  addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)]], _resultSet=[rs13: org.h2.result.LocalResultImpl@3b009e7b columns: 2 rows: 2 pos: -1], _statement=[stat20]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
2022-02-15 15:55:04  [ main:1357 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1358 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1358 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1358 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1358 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1358 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs13: org.h2.result.LocalResultImpl@3b009e7b columns: 2 rows: 2 pos: 0) - start
2022-02-15 15:55:04  [ main:1358 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1358 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1358 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1358 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1358 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs13: org.h2.result.LocalResultImpl@3b009e7b columns: 2 rows: 2 pos: 0) - start
2022-02-15 15:55:04  [ main:1358 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1358 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1358 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1358 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1358 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs13: org.h2.result.LocalResultImpl@3b009e7b columns: 2 rows: 2 pos: 1) - start
2022-02-15 15:55:04  [ main:1359 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1359 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1359 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1359 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1359 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs13: org.h2.result.LocalResultImpl@3b009e7b columns: 2 rows: 2 pos: 1) - start
2022-02-15 15:55:04  [ main:1359 ] - [ DEBUG ]  getValue(row=2, columnName=ID) - start
2022-02-15 15:55:04  [ main:1359 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1359 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1359 ] - [ DEBUG ]  includedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:04  [ main:1359 ] - [ DEBUG ]  includeColumns(columns=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1359 ] - [ DEBUG ]  addPattern(patternName=ID) - start
2022-02-15 15:55:04  [ main:1359 ] - [ DEBUG ]  addPattern(patternName=NAME) - start
2022-02-15 15:55:04  [ main:1359 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1359 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID, NAME], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1359 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1360 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1360 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1360 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1360 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(NAME, VARCHAR, nullable)) - start
2022-02-15 15:55:04  [ main:1360 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1360 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1360 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1360 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1360 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID, NAME], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1360 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1360 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1360 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1360 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1360 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1360 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  assertEqualsIgnoreCols(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@46fb0c33, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], ignoreCols=[]) - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@46fb0c33, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], columnNames=[]) - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(NAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], columnNames=[]) - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1361 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(NAME, VARCHAR, nullable)) - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@46fb0c33, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2]) - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@46fb0c33, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], additionalColumnInfo=null) - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  assertWithValueComparer: expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@46fb0c33, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null]
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  assertWithValueComparer: actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2]
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  assertWithValueComparer: failureHandler=null
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  assertWithValueComparer: defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  assertWithValueComparer: columnValueComparers=null
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  FailureHandler is null. Using default implementation
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1362 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@603cabc4) - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  compare(o1=(NAME, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@67fa5045) - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  compare(o1=(NAME, VARCHAR, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@603cabc4, columnsToSearch=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)])
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@67fa5045, columnsToSearch=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)])
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  getComparisonDataType(tableName=ROLES_DB, expectedColumn=(ID, UNKNOWN, nullableUnknown), actualColumn=(ID, BIGINT, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  getComparisonDataType(tableName=ROLES_DB, expectedColumn=(NAME, UNKNOWN, nullableUnknown), actualColumn=(NAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@46fb0c33, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@69de5bed, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@750f64fe], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null], defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer, columnValueComparers=null) - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  determineValidColumnValueComparers: using getDefaultValueComparerMap()={} as columnValueComparers=null for tableName=ROLES_DB
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1363 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@46fb0c33, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@69de5bed, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@750f64fe], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  getValue(row=0, column=ID) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  getValue(row=0, column=ID) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  compare(o1=1, o2=1) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  compareNonNulls(value1=1, value2=1) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1364 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getValue(row=0, column=NAME) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getValue(row=0, column=NAME) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  compare(o1=Admin, o2=Admin) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getValue(row=1, column=ID) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  getValue(row=1, column=ID) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:04  [ main:1365 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  compare(o1=2, o2=2) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  compareNonNulls(value1=2, value2=2) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  getValue(row=1, column=NAME) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  getValue(row=1, column=NAME) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  compare(o1=guest, o2=guest) - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1366 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@46fb0c33, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@69de5bed, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@750f64fe], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@46fb0c33, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@69de5bed, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@750f64fe], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@46fb0c33, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@69de5bed, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@750f64fe], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1367 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1369 ] - [ DEBUG ]  Start method
2022-02-15 15:55:04  [ main:1377 ] - [ WARN ]  Database will not be populated because no dataset has been provided.
2022-02-15 15:55:04  [ main:1377 ] - [ DEBUG ]  Start method
2022-02-15 15:55:04  [ main:1377 ] - [ DEBUG ]  On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-02-15 15:55:04  [ main:1377 ] - [ DEBUG ]  begin
2022-02-15 15:55:04  [ main:1379 ] - [ DEBUG ]  committing
2022-02-15 15:55:04  [ main:1379 ] - [ DEBUG ]  Processing flush-time cascades
2022-02-15 15:55:04  [ main:1380 ] - [ DEBUG ]  Dirty checking collections
2022-02-15 15:55:04  [ main:1380 ] - [ DEBUG ]  Flushed: 0 insertions, 0 updates, 1 deletions to 1 objects
2022-02-15 15:55:04  [ main:1380 ] - [ DEBUG ]  Flushed: 0 (re)creations, 0 updates, 1 removals to 0 collections
2022-02-15 15:55:04  [ main:1380 ] - [ DEBUG ]  Listing entities:
2022-02-15 15:55:04  [ main:1380 ] - [ DEBUG ]  Role{name=null, id=2, users=null}
2022-02-15 15:55:04  [ main:1380 ] - [ DEBUG ]  delete from ROLES_DB where id=?
2022-02-15 15:55:04  [ main:1383 ] - [ DEBUG ]  Initiating JDBC connection release from afterTransaction
2022-02-15 15:55:04  [ main:1383 ] - [ DEBUG ]  Initiating JDBC connection release from afterTransaction
2022-02-15 15:55:04  [ main:1383 ] - [ DEBUG ]  HHH000420: Closing un-released batch
2022-02-15 15:55:04  [ main:1383 ] - [ DEBUG ]  createDataSet() - start
2022-02-15 15:55:04  [ main:1384 ] - [ DEBUG ]  Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:04  [ main:1384 ] - [ DEBUG ]  Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:04  [ main:1384 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1384 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1384 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1384 ] - [ DEBUG ]  setConsumer(consumer) - start
2022-02-15 15:55:04  [ main:1384 ] - [ DEBUG ]  produce() - start
2022-02-15 15:55:04  [ main:1385 ] - [ DEBUG ]  setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@d13baac, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@4c302f38) - start
2022-02-15 15:55:04  [ main:1385 ] - [ DEBUG ]  setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@d13baac, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@4c302f38) - start
2022-02-15 15:55:04  [ main:1385 ] - [ DEBUG ]  startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@75aea2ba) - start
2022-02-15 15:55:04  [ main:1385 ] - [ DEBUG ]  startDataSet() - start
2022-02-15 15:55:04  [ main:1386 ] - [ DEBUG ]  startElement(uri=, localName=, qName=ROLES_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@75aea2ba) - start
2022-02-15 15:55:04  [ main:1386 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1386 ] - [ DEBUG ]  isLastTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1386 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1386 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1386 ] - [ DEBUG ]  createTableMetaData(tableName=ROLES_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@75aea2ba) - start
2022-02-15 15:55:04  [ main:1386 ] - [ DEBUG ]  getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:04  [ main:1386 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:04  [ main:1386 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1386 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1386 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1386 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1387 ] - [ DEBUG ]  startTable(metaData=tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:04  [ main:1387 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1387 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1387 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1387 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1387 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1387 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1387 ] - [ DEBUG ]  row(values=1) - start
2022-02-15 15:55:04  [ main:1387 ] - [ DEBUG ]  addRow(values=1) - start
2022-02-15 15:55:04  [ main:1388 ] - [ DEBUG ]  endElement(uri=, localName=, qName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1388 ] - [ DEBUG ]  endElement(uri=, localName=, qName=dataset) - start
2022-02-15 15:55:04  [ main:1388 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1388 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1388 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1388 ] - [ DEBUG ]  endTable() - start
2022-02-15 15:55:04  [ main:1388 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1388 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1388 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1]) - start
2022-02-15 15:55:04  [ main:1388 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1388 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1388 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1388 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1389 ] - [ DEBUG ]  endDataSet() - start
2022-02-15 15:55:04  [ main:1389 ] - [ DEBUG ]  endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLES_DB], _tableMap={ROLES_DB=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1]}, _caseSensitiveTableNames=false]
2022-02-15 15:55:04  [ main:1389 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:04  [ main:1389 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:04  [ main:1389 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1389 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1389 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1389 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1389 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:04  [ main:1389 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@5ff6dd3c, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:04  [ main:1389 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1389 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1389 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@5ff6dd3c) - start
2022-02-15 15:55:04  [ main:1389 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1389 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@5ff6dd3c, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@5ff6dd3c) - start
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1390 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1391 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1391 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YESTERDAY], replacementSubstring=2022-02-14 15:55:04) - start
2022-02-15 15:55:04  [ main:1391 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,TOMORROW], replacementSubstring=2022-02-16 15:55:04) - start
2022-02-15 15:55:04  [ main:1391 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_AFTER], replacementSubstring=2022-02-22 15:55:04) - start
2022-02-15 15:55:04  [ main:1391 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_BEFORE], replacementSubstring=2022-02-08 15:55:04) - start
2022-02-15 15:55:04  [ main:1391 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_AFTER], replacementSubstring=2022-03-17 15:55:04) - start
2022-02-15 15:55:04  [ main:1391 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_BEFORE], replacementSubstring=2022-01-16 15:55:04) - start
2022-02-15 15:55:04  [ main:1391 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_BEFORE], replacementSubstring=2021-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1391 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_AFTER], replacementSubstring=2023-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1391 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1392 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_ONE], replacementSubstring=2022-02-15 16:55:04) - start
2022-02-15 15:55:04  [ main:1392 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_ONE], replacementSubstring=2022-02-15 14:55:04) - start
2022-02-15 15:55:04  [ main:1392 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_TEN], replacementSubstring=2022-02-16 01:55:04) - start
2022-02-15 15:55:04  [ main:1392 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_TEN], replacementSubstring=2022-02-15 05:55:04) - start
2022-02-15 15:55:04  [ main:1392 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1392 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_ONE], replacementSubstring=2022-02-15 15:56:04) - start
2022-02-15 15:55:04  [ main:1392 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_ONE], replacementSubstring=2022-02-15 15:54:04) - start
2022-02-15 15:55:04  [ main:1392 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_TEN], replacementSubstring=2022-02-15 16:05:04) - start
2022-02-15 15:55:04  [ main:1392 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_TEN], replacementSubstring=2022-02-15 15:45:04) - start
2022-02-15 15:55:04  [ main:1392 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_30], replacementSubstring=2022-02-15 16:25:04) - start
2022-02-15 15:55:04  [ main:1392 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_30], replacementSubstring=2022-02-15 15:25:04) - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_ONE], replacementSubstring=2022-02-15 15:55:05) - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_ONE], replacementSubstring=2022-02-15 15:55:03) - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_TEN], replacementSubstring=2022-02-15 15:55:14) - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_TEN], replacementSubstring=2022-02-15 15:54:54) - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_30], replacementSubstring=2022-02-15 15:55:34) - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_30], replacementSubstring=2022-02-15 15:54:34) - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  addReplacementObject(originalObject=[UNIX_TIMESTAMP], replacementObject=1644933304) - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  addReplacementObject(originalObject=[null], replacementObject=null) - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@5ff6dd3c) - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1393 ] - [ DEBUG ]  getTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  The table name map has already been initialized.
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  createReplacementTable(table=com.github.database.rider.core.api.dataset.ScriptableTable@5ff6dd3c) - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  setStrictReplacement(strictReplacement=false) - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getTableMetaData(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  Statement fetch size set to 100
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getSelectStatement(schema=null, metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], escapePattern=null) - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ROLES_DB, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1394 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  Query: select ID, NAME from ROLES_DB order by ID
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)]], _resultSet=[rs14: org.h2.result.LocalResultImpl@5fcd1f0a columns: 2 rows: 1 pos: -1], _statement=[stat32]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs14: org.h2.result.LocalResultImpl@5fcd1f0a columns: 2 rows: 1 pos: 0) - start
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs14: org.h2.result.LocalResultImpl@5fcd1f0a columns: 2 rows: 1 pos: 0) - start
2022-02-15 15:55:04  [ main:1395 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  includedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  includeColumns(columns=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  addPattern(patternName=ID) - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  addPattern(patternName=NAME) - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID, NAME], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(NAME, VARCHAR, nullable)) - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID, NAME], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1396 ] - [ DEBUG ]  assertEqualsIgnoreCols(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@5ff6dd3c, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], ignoreCols=[]) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@5ff6dd3c, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], columnNames=[]) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(NAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], columnNames=[]) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(NAME, VARCHAR, nullable)) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1397 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@5ff6dd3c, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1]) - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@5ff6dd3c, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], additionalColumnInfo=null) - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  assertWithValueComparer: expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@5ff6dd3c, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null]
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  assertWithValueComparer: actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1]
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  assertWithValueComparer: failureHandler=null
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  assertWithValueComparer: defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  assertWithValueComparer: columnValueComparers=null
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  FailureHandler is null. Using default implementation
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@21ae657b) - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  compare(o1=(NAME, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@799f916e) - start
2022-02-15 15:55:04  [ main:1398 ] - [ DEBUG ]  compare(o1=(NAME, VARCHAR, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@21ae657b, columnsToSearch=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)])
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@799f916e, columnsToSearch=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)])
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  getComparisonDataType(tableName=ROLES_DB, expectedColumn=(ID, UNKNOWN, nullableUnknown), actualColumn=(ID, BIGINT, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  getComparisonDataType(tableName=ROLES_DB, expectedColumn=(NAME, UNKNOWN, nullableUnknown), actualColumn=(NAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@5ff6dd3c, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7698b7a4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a9ceddf], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null], defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer, columnValueComparers=null) - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  determineValidColumnValueComparers: using getDefaultValueComparerMap()={} as columnValueComparers=null for tableName=ROLES_DB
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@5ff6dd3c, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7698b7a4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a9ceddf], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  getValue(row=0, column=ID) - start
2022-02-15 15:55:04  [ main:1399 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  getValue(row=0, column=ID) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  compare(o1=1, o2=1) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  compareNonNulls(value1=1, value2=1) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  getValue(row=0, column=NAME) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  getValue(row=0, column=NAME) - start
2022-02-15 15:55:04  [ main:1400 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1401 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:04  [ main:1401 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1401 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1401 ] - [ DEBUG ]  compare(o1=Admin, o2=Admin) - start
2022-02-15 15:55:04  [ main:1401 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1401 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1401 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1401 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@5ff6dd3c, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7698b7a4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a9ceddf], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1401 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1401 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1401 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1402 ] - [ DEBUG ]  Start method
2022-02-15 15:55:04  [ main:1408 ] - [ WARN ]  Database will not be populated because no dataset has been provided.
2022-02-15 15:55:04  [ main:1408 ] - [ DEBUG ]  Start method
2022-02-15 15:55:04  [ main:1411 ] - [ DEBUG ]  select role0_.id as id1_0_0_, role0_.name as name2_0_0_ from ROLES_DB role0_ where role0_.id=?
2022-02-15 15:55:04  [ main:1414 ] - [ DEBUG ]  On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2022-02-15 15:55:04  [ main:1414 ] - [ DEBUG ]  Resolving attributes for [Role#1]
2022-02-15 15:55:04  [ main:1414 ] - [ DEBUG ]  Processing attribute `name` : value = Admin
2022-02-15 15:55:04  [ main:1414 ] - [ DEBUG ]  Attribute (`name`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:04  [ main:1414 ] - [ DEBUG ]  Processing attribute `users` : value = NOT NULL COLLECTION
2022-02-15 15:55:04  [ main:1414 ] - [ DEBUG ]  Attribute (`users`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:04  [ main:1414 ] - [ DEBUG ]  Done materializing entity [Role#1]
2022-02-15 15:55:04  [ main:1415 ] - [ DEBUG ]  Done entity load : Role#1
2022-02-15 15:55:04  [ main:1415 ] - [ DEBUG ]  Initiating JDBC connection release from afterTransaction
2022-02-15 15:55:04  [ main:1416 ] - [ DEBUG ]  createDataSet() - start
2022-02-15 15:55:04  [ main:1416 ] - [ DEBUG ]  Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:04  [ main:1416 ] - [ DEBUG ]  Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:04  [ main:1416 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1416 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1416 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1416 ] - [ DEBUG ]  setConsumer(consumer) - start
2022-02-15 15:55:04  [ main:1416 ] - [ DEBUG ]  produce() - start
2022-02-15 15:55:04  [ main:1416 ] - [ DEBUG ]  setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@7a1b8a46, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@2921199d) - start
2022-02-15 15:55:04  [ main:1417 ] - [ DEBUG ]  setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@7a1b8a46, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@2921199d) - start
2022-02-15 15:55:04  [ main:1417 ] - [ DEBUG ]  startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@3d40a3b4) - start
2022-02-15 15:55:04  [ main:1417 ] - [ DEBUG ]  startDataSet() - start
2022-02-15 15:55:04  [ main:1417 ] - [ DEBUG ]  startElement(uri=, localName=, qName=ROLES_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@3d40a3b4) - start
2022-02-15 15:55:04  [ main:1417 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1417 ] - [ DEBUG ]  isLastTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1417 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1417 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1417 ] - [ DEBUG ]  createTableMetaData(tableName=ROLES_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@3d40a3b4) - start
2022-02-15 15:55:04  [ main:1417 ] - [ DEBUG ]  getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:04  [ main:1417 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:04  [ main:1417 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1417 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1417 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1417 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1418 ] - [ DEBUG ]  startTable(metaData=tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:04  [ main:1418 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1418 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1418 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1418 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1418 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1418 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1418 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1418 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1418 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1418 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1418 ] - [ DEBUG ]  row(values=1) - start
2022-02-15 15:55:04  [ main:1418 ] - [ DEBUG ]  addRow(values=1) - start
2022-02-15 15:55:04  [ main:1418 ] - [ DEBUG ]  endElement(uri=, localName=, qName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1418 ] - [ DEBUG ]  startElement(uri=, localName=, qName=ROLES_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@3d40a3b4) - start
2022-02-15 15:55:04  [ main:1419 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1419 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1419 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1419 ] - [ DEBUG ]  isLastTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1419 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1419 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1419 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1419 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1419 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1419 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1419 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1419 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1419 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1419 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1419 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1419 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  row(values=2) - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  addRow(values=2) - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  endElement(uri=, localName=, qName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  endElement(uri=, localName=, qName=dataset) - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  endTable() - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  endDataSet() - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLES_DB], _tableMap={ROLES_DB=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1420 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@78307a56, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@78307a56) - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@78307a56, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@78307a56) - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1421 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1422 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1422 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YESTERDAY], replacementSubstring=2022-02-14 15:55:04) - start
2022-02-15 15:55:04  [ main:1422 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,TOMORROW], replacementSubstring=2022-02-16 15:55:04) - start
2022-02-15 15:55:04  [ main:1422 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_AFTER], replacementSubstring=2022-02-22 15:55:04) - start
2022-02-15 15:55:04  [ main:1422 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_BEFORE], replacementSubstring=2022-02-08 15:55:04) - start
2022-02-15 15:55:04  [ main:1422 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_AFTER], replacementSubstring=2022-03-17 15:55:04) - start
2022-02-15 15:55:04  [ main:1422 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_BEFORE], replacementSubstring=2022-01-16 15:55:04) - start
2022-02-15 15:55:04  [ main:1422 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_BEFORE], replacementSubstring=2021-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1422 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_AFTER], replacementSubstring=2023-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1422 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1423 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_ONE], replacementSubstring=2022-02-15 16:55:04) - start
2022-02-15 15:55:04  [ main:1423 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_ONE], replacementSubstring=2022-02-15 14:55:04) - start
2022-02-15 15:55:04  [ main:1423 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_TEN], replacementSubstring=2022-02-16 01:55:04) - start
2022-02-15 15:55:04  [ main:1423 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_TEN], replacementSubstring=2022-02-15 05:55:04) - start
2022-02-15 15:55:04  [ main:1423 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1423 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_ONE], replacementSubstring=2022-02-15 15:56:04) - start
2022-02-15 15:55:04  [ main:1423 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_ONE], replacementSubstring=2022-02-15 15:54:04) - start
2022-02-15 15:55:04  [ main:1423 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_TEN], replacementSubstring=2022-02-15 16:05:04) - start
2022-02-15 15:55:04  [ main:1423 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_TEN], replacementSubstring=2022-02-15 15:45:04) - start
2022-02-15 15:55:04  [ main:1424 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_30], replacementSubstring=2022-02-15 16:25:04) - start
2022-02-15 15:55:04  [ main:1424 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_30], replacementSubstring=2022-02-15 15:25:04) - start
2022-02-15 15:55:04  [ main:1424 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1424 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_ONE], replacementSubstring=2022-02-15 15:55:05) - start
2022-02-15 15:55:04  [ main:1424 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_ONE], replacementSubstring=2022-02-15 15:55:03) - start
2022-02-15 15:55:04  [ main:1424 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_TEN], replacementSubstring=2022-02-15 15:55:14) - start
2022-02-15 15:55:04  [ main:1424 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_TEN], replacementSubstring=2022-02-15 15:54:54) - start
2022-02-15 15:55:04  [ main:1424 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_30], replacementSubstring=2022-02-15 15:55:34) - start
2022-02-15 15:55:04  [ main:1424 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_30], replacementSubstring=2022-02-15 15:54:34) - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  addReplacementObject(originalObject=[UNIX_TIMESTAMP], replacementObject=1644933304) - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  addReplacementObject(originalObject=[null], replacementObject=null) - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@78307a56) - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  getTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  getTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  The table name map has already been initialized.
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  createReplacementTable(table=com.github.database.rider.core.api.dataset.ScriptableTable@78307a56) - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  setStrictReplacement(strictReplacement=false) - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  getTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  getTableMetaData(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1425 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  Statement fetch size set to 100
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  getSelectStatement(schema=null, metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], escapePattern=null) - start
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ROLES_DB, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  Query: select ID, NAME from ROLES_DB order by ID
2022-02-15 15:55:04  [ main:1426 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)]], _resultSet=[rs16: org.h2.result.LocalResultImpl@40d52be7 columns: 2 rows: 2 pos: -1], _statement=[stat44]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs16: org.h2.result.LocalResultImpl@40d52be7 columns: 2 rows: 2 pos: 0) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs16: org.h2.result.LocalResultImpl@40d52be7 columns: 2 rows: 2 pos: 0) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs16: org.h2.result.LocalResultImpl@40d52be7 columns: 2 rows: 2 pos: 1) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs16: org.h2.result.LocalResultImpl@40d52be7 columns: 2 rows: 2 pos: 1) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getValue(row=2, columnName=ID) - start
2022-02-15 15:55:04  [ main:1427 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  includedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  includeColumns(columns=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  addPattern(patternName=ID) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  addPattern(patternName=NAME) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID, NAME], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(NAME, VARCHAR, nullable)) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID, NAME], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  assertEqualsIgnoreCols(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@78307a56, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], ignoreCols=[]) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@78307a56, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], columnNames=[]) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:04  [ main:1428 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(NAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], columnNames=[]) - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(NAME, VARCHAR, nullable)) - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1429 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@78307a56, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2]) - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@78307a56, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], additionalColumnInfo=null) - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  assertWithValueComparer: expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@78307a56, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null]
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  assertWithValueComparer: actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2]
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  assertWithValueComparer: failureHandler=null
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  assertWithValueComparer: defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  assertWithValueComparer: columnValueComparers=null
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  FailureHandler is null. Using default implementation
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@b791a81) - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  compare(o1=(NAME, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@4391a2d8) - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  compare(o1=(NAME, VARCHAR, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1430 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@b791a81, columnsToSearch=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)])
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@4391a2d8, columnsToSearch=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)])
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getComparisonDataType(tableName=ROLES_DB, expectedColumn=(ID, UNKNOWN, nullableUnknown), actualColumn=(ID, BIGINT, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getComparisonDataType(tableName=ROLES_DB, expectedColumn=(NAME, UNKNOWN, nullableUnknown), actualColumn=(NAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@78307a56, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7c40ffef, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@286855ea], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null], defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer, columnValueComparers=null) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  determineValidColumnValueComparers: using getDefaultValueComparerMap()={} as columnValueComparers=null for tableName=ROLES_DB
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@78307a56, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7c40ffef, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@286855ea], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getValue(row=0, column=ID) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1431 ] - [ DEBUG ]  getValue(row=0, column=ID) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  compare(o1=1, o2=1) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  compareNonNulls(value1=1, value2=1) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getValue(row=0, column=NAME) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getValue(row=0, column=NAME) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  compare(o1=Admin, o2=Admin) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getValue(row=1, column=ID) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:04  [ main:1432 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getValue(row=1, column=ID) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  compare(o1=2, o2=2) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  compareNonNulls(value1=2, value2=2) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getValue(row=1, column=NAME) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getValue(row=1, column=NAME) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  compare(o1=user, o2=user) - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1433 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@78307a56, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7c40ffef, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@286855ea], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@78307a56, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7c40ffef, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@286855ea], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@78307a56, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7c40ffef, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@286855ea], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1434 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1435 ] - [ DEBUG ]  Start method
2022-02-15 15:55:04  [ main:1443 ] - [ WARN ]  Database will not be populated because no dataset has been provided.
2022-02-15 15:55:04  [ main:1444 ] - [ DEBUG ]  Start method
2022-02-15 15:55:04  [ main:1444 ] - [ DEBUG ]  On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-02-15 15:55:04  [ main:1444 ] - [ DEBUG ]  begin
2022-02-15 15:55:04  [ main:1447 ] - [ DEBUG ]  Executing identity-insert immediately
2022-02-15 15:55:04  [ main:1447 ] - [ DEBUG ]  insert into ROLES_DB (id, name) values (null, ?)
2022-02-15 15:55:04  [ main:1449 ] - [ DEBUG ]  Natively generated identity: 3
2022-02-15 15:55:04  [ main:1450 ] - [ DEBUG ]  HHH000387: ResultSet's statement was not registered
2022-02-15 15:55:04  [ main:1451 ] - [ DEBUG ]  committing
2022-02-15 15:55:04  [ main:1451 ] - [ DEBUG ]  Processing flush-time cascades
2022-02-15 15:55:04  [ main:1451 ] - [ DEBUG ]  Dirty checking collections
2022-02-15 15:55:04  [ main:1451 ] - [ DEBUG ]  Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2022-02-15 15:55:04  [ main:1451 ] - [ DEBUG ]  Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2022-02-15 15:55:04  [ main:1451 ] - [ DEBUG ]  Listing entities:
2022-02-15 15:55:04  [ main:1452 ] - [ DEBUG ]  Role{name=patient, id=3, users=null}
2022-02-15 15:55:04  [ main:1452 ] - [ DEBUG ]  Initiating JDBC connection release from afterTransaction
2022-02-15 15:55:04  [ main:1452 ] - [ DEBUG ]  Initiating JDBC connection release from afterTransaction
2022-02-15 15:55:04  [ main:1452 ] - [ DEBUG ]  createDataSet() - start
2022-02-15 15:55:04  [ main:1452 ] - [ DEBUG ]  Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:04  [ main:1452 ] - [ DEBUG ]  Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:04  [ main:1452 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1452 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1452 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1453 ] - [ DEBUG ]  setConsumer(consumer) - start
2022-02-15 15:55:04  [ main:1453 ] - [ DEBUG ]  produce() - start
2022-02-15 15:55:04  [ main:1453 ] - [ DEBUG ]  setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@18d11527, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@4998e74b) - start
2022-02-15 15:55:04  [ main:1453 ] - [ DEBUG ]  setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@18d11527, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@4998e74b) - start
2022-02-15 15:55:04  [ main:1453 ] - [ DEBUG ]  startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5d878b25) - start
2022-02-15 15:55:04  [ main:1453 ] - [ DEBUG ]  startDataSet() - start
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  startElement(uri=, localName=, qName=ROLES_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5d878b25) - start
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  isLastTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  createTableMetaData(tableName=ROLES_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5d878b25) - start
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  startTable(metaData=tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1454 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  row(values=1) - start
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  addRow(values=1) - start
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  endElement(uri=, localName=, qName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  startElement(uri=, localName=, qName=ROLES_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5d878b25) - start
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  isLastTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1455 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  row(values=2) - start
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  addRow(values=2) - start
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  endElement(uri=, localName=, qName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  startElement(uri=, localName=, qName=ROLES_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5d878b25) - start
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1456 ] - [ DEBUG ]  isLastTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  row(values=3) - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  addRow(values=3) - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  endElement(uri=, localName=, qName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  endElement(uri=, localName=, qName=dataset) - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1457 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  endTable() - start
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3]) - start
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  endDataSet() - start
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLES_DB], _tableMap={ROLES_DB=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3]}, _caseSensitiveTableNames=false]
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba) - start
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1458 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba) - start
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1459 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YESTERDAY], replacementSubstring=2022-02-14 15:55:04) - start
2022-02-15 15:55:04  [ main:1460 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,TOMORROW], replacementSubstring=2022-02-16 15:55:04) - start
2022-02-15 15:55:04  [ main:1460 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_AFTER], replacementSubstring=2022-02-22 15:55:04) - start
2022-02-15 15:55:04  [ main:1460 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_BEFORE], replacementSubstring=2022-02-08 15:55:04) - start
2022-02-15 15:55:04  [ main:1460 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_AFTER], replacementSubstring=2022-03-17 15:55:04) - start
2022-02-15 15:55:04  [ main:1460 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_BEFORE], replacementSubstring=2022-01-16 15:55:04) - start
2022-02-15 15:55:04  [ main:1460 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_BEFORE], replacementSubstring=2021-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1460 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_AFTER], replacementSubstring=2023-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1460 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1460 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_ONE], replacementSubstring=2022-02-15 16:55:04) - start
2022-02-15 15:55:04  [ main:1460 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_ONE], replacementSubstring=2022-02-15 14:55:04) - start
2022-02-15 15:55:04  [ main:1460 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_TEN], replacementSubstring=2022-02-16 01:55:04) - start
2022-02-15 15:55:04  [ main:1460 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_TEN], replacementSubstring=2022-02-15 05:55:04) - start
2022-02-15 15:55:04  [ main:1460 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1460 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_ONE], replacementSubstring=2022-02-15 15:56:04) - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_ONE], replacementSubstring=2022-02-15 15:54:04) - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_TEN], replacementSubstring=2022-02-15 16:05:04) - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_TEN], replacementSubstring=2022-02-15 15:45:04) - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_30], replacementSubstring=2022-02-15 16:25:04) - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_30], replacementSubstring=2022-02-15 15:25:04) - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,NOW], replacementSubstring=2022-02-15 15:55:04) - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_ONE], replacementSubstring=2022-02-15 15:55:05) - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_ONE], replacementSubstring=2022-02-15 15:55:03) - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_TEN], replacementSubstring=2022-02-15 15:55:14) - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_TEN], replacementSubstring=2022-02-15 15:54:54) - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_30], replacementSubstring=2022-02-15 15:55:34) - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_30], replacementSubstring=2022-02-15 15:54:34) - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  addReplacementObject(originalObject=[UNIX_TIMESTAMP], replacementObject=1644933304) - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  addReplacementObject(originalObject=[null], replacementObject=null) - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:04  [ main:1461 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba) - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  The table name map has already been initialized.
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  createReplacementTable(table=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba) - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  setStrictReplacement(strictReplacement=false) - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getTable(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getTableMetaData(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  Statement fetch size set to 100
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getSelectStatement(schema=null, metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], escapePattern=null) - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1462 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ROLES_DB, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  Query: select ID, NAME from ROLES_DB order by ID
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)]], _resultSet=[rs18: org.h2.result.LocalResultImpl@575cabf0 columns: 2 rows: 3 pos: -1], _statement=[stat56]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs18: org.h2.result.LocalResultImpl@575cabf0 columns: 2 rows: 3 pos: 0) - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs18: org.h2.result.LocalResultImpl@575cabf0 columns: 2 rows: 3 pos: 0) - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1463 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs18: org.h2.result.LocalResultImpl@575cabf0 columns: 2 rows: 3 pos: 1) - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs18: org.h2.result.LocalResultImpl@575cabf0 columns: 2 rows: 3 pos: 1) - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getValue(row=2, columnName=ID) - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs18: org.h2.result.LocalResultImpl@575cabf0 columns: 2 rows: 3 pos: 2) - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getValue(row=2, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs18: org.h2.result.LocalResultImpl@575cabf0 columns: 2 rows: 3 pos: 2) - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getValue(row=3, columnName=ID) - start
2022-02-15 15:55:04  [ main:1464 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  includedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  includeColumns(columns=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  addPattern(patternName=ID) - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  addPattern(patternName=NAME) - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID, NAME], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(NAME, VARCHAR, nullable)) - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID, NAME], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1465 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  assertEqualsIgnoreCols(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], ignoreCols=[]) - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], columnNames=[]) - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(NAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1466 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], columnNames=[]) - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(NAME, VARCHAR, nullable)) - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  accept(name=NAME) - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  getFilteredColumns(tableName=ROLES_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  accept(tableName=ROLES_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1467 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3]) - start
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], additionalColumnInfo=null) - start
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  assertWithValueComparer: expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null]
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  assertWithValueComparer: actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3]
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  assertWithValueComparer: failureHandler=null
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  assertWithValueComparer: defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  assertWithValueComparer: columnValueComparers=null
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  FailureHandler is null. Using default implementation
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@1f992a3a) - start
2022-02-15 15:55:04  [ main:1468 ] - [ DEBUG ]  compare(o1=(NAME, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@30bf26df) - start
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  compare(o1=(NAME, VARCHAR, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@1f992a3a, columnsToSearch=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)])
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@30bf26df, columnsToSearch=[(ID, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)])
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  getComparisonDataType(tableName=ROLES_DB, expectedColumn=(ID, UNKNOWN, nullableUnknown), actualColumn=(ID, BIGINT, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  getComparisonDataType(tableName=ROLES_DB, expectedColumn=(NAME, UNKNOWN, nullableUnknown), actualColumn=(NAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@704067c6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7f4596d0], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null], defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer, columnValueComparers=null) - start
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  determineValidColumnValueComparers: using getDefaultValueComparerMap()={} as columnValueComparers=null for tableName=ROLES_DB
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:04  [ main:1469 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@704067c6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7f4596d0], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  getValue(row=0, column=ID) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  getValue(row=0, column=ID) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  compare(o1=1, o2=1) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:04  [ main:1470 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  compareNonNulls(value1=1, value2=1) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  getValue(row=0, column=NAME) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  getValue(row=0, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  getValue(row=0, column=NAME) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  compare(o1=Admin, o2=Admin) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  getValue(row=1, column=ID) - start
2022-02-15 15:55:04  [ main:1471 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  getValue(row=1, column=ID) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  compare(o1=2, o2=2) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  compareNonNulls(value1=2, value2=2) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  getValue(row=1, column=NAME) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:04  [ main:1472 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  getValue(row=1, columnName=NAME) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  getValue(row=1, column=NAME) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  compare(o1=user, o2=user) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  getValue(row=2, columnName=ID) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  getValue(row=2, columnName=ID) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  getValue(row=2, column=ID) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  getValue(row=2, columnName=ID) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  getValue(row=2, columnName=ID) - start
2022-02-15 15:55:04  [ main:1473 ] - [ DEBUG ]  getValue(row=2, column=ID) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  compare(o1=3, o2=3) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  typeCast(value=3) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  typeCast(value=3) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  compareNonNulls(value1=3, value2=3) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  getValue(row=2, columnName=NAME) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  getValue(row=2, columnName=NAME) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  getValue(row=2, column=NAME) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  getValue(row=2, columnName=NAME) - start
2022-02-15 15:55:05  [ main:1474 ] - [ DEBUG ]  getValue(row=2, columnName=NAME) - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  getValue(row=2, column=NAME) - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  getColumnIndex(columnName=NAME) - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  compare(o1=patient, o2=patient) - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@704067c6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7f4596d0], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:05  [ main:1475 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@704067c6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7f4596d0], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@704067c6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7f4596d0], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@704067c6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7f4596d0], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1476 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1477 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1477 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:05  [ main:1477 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:05  [ main:1477 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@3663d0ba, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933304}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:04, [HOUR,PLUS_TEN]=2022-02-16 01:55:04, [DAY,WEEK_BEFORE]=2022-02-08 15:55:04, [DAY,TOMORROW]=2022-02-16 15:55:04, [MIN,MINUS_TEN]=2022-02-15 15:45:04, [DAY,YEAR_AFTER]=2023-02-15 15:55:04, [MIN,MINUS_30]=2022-02-15 15:25:04, [MIN,PLUS_30]=2022-02-15 16:25:04, [DAY,YEAR_BEFORE]=2021-02-15 15:55:04, [SEC,PLUS_TEN]=2022-02-15 15:55:14, [MIN,MINUS_ONE]=2022-02-15 15:54:04, [HOUR,MINUS_ONE]=2022-02-15 14:55:04, [SEC,MINUS_30]=2022-02-15 15:54:34, [DAY,MONTH_AFTER]=2022-03-17 15:55:04, [SEC,NOW]=2022-02-15 15:55:04, [DAY,MONTH_BEFORE]=2022-01-16 15:55:04, [DAY,YESTERDAY]=2022-02-14 15:55:04, [MIN,NOW]=2022-02-15 15:55:04, [SEC,MINUS_ONE]=2022-02-15 15:55:03, [DAY,WEEK_AFTER]=2022-02-22 15:55:04, [HOUR,NOW]=2022-02-15 15:55:04, [SEC,MINUS_TEN]=2022-02-15 15:54:54, [HOUR,PLUS_ONE]=2022-02-15 16:55:04, [MIN,PLUS_TEN]=2022-02-15 16:05:04, [HOUR,MINUS_TEN]=2022-02-15 05:55:04, [DAY,NOW]=2022-02-15 15:55:04, [SEC,PLUS_ONE]=2022-02-15 15:55:05, [SEC,PLUS_30]=2022-02-15 15:55:34}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLES_DB, cols=[(ID, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@704067c6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7f4596d0], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:05  [ main:1477 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1477 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1477 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1477 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:05  [ main:1477 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:10  [ main:0 ] - [ DEBUG ]  Start method
2022-02-15 15:55:10  [ main:19 ] - [ DEBUG ]  Logging Provider: org.jboss.logging.Log4jLoggerProvider
2022-02-15 15:55:10  [ main:24 ] - [ DEBUG ]  Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2022-02-15 15:55:10  [ main:25 ] - [ DEBUG ]  Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2022-02-15 15:55:10  [ main:28 ] - [ DEBUG ]  Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2022-02-15 15:55:10  [ main:44 ] - [ INFO ]  HHH000412: Hibernate ORM core version 5.6.1.Final
2022-02-15 15:55:10  [ main:45 ] - [ DEBUG ]  HHH000206: hibernate.properties not found
2022-02-15 15:55:10  [ main:206 ] - [ DEBUG ]  Interpreting public/system identifier : [-//Hibernate/Hibernate Configuration DTD//EN] - [http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd]
2022-02-15 15:55:10  [ main:207 ] - [ DEBUG ]  Recognized hibernate-configuration identifier; attempting to resolve on classpath under org/hibernate/
2022-02-15 15:55:10  [ main:213 ] - [ DEBUG ]  cfg.xml document did not define namespaces; wrapping in custom event reader to introduce namespace information
2022-02-15 15:55:10  [ main:390 ] - [ DEBUG ]  Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2022-02-15 15:55:10  [ main:391 ] - [ DEBUG ]  Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2022-02-15 15:55:10  [ main:391 ] - [ DEBUG ]  Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2022-02-15 15:55:10  [ main:397 ] - [ DEBUG ]  Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2022-02-15 15:55:10  [ main:397 ] - [ DEBUG ]  Building session factory using provided StandardServiceRegistry
2022-02-15 15:55:10  [ main:403 ] - [ DEBUG ]  Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2022-02-15 15:55:10  [ main:404 ] - [ DEBUG ]  Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2022-02-15 15:55:10  [ main:419 ] - [ INFO ]  HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2022-02-15 15:55:10  [ main:449 ] - [ DEBUG ]  Adding type registration boolean -> org.hibernate.type.BooleanType@349c1daf
2022-02-15 15:55:10  [ main:450 ] - [ DEBUG ]  Adding type registration boolean -> org.hibernate.type.BooleanType@349c1daf
2022-02-15 15:55:10  [ main:450 ] - [ DEBUG ]  Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@349c1daf
2022-02-15 15:55:10  [ main:451 ] - [ DEBUG ]  Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@aafcffa
2022-02-15 15:55:10  [ main:451 ] - [ DEBUG ]  Adding type registration true_false -> org.hibernate.type.TrueFalseType@5f7b97da
2022-02-15 15:55:10  [ main:452 ] - [ DEBUG ]  Adding type registration yes_no -> org.hibernate.type.YesNoType@395b56bb
2022-02-15 15:55:10  [ main:453 ] - [ DEBUG ]  Adding type registration byte -> org.hibernate.type.ByteType@640f11a1
2022-02-15 15:55:10  [ main:453 ] - [ DEBUG ]  Adding type registration byte -> org.hibernate.type.ByteType@640f11a1
2022-02-15 15:55:10  [ main:454 ] - [ DEBUG ]  Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@640f11a1
2022-02-15 15:55:10  [ main:455 ] - [ DEBUG ]  Adding type registration character -> org.hibernate.type.CharacterType@18c5069b
2022-02-15 15:55:10  [ main:455 ] - [ DEBUG ]  Adding type registration char -> org.hibernate.type.CharacterType@18c5069b
2022-02-15 15:55:10  [ main:455 ] - [ DEBUG ]  Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@18c5069b
2022-02-15 15:55:10  [ main:456 ] - [ DEBUG ]  Adding type registration short -> org.hibernate.type.ShortType@17cdf2d0
2022-02-15 15:55:10  [ main:456 ] - [ DEBUG ]  Adding type registration short -> org.hibernate.type.ShortType@17cdf2d0
2022-02-15 15:55:10  [ main:457 ] - [ DEBUG ]  Adding type registration java.lang.Short -> org.hibernate.type.ShortType@17cdf2d0
2022-02-15 15:55:10  [ main:457 ] - [ DEBUG ]  Adding type registration integer -> org.hibernate.type.IntegerType@5553d0f5
2022-02-15 15:55:10  [ main:458 ] - [ DEBUG ]  Adding type registration int -> org.hibernate.type.IntegerType@5553d0f5
2022-02-15 15:55:10  [ main:458 ] - [ DEBUG ]  Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@5553d0f5
2022-02-15 15:55:10  [ main:459 ] - [ DEBUG ]  Adding type registration long -> org.hibernate.type.LongType@54d18072
2022-02-15 15:55:10  [ main:459 ] - [ DEBUG ]  Adding type registration long -> org.hibernate.type.LongType@54d18072
2022-02-15 15:55:10  [ main:459 ] - [ DEBUG ]  Adding type registration java.lang.Long -> org.hibernate.type.LongType@54d18072
2022-02-15 15:55:10  [ main:460 ] - [ DEBUG ]  Adding type registration float -> org.hibernate.type.FloatType@6e6d5d29
2022-02-15 15:55:10  [ main:460 ] - [ DEBUG ]  Adding type registration float -> org.hibernate.type.FloatType@6e6d5d29
2022-02-15 15:55:10  [ main:461 ] - [ DEBUG ]  Adding type registration java.lang.Float -> org.hibernate.type.FloatType@6e6d5d29
2022-02-15 15:55:10  [ main:461 ] - [ DEBUG ]  Adding type registration double -> org.hibernate.type.DoubleType@70efb718
2022-02-15 15:55:10  [ main:462 ] - [ DEBUG ]  Adding type registration double -> org.hibernate.type.DoubleType@70efb718
2022-02-15 15:55:10  [ main:462 ] - [ DEBUG ]  Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@70efb718
2022-02-15 15:55:10  [ main:463 ] - [ DEBUG ]  Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@696f0212
2022-02-15 15:55:10  [ main:463 ] - [ DEBUG ]  Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@696f0212
2022-02-15 15:55:10  [ main:464 ] - [ DEBUG ]  Adding type registration big_integer -> org.hibernate.type.BigIntegerType@7bb6ab3a
2022-02-15 15:55:10  [ main:464 ] - [ DEBUG ]  Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@7bb6ab3a
2022-02-15 15:55:10  [ main:464 ] - [ DEBUG ]  Adding type registration string -> org.hibernate.type.StringType@32811494
2022-02-15 15:55:10  [ main:465 ] - [ DEBUG ]  Adding type registration java.lang.String -> org.hibernate.type.StringType@32811494
2022-02-15 15:55:10  [ main:465 ] - [ DEBUG ]  Adding type registration nstring -> org.hibernate.type.StringNVarcharType@2eced48b
2022-02-15 15:55:10  [ main:466 ] - [ DEBUG ]  Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@4b7e96a
2022-02-15 15:55:10  [ main:466 ] - [ DEBUG ]  Adding type registration url -> org.hibernate.type.UrlType@784b990c
2022-02-15 15:55:10  [ main:467 ] - [ DEBUG ]  Adding type registration java.net.URL -> org.hibernate.type.UrlType@784b990c
2022-02-15 15:55:10  [ main:467 ] - [ DEBUG ]  Adding type registration Duration -> org.hibernate.type.DurationType@33aeca0b
2022-02-15 15:55:10  [ main:468 ] - [ DEBUG ]  Adding type registration java.time.Duration -> org.hibernate.type.DurationType@33aeca0b
2022-02-15 15:55:10  [ main:471 ] - [ DEBUG ]  Adding type registration Instant -> org.hibernate.type.InstantType@765f05af
2022-02-15 15:55:10  [ main:471 ] - [ DEBUG ]  Adding type registration java.time.Instant -> org.hibernate.type.InstantType@765f05af
2022-02-15 15:55:10  [ main:472 ] - [ DEBUG ]  Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@5c153b9e
2022-02-15 15:55:10  [ main:473 ] - [ DEBUG ]  Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@5c153b9e
2022-02-15 15:55:10  [ main:474 ] - [ DEBUG ]  Adding type registration LocalDate -> org.hibernate.type.LocalDateType@5644dc81
2022-02-15 15:55:10  [ main:474 ] - [ DEBUG ]  Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@5644dc81
2022-02-15 15:55:10  [ main:475 ] - [ DEBUG ]  Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@5c42d2b7
2022-02-15 15:55:10  [ main:475 ] - [ DEBUG ]  Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@5c42d2b7
2022-02-15 15:55:10  [ main:476 ] - [ DEBUG ]  Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@a4ca3f6
2022-02-15 15:55:10  [ main:476 ] - [ DEBUG ]  Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@a4ca3f6
2022-02-15 15:55:10  [ main:477 ] - [ DEBUG ]  Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@2ccca26f
2022-02-15 15:55:10  [ main:478 ] - [ DEBUG ]  Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@2ccca26f
2022-02-15 15:55:10  [ main:479 ] - [ DEBUG ]  Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@1e7aa82b
2022-02-15 15:55:10  [ main:479 ] - [ DEBUG ]  Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@1e7aa82b
2022-02-15 15:55:10  [ main:480 ] - [ DEBUG ]  Adding type registration date -> org.hibernate.type.DateType@20a14b55
2022-02-15 15:55:10  [ main:480 ] - [ DEBUG ]  Adding type registration java.sql.Date -> org.hibernate.type.DateType@20a14b55
2022-02-15 15:55:10  [ main:481 ] - [ DEBUG ]  Adding type registration time -> org.hibernate.type.TimeType@3a3e4aff
2022-02-15 15:55:10  [ main:482 ] - [ DEBUG ]  Adding type registration java.sql.Time -> org.hibernate.type.TimeType@3a3e4aff
2022-02-15 15:55:10  [ main:483 ] - [ DEBUG ]  Adding type registration timestamp -> org.hibernate.type.TimestampType@45e37a7e
2022-02-15 15:55:10  [ main:483 ] - [ DEBUG ]  Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@45e37a7e
2022-02-15 15:55:10  [ main:483 ] - [ DEBUG ]  Adding type registration java.util.Date -> org.hibernate.type.TimestampType@45e37a7e
2022-02-15 15:55:10  [ main:485 ] - [ DEBUG ]  Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5bc9ba1d
2022-02-15 15:55:10  [ main:486 ] - [ DEBUG ]  Adding type registration calendar -> org.hibernate.type.CalendarType@6f0b0a5e
2022-02-15 15:55:10  [ main:486 ] - [ DEBUG ]  Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@6f0b0a5e
2022-02-15 15:55:10  [ main:486 ] - [ DEBUG ]  Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@6f0b0a5e
2022-02-15 15:55:10  [ main:487 ] - [ DEBUG ]  Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@478ee483
2022-02-15 15:55:10  [ main:488 ] - [ DEBUG ]  Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@4044fb95
2022-02-15 15:55:10  [ main:489 ] - [ DEBUG ]  Adding type registration locale -> org.hibernate.type.LocaleType@3f792b9b
2022-02-15 15:55:10  [ main:489 ] - [ DEBUG ]  Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@3f792b9b
2022-02-15 15:55:10  [ main:490 ] - [ DEBUG ]  Adding type registration currency -> org.hibernate.type.CurrencyType@2a8d39c4
2022-02-15 15:55:10  [ main:490 ] - [ DEBUG ]  Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@2a8d39c4
2022-02-15 15:55:10  [ main:491 ] - [ DEBUG ]  Adding type registration timezone -> org.hibernate.type.TimeZoneType@607fbe09
2022-02-15 15:55:10  [ main:491 ] - [ DEBUG ]  Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@607fbe09
2022-02-15 15:55:10  [ main:492 ] - [ DEBUG ]  Adding type registration class -> org.hibernate.type.ClassType@75f65e45
2022-02-15 15:55:10  [ main:493 ] - [ DEBUG ]  Adding type registration java.lang.Class -> org.hibernate.type.ClassType@75f65e45
2022-02-15 15:55:10  [ main:494 ] - [ DEBUG ]  Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@2313052e
2022-02-15 15:55:10  [ main:495 ] - [ DEBUG ]  Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@2313052e
2022-02-15 15:55:10  [ main:495 ] - [ DEBUG ]  Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@6cfcd46d
2022-02-15 15:55:10  [ main:497 ] - [ DEBUG ]  Adding type registration binary -> org.hibernate.type.BinaryType@56a4479a
2022-02-15 15:55:10  [ main:497 ] - [ DEBUG ]  Adding type registration byte[] -> org.hibernate.type.BinaryType@56a4479a
2022-02-15 15:55:10  [ main:497 ] - [ DEBUG ]  Adding type registration [B -> org.hibernate.type.BinaryType@56a4479a
2022-02-15 15:55:10  [ main:498 ] - [ DEBUG ]  Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@65b3a85a
2022-02-15 15:55:10  [ main:498 ] - [ DEBUG ]  Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@65b3a85a
2022-02-15 15:55:10  [ main:499 ] - [ DEBUG ]  Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@65b3a85a
2022-02-15 15:55:10  [ main:500 ] - [ DEBUG ]  Adding type registration row_version -> org.hibernate.type.RowVersionType@7c209437
2022-02-15 15:55:10  [ main:500 ] - [ DEBUG ]  Adding type registration image -> org.hibernate.type.ImageType@788fcafb
2022-02-15 15:55:10  [ main:501 ] - [ DEBUG ]  Adding type registration characters -> org.hibernate.type.CharArrayType@63b1d4fa
2022-02-15 15:55:10  [ main:501 ] - [ DEBUG ]  Adding type registration char[] -> org.hibernate.type.CharArrayType@63b1d4fa
2022-02-15 15:55:10  [ main:502 ] - [ DEBUG ]  Adding type registration [C -> org.hibernate.type.CharArrayType@63b1d4fa
2022-02-15 15:55:10  [ main:503 ] - [ DEBUG ]  Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@67ab1c47
2022-02-15 15:55:10  [ main:503 ] - [ DEBUG ]  Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@67ab1c47
2022-02-15 15:55:10  [ main:503 ] - [ DEBUG ]  Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@67ab1c47
2022-02-15 15:55:10  [ main:503 ] - [ DEBUG ]  Adding type registration text -> org.hibernate.type.TextType@15cafec7
2022-02-15 15:55:10  [ main:504 ] - [ DEBUG ]  Adding type registration ntext -> org.hibernate.type.NTextType@a776e
2022-02-15 15:55:10  [ main:505 ] - [ DEBUG ]  Adding type registration blob -> org.hibernate.type.BlobType@5af3a0f
2022-02-15 15:55:10  [ main:506 ] - [ DEBUG ]  Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@5af3a0f
2022-02-15 15:55:10  [ main:506 ] - [ DEBUG ]  Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@24b6b8f6
2022-02-15 15:55:10  [ main:508 ] - [ DEBUG ]  Adding type registration clob -> org.hibernate.type.ClobType@18230356
2022-02-15 15:55:10  [ main:508 ] - [ DEBUG ]  Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@18230356
2022-02-15 15:55:10  [ main:509 ] - [ DEBUG ]  Adding type registration nclob -> org.hibernate.type.NClobType@40c80397
2022-02-15 15:55:10  [ main:510 ] - [ DEBUG ]  Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@40c80397
2022-02-15 15:55:10  [ main:510 ] - [ DEBUG ]  Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@ed3068a
2022-02-15 15:55:10  [ main:510 ] - [ DEBUG ]  Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@1c7fd41f
2022-02-15 15:55:10  [ main:511 ] - [ DEBUG ]  Adding type registration serializable -> org.hibernate.type.SerializableType@502f1f4c
2022-02-15 15:55:10  [ main:514 ] - [ DEBUG ]  Adding type registration object -> org.hibernate.type.ObjectType@a4b2d8f
2022-02-15 15:55:10  [ main:514 ] - [ DEBUG ]  Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@a4b2d8f
2022-02-15 15:55:10  [ main:515 ] - [ DEBUG ]  Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@5c87bfe2
2022-02-15 15:55:10  [ main:515 ] - [ DEBUG ]  Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@2fea7088
2022-02-15 15:55:10  [ main:515 ] - [ DEBUG ]  Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@40499e4f
2022-02-15 15:55:10  [ main:515 ] - [ DEBUG ]  Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@51cd7ffc
2022-02-15 15:55:10  [ main:515 ] - [ DEBUG ]  Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@30d4b288
2022-02-15 15:55:10  [ main:516 ] - [ DEBUG ]  Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@4cc6fa2a
2022-02-15 15:55:10  [ main:516 ] - [ DEBUG ]  Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@40f1be1b
2022-02-15 15:55:10  [ main:516 ] - [ DEBUG ]  Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@7a791b66
2022-02-15 15:55:10  [ main:536 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2022-02-15 15:55:10  [ main:536 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2022-02-15 15:55:10  [ main:537 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2022-02-15 15:55:10  [ main:537 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2022-02-15 15:55:10  [ main:537 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2022-02-15 15:55:10  [ main:537 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2022-02-15 15:55:10  [ main:538 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2022-02-15 15:55:10  [ main:538 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-02-15 15:55:10  [ main:539 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2022-02-15 15:55:10  [ main:539 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2022-02-15 15:55:10  [ main:539 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2022-02-15 15:55:10  [ main:540 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2022-02-15 15:55:10  [ main:540 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-02-15 15:55:10  [ main:540 ] - [ DEBUG ]  Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2022-02-15 15:55:10  [ main:543 ] - [ WARN ]  HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2022-02-15 15:55:10  [ main:546 ] - [ INFO ]  HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:testdb1;DB_CLOSE_DELAY=-1]
2022-02-15 15:55:10  [ main:546 ] - [ INFO ]  HHH10001001: Connection properties: {password=root, user=root}
2022-02-15 15:55:10  [ main:546 ] - [ INFO ]  HHH10001003: Autocommit mode: false
2022-02-15 15:55:10  [ main:548 ] - [ DEBUG ]  Initializing Connection pool with 1 Connections
2022-02-15 15:55:10  [ main:548 ] - [ INFO ]  HHH000115: Hibernate connection pool size: 20 (min=1)
2022-02-15 15:55:10  [ main:644 ] - [ DEBUG ]  Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2022-02-15 15:55:10  [ main:644 ] - [ DEBUG ]  Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2022-02-15 15:55:10  [ main:645 ] - [ DEBUG ]  JDBC version : 4.1
2022-02-15 15:55:10  [ main:650 ] - [ INFO ]  HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2022-02-15 15:55:11  [ main:676 ] - [ DEBUG ]  JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2022-02-15 15:55:11  [ main:686 ] - [ INFO ]  HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
2022-02-15 15:55:11  [ main:688 ] - [ DEBUG ]  Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2022-02-15 15:55:11  [ main:690 ] - [ DEBUG ]  Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2bfeb1ef] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@778ca8ef]
2022-02-15 15:55:11  [ main:712 ] - [ DEBUG ]  Binding entity from annotated class: User
2022-02-15 15:55:11  [ main:721 ] - [ DEBUG ]  Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-02-15 15:55:11  [ main:724 ] - [ DEBUG ]  Import with entity name User
2022-02-15 15:55:11  [ main:726 ] - [ DEBUG ]  Bind entity User on table USERS_DB
2022-02-15 15:55:11  [ main:747 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(USERS_DB), mappingColumn=id, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:11  [ main:748 ] - [ DEBUG ]  Not known whether passed class name [User] is safe
2022-02-15 15:55:11  [ main:748 ] - [ DEBUG ]  No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : User
2022-02-15 15:55:11  [ main:748 ] - [ DEBUG ]  MetadataSourceProcessor property id with lazy=false
2022-02-15 15:55:11  [ main:749 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [User:id]
2022-02-15 15:55:11  [ main:750 ] - [ DEBUG ]  building SimpleValue for id
2022-02-15 15:55:11  [ main:751 ] - [ DEBUG ]  Building property id
2022-02-15 15:55:11  [ main:753 ] - [ DEBUG ]  #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2022-02-15 15:55:11  [ main:754 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(USERS_DB), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:11  [ main:754 ] - [ DEBUG ]  MetadataSourceProcessor property birthday with lazy=false
2022-02-15 15:55:11  [ main:754 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [User:birthday]
2022-02-15 15:55:11  [ main:754 ] - [ DEBUG ]  building SimpleValue for birthday
2022-02-15 15:55:11  [ main:755 ] - [ DEBUG ]  Building property birthday
2022-02-15 15:55:11  [ main:755 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(USERS_DB), mappingColumn=email, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:11  [ main:755 ] - [ DEBUG ]  MetadataSourceProcessor property email with lazy=false
2022-02-15 15:55:11  [ main:755 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [User:email]
2022-02-15 15:55:11  [ main:755 ] - [ DEBUG ]  building SimpleValue for email
2022-02-15 15:55:11  [ main:755 ] - [ DEBUG ]  Building property email
2022-02-15 15:55:11  [ main:756 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(USERS_DB), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:11  [ main:756 ] - [ DEBUG ]  MetadataSourceProcessor property firstName with lazy=false
2022-02-15 15:55:11  [ main:756 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [User:firstName]
2022-02-15 15:55:11  [ main:756 ] - [ DEBUG ]  building SimpleValue for firstName
2022-02-15 15:55:11  [ main:756 ] - [ DEBUG ]  Building property firstName
2022-02-15 15:55:11  [ main:756 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(USERS_DB), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:11  [ main:756 ] - [ DEBUG ]  MetadataSourceProcessor property lastName with lazy=false
2022-02-15 15:55:11  [ main:757 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [User:lastName]
2022-02-15 15:55:11  [ main:757 ] - [ DEBUG ]  building SimpleValue for lastName
2022-02-15 15:55:11  [ main:757 ] - [ DEBUG ]  Building property lastName
2022-02-15 15:55:11  [ main:757 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(USERS_DB), mappingColumn=login, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:11  [ main:757 ] - [ DEBUG ]  MetadataSourceProcessor property login with lazy=false
2022-02-15 15:55:11  [ main:757 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [User:login]
2022-02-15 15:55:11  [ main:758 ] - [ DEBUG ]  building SimpleValue for login
2022-02-15 15:55:11  [ main:758 ] - [ DEBUG ]  Building property login
2022-02-15 15:55:11  [ main:758 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(USERS_DB), mappingColumn=password, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:11  [ main:758 ] - [ DEBUG ]  MetadataSourceProcessor property password with lazy=false
2022-02-15 15:55:11  [ main:758 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [User:password]
2022-02-15 15:55:11  [ main:758 ] - [ DEBUG ]  building SimpleValue for password
2022-02-15 15:55:11  [ main:758 ] - [ DEBUG ]  Building property password
2022-02-15 15:55:11  [ main:759 ] - [ DEBUG ]  Binding column: Ejb3JoinColumn{logicalColumnName='role_id', referencedColumn='', mappedBy=''}
2022-02-15 15:55:11  [ main:759 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(USERS_DB), mappingColumn=role, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:11  [ main:761 ] - [ DEBUG ]  Building property role
2022-02-15 15:55:11  [ main:764 ] - [ DEBUG ]  Binding entity from annotated class: Role
2022-02-15 15:55:11  [ main:765 ] - [ DEBUG ]  Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-02-15 15:55:11  [ main:765 ] - [ DEBUG ]  Import with entity name Role
2022-02-15 15:55:11  [ main:765 ] - [ DEBUG ]  Bind entity Role on table ROLES_DB
2022-02-15 15:55:11  [ main:767 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ROLES_DB), mappingColumn=id, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:11  [ main:767 ] - [ DEBUG ]  Not known whether passed class name [Role] is safe
2022-02-15 15:55:11  [ main:767 ] - [ DEBUG ]  No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : Role
2022-02-15 15:55:11  [ main:768 ] - [ DEBUG ]  MetadataSourceProcessor property id with lazy=false
2022-02-15 15:55:11  [ main:768 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [Role:id]
2022-02-15 15:55:11  [ main:768 ] - [ DEBUG ]  building SimpleValue for id
2022-02-15 15:55:11  [ main:768 ] - [ DEBUG ]  Building property id
2022-02-15 15:55:11  [ main:768 ] - [ DEBUG ]  #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2022-02-15 15:55:11  [ main:768 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ROLES_DB), mappingColumn=name, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:11  [ main:768 ] - [ DEBUG ]  MetadataSourceProcessor property name with lazy=false
2022-02-15 15:55:11  [ main:769 ] - [ DEBUG ]  Attempting to locate auto-apply AttributeConverter for property [Role:name]
2022-02-15 15:55:11  [ main:769 ] - [ DEBUG ]  building SimpleValue for name
2022-02-15 15:55:11  [ main:769 ] - [ DEBUG ]  Building property name
2022-02-15 15:55:11  [ main:769 ] - [ DEBUG ]  Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='role'}
2022-02-15 15:55:11  [ main:769 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ROLES_DB), mappingColumn=users, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:11  [ main:770 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ROLES_DB), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:11  [ main:774 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ROLES_DB), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:11  [ main:775 ] - [ DEBUG ]  Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ROLES_DB), mappingColumn=users_KEY, insertable=true, updatable=true, unique=false}
2022-02-15 15:55:11  [ main:775 ] - [ DEBUG ]  Binding column: Ejb3JoinColumn{logicalColumnName='users_KEY', referencedColumn='null', mappedBy='null'}
2022-02-15 15:55:11  [ main:775 ] - [ DEBUG ]  Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='role'}
2022-02-15 15:55:11  [ main:775 ] - [ DEBUG ]  Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='role'}
2022-02-15 15:55:11  [ main:776 ] - [ DEBUG ]  Collection role: Role.users
2022-02-15 15:55:11  [ main:777 ] - [ DEBUG ]  Building property users
2022-02-15 15:55:11  [ main:778 ] - [ DEBUG ]  Starting fillSimpleValue for id
2022-02-15 15:55:11  [ main:778 ] - [ DEBUG ]  Starting fillSimpleValue for birthday
2022-02-15 15:55:11  [ main:778 ] - [ DEBUG ]  Starting fillSimpleValue for email
2022-02-15 15:55:11  [ main:778 ] - [ DEBUG ]  Starting fillSimpleValue for firstName
2022-02-15 15:55:11  [ main:778 ] - [ DEBUG ]  Starting fillSimpleValue for lastName
2022-02-15 15:55:11  [ main:778 ] - [ DEBUG ]  Starting fillSimpleValue for login
2022-02-15 15:55:11  [ main:778 ] - [ DEBUG ]  Starting fillSimpleValue for password
2022-02-15 15:55:11  [ main:779 ] - [ DEBUG ]  Starting fillSimpleValue for id
2022-02-15 15:55:11  [ main:779 ] - [ DEBUG ]  Starting fillSimpleValue for name
2022-02-15 15:55:11  [ main:781 ] - [ DEBUG ]  Forcing column [id] to be non-null as it is part of the primary key for table [users_db]
2022-02-15 15:55:11  [ main:781 ] - [ DEBUG ]  Forcing column [id] to be non-null as it is part of the primary key for table [roles_db]
2022-02-15 15:55:11  [ main:781 ] - [ DEBUG ]  Second pass for collection: Role.users
2022-02-15 15:55:11  [ main:781 ] - [ DEBUG ]  Binding a OneToMany: Role.users through a foreign key
2022-02-15 15:55:11  [ main:782 ] - [ DEBUG ]  Mapping collection: Role.users -> USERS_DB
2022-02-15 15:55:11  [ main:782 ] - [ DEBUG ]  Retrieving property User.role
2022-02-15 15:55:11  [ main:783 ] - [ DEBUG ]  Mapped collection key: role_id, one-to-many: User
2022-02-15 15:55:11  [ main:783 ] - [ DEBUG ]  Resolving reference to class: Role
2022-02-15 15:55:11  [ main:785 ] - [ DEBUG ]  Resolving reference to class: Role
2022-02-15 15:55:11  [ main:801 ] - [ DEBUG ]  Building session factory
2022-02-15 15:55:11  [ main:802 ] - [ DEBUG ]  SessionFactory name : null
2022-02-15 15:55:11  [ main:802 ] - [ DEBUG ]  Automatic flush during beforeCompletion(): enabled
2022-02-15 15:55:11  [ main:802 ] - [ DEBUG ]  Automatic session close at end of transaction: disabled
2022-02-15 15:55:11  [ main:802 ] - [ DEBUG ]  Statistics: disabled
2022-02-15 15:55:11  [ main:802 ] - [ DEBUG ]  Deleted entity synthetic identifier rollback: disabled
2022-02-15 15:55:11  [ main:802 ] - [ DEBUG ]  Default entity-mode: pojo
2022-02-15 15:55:11  [ main:802 ] - [ DEBUG ]  Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2022-02-15 15:55:11  [ main:802 ] - [ DEBUG ]  Allow initialization of lazy state outside session : disabled
2022-02-15 15:55:11  [ main:802 ] - [ DEBUG ]  Using BatchFetchStyle : LEGACY
2022-02-15 15:55:11  [ main:803 ] - [ DEBUG ]  Default batch fetch size: -1
2022-02-15 15:55:11  [ main:803 ] - [ DEBUG ]  Maximum outer join fetch depth: null
2022-02-15 15:55:11  [ main:803 ] - [ DEBUG ]  Default null ordering: NONE
2022-02-15 15:55:11  [ main:803 ] - [ DEBUG ]  Order SQL updates by primary key: disabled
2022-02-15 15:55:11  [ main:803 ] - [ DEBUG ]  Order SQL inserts for batching: disabled
2022-02-15 15:55:11  [ main:803 ] - [ DEBUG ]  multi-tenancy strategy : NONE
2022-02-15 15:55:11  [ main:803 ] - [ DEBUG ]  JTA Track by Thread: enabled
2022-02-15 15:55:11  [ main:803 ] - [ DEBUG ]  Query language substitutions: {}
2022-02-15 15:55:11  [ main:803 ] - [ DEBUG ]  Named query checking : enabled
2022-02-15 15:55:11  [ main:803 ] - [ DEBUG ]  Second-level cache: disabled
2022-02-15 15:55:11  [ main:804 ] - [ DEBUG ]  Second-level query cache: disabled
2022-02-15 15:55:11  [ main:804 ] - [ DEBUG ]  Second-level query cache factory: null
2022-02-15 15:55:11  [ main:804 ] - [ DEBUG ]  Second-level cache region prefix: null
2022-02-15 15:55:11  [ main:804 ] - [ DEBUG ]  Optimize second-level cache for minimal puts: disabled
2022-02-15 15:55:11  [ main:804 ] - [ DEBUG ]  Structured second-level cache entries: disabled
2022-02-15 15:55:11  [ main:804 ] - [ DEBUG ]  Second-level cache direct-reference entries: disabled
2022-02-15 15:55:11  [ main:804 ] - [ DEBUG ]  Automatic eviction of collection cache: disabled
2022-02-15 15:55:11  [ main:804 ] - [ DEBUG ]  JDBC batch size: 15
2022-02-15 15:55:11  [ main:804 ] - [ DEBUG ]  JDBC batch updates for versioned data: enabled
2022-02-15 15:55:11  [ main:804 ] - [ DEBUG ]  Scrollable result sets: enabled
2022-02-15 15:55:11  [ main:804 ] - [ DEBUG ]  Wrap result sets: disabled
2022-02-15 15:55:11  [ main:805 ] - [ DEBUG ]  JDBC3 getGeneratedKeys(): enabled
2022-02-15 15:55:11  [ main:805 ] - [ DEBUG ]  JDBC result set fetch size: null
2022-02-15 15:55:11  [ main:805 ] - [ DEBUG ]  Connection release mode: AFTER_TRANSACTION
2022-02-15 15:55:11  [ main:805 ] - [ DEBUG ]  Generate SQL with comments: disabled
2022-02-15 15:55:11  [ main:805 ] - [ DEBUG ]  JPA compliance - query : disabled
2022-02-15 15:55:11  [ main:805 ] - [ DEBUG ]  JPA compliance - closed-handling : disabled
2022-02-15 15:55:11  [ main:805 ] - [ DEBUG ]  JPA compliance - lists : disabled
2022-02-15 15:55:11  [ main:805 ] - [ DEBUG ]  JPA compliance - transactions : disabled
2022-02-15 15:55:11  [ main:830 ] - [ DEBUG ]  EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2022-02-15 15:55:11  [ main:831 ] - [ DEBUG ]  EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2022-02-15 15:55:11  [ main:837 ] - [ DEBUG ]  Session factory constructed with filter configurations : {}
2022-02-15 15:55:11  [ main:837 ] - [ DEBUG ]  Instantiating session factory with properties: {sun.desktop=gnome, awt.toolkit=sun.awt.X11.XToolkit, dialect=org.hibernate.dialect.H2Dialect, java.specification.version=11, sun.cpu.isalist=, hibernate.dbcp.maxIdle=10, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/home/NIX/mirzoiev-r/.local/share/JetBrains/Toolbox/apps/IDEA-U/ch-0/213.6777.52/lib/idea_rt.jar:/home/NIX/mirzoiev-r/.local/share/JetBrains/Toolbox/apps/IDEA-U/ch-0/213.6777.52/plugins/junit/lib/junit5-rt.jar:/home/NIX/mirzoiev-r/.local/share/JetBrains/Toolbox/apps/IDEA-U/ch-0/213.6777.52/plugins/junit/lib/junit-rt.jar:/home/NIX/mirzoiev-r/IdeaProject/mirzoiev.r/19_jpa_hibernate/target/test-classes:/home/NIX/mirzoiev-r/IdeaProject/mirzoiev.r/19_jpa_hibernate/target/classes:/home/NIX/mirzoiev-r/.m2/repository/org/slf4j/slf4j-api/1.7.2/slf4j-api-1.7.2.jar:/home/NIX/mirzoiev-r/.m2/repository/org/slf4j/slf4j-log4j12/1.7.2/slf4j-log4j12-1.7.2.jar:/home/NIX/mirzoiev-r/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/home/NIX/mirzoiev-r/.m2/repository/commons-dbcp/commons-dbcp/1.4/commons-dbcp-1.4.jar:/home/NIX/mirzoiev-r/.m2/repository/commons-pool/commons-pool/1.5.4/commons-pool-1.5.4.jar:/home/NIX/mirzoiev-r/.m2/repository/org/dbunit/dbunit/2.7.2/dbunit-2.7.2.jar:/home/NIX/mirzoiev-r/.m2/repository/com/github/database-rider/rider-core/1.32.0/rider-core-1.32.0.jar:/home/NIX/mirzoiev-r/.m2/repository/org/yaml/snakeyaml/1.16/snakeyaml-1.16.jar:/home/NIX/mirzoiev-r/.m2/repository/org/codehaus/jackson/jackson-mapper-lgpl/1.9.13/jackson-mapper-lgpl-1.9.13.jar:/home/NIX/mirzoiev-r/.m2/repository/org/codehaus/jackson/jackson-core-lgpl/1.9.13/jackson-core-lgpl-1.9.13.jar:/home/NIX/mirzoiev-r/.m2/repository/mysql/mysql-connector-java/8.0.25/mysql-connector-java-8.0.25.jar:/home/NIX/mirzoiev-r/.m2/repository/com/google/protobuf/protobuf-java/3.11.4/protobuf-java-3.11.4.jar:/home/NIX/mirzoiev-r/.m2/repository/junit/junit/4.11/junit-4.11.jar:/home/NIX/mirzoiev-r/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/NIX/mirzoiev-r/.m2/repository/com/github/dbunit-rules/core/0.15.1/core-0.15.1.jar:/home/NIX/mirzoiev-r/.m2/repository/org/apache/geronimo/specs/geronimo-osgi-locator/1.1/geronimo-osgi-locator-1.1.jar:/home/NIX/mirzoiev-r/.m2/repository/org/hibernate/hibernate-entitymanager/5.6.1.Final/hibernate-entitymanager-5.6.1.Final.jar:/home/NIX/mirzoiev-r/.m2/repository/org/jboss/logging/jboss-logging/3.4.2.Final/jboss-logging-3.4.2.Final.jar:/home/NIX/mirzoiev-r/.m2/repository/org/hibernate/common/hibernate-commons-annotations/5.1.2.Final/hibernate-commons-annotations-5.1.2.Final.jar:/home/NIX/mirzoiev-r/.m2/repository/javax/persistence/javax.persistence-api/2.2/javax.persistence-api-2.2.jar:/home/NIX/mirzoiev-r/.m2/repository/net/bytebuddy/byte-buddy/1.11.20/byte-buddy-1.11.20.jar:/home/NIX/mirzoiev-r/.m2/repository/org/jboss/spec/javax/transaction/jboss-transaction-api_1.2_spec/1.1.1.Final/jboss-transaction-api_1.2_spec-1.1.1.Final.jar:/home/NIX/mirzoiev-r/.m2/repository/org/apache/tomee/javaee-api/8.0/javaee-api-8.0.jar:/home/NIX/mirzoiev-r/.m2/repository/org/hibernate/hibernate-core/5.6.1.Final/hibernate-core-5.6.1.Final.jar:/home/NIX/mirzoiev-r/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar:/home/NIX/mirzoiev-r/.m2/repository/org/jboss/jandex/2.2.3.Final/jandex-2.2.3.Final.jar:/home/NIX/mirzoiev-r/.m2/repository/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar:/home/NIX/mirzoiev-r/.m2/repository/javax/activation/javax.activation-api/1.2.0/javax.activation-api-1.2.0.jar:/home/NIX/mirzoiev-r/.m2/repository/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar:/home/NIX/mirzoiev-r/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.1/jaxb-runtime-2.3.1.jar:/home/NIX/mirzoiev-r/.m2/repository/org/glassfish/jaxb/txw2/2.3.1/txw2-2.3.1.jar:/home/NIX/mirzoiev-r/.m2/repository/com/sun/istack/istack-commons-runtime/3.0.7/istack-commons-runtime-3.0.7.jar:/home/NIX/mirzoiev-r/.m2/repository/org/jvnet/staxex/stax-ex/1.8/stax-ex-1.8.jar:/home/NIX/mirzoiev-r/.m2/repository/com/sun/xml/fastinfoset/FastInfoset/1.2.15/FastInfoset-1.2.15.jar:/home/NIX/mirzoiev-r/.m2/repository/com/h2database/h2/1.4.200/h2-1.4.200.jar:/home/NIX/mirzoiev-r/.m2/repository/org/junit/jupiter/junit-jupiter/5.8.2/junit-jupiter-5.8.2.jar:/home/NIX/mirzoiev-r/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.8.2/junit-jupiter-api-5.8.2.jar:/home/NIX/mirzoiev-r/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/home/NIX/mirzoiev-r/.m2/repository/org/junit/platform/junit-platform-commons/1.8.2/junit-platform-commons-1.8.2.jar:/home/NIX/mirzoiev-r/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/NIX/mirzoiev-r/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.8.2/junit-jupiter-params-5.8.2.jar:/home/NIX/mirzoiev-r/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.8.2/junit-jupiter-engine-5.8.2.jar:/home/NIX/mirzoiev-r/.m2/repository/org/junit/platform/junit-platform-engine/1.8.2/junit-platform-engine-1.8.2.jar, java.vm.vendor=Ubuntu, sun.arch.data.model=64, idea.test.cyclic.buffer.size=1048576, hbm2ddl.auto=create-drop, java.vendor.url=https://ubuntu.com/, user.timezone=Europe/Kiev, hibernate.dbcp.maxWaitMillis=-1, os.name=Linux, java.vm.specification.version=11, current_session_context_class=thread, sun.java.launcher=SUN_STANDARD, user.country=US, sun.boot.library.path=/usr/lib/jvm/java-11-openjdk-amd64/lib, sun.java.command=com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit4 UserDBRiderTest, jdk.debug=release, sun.cpu.endian=little, user.home=/home/NIX/mirzoiev-r, user.language=en, java.specification.vendor=Oracle Corporation, java.version.date=2021-10-19, java.home=/usr/lib/jvm/java-11-openjdk-amd64, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.specification.name=Java Platform API Specification, java.vm.specification.vendor=Oracle Corporation, java.awt.graphicsenv=sun.awt.X11GraphicsEnvironment, hibernate.hbm2ddl.auto=create-drop, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=11.0.13+8-Ubuntu-0ubuntu1.20.04, user.name=mirzoiev-r, path.separator=:, hibernate.connection.username=****, hibernate.dbcp.minIdle=5, os.version=5.13.0-28-generic, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:h2:mem:testdb1;DB_CLOSE_DELAY=-1, file.encoding=UTF-8, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, hibernate.dbcp.initialSize=5, hibernate.dbcp.maxTotal=20, hibernate.current_session_context_class=thread, show_sql=true, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugs.launchpad.net/ubuntu/+source/openjdk-lts, java.io.tmpdir=/tmp, java.version=11.0.13, user.dir=/home/NIX/mirzoiev-r/IdeaProject/mirzoiev.r/19_jpa_hibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.print.PSPrinterJob, hibernate.connection.password=****, sun.os.patch.level=unknown, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@2dddc1b9, java.library.path=/usr/java/packages/lib:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib, java.vendor=Ubuntu, java.vm.info=mixed mode, sharing, java.vm.version=11.0.13+8-Ubuntu-0ubuntu1.20.04, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, java.class.version=55.0}
2022-02-15 15:55:11  [ main:846 ] - [ DEBUG ]  Unable to acquire Bean Validation ValidatorFactory, skipping activation
2022-02-15 15:55:11  [ main:846 ] - [ DEBUG ]  Skipping JACC integration as it was not enabled
2022-02-15 15:55:11  [ main:847 ] - [ DEBUG ]  Instantiated session factory
2022-02-15 15:55:11  [ main:848 ] - [ DEBUG ]  Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2bfeb1ef] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@9a6fbc0]
2022-02-15 15:55:11  [ main:882 ] - [ DEBUG ]  Not known whether passed class name [User] is safe
2022-02-15 15:55:11  [ main:882 ] - [ DEBUG ]  No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : User
2022-02-15 15:55:11  [ main:989 ] - [ DEBUG ]  Not known whether passed class name [Role] is safe
2022-02-15 15:55:11  [ main:990 ] - [ DEBUG ]  No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : Role
2022-02-15 15:55:11  [ main:1006 ] - [ DEBUG ]  Static SQL for collection: Role.users
2022-02-15 15:55:11  [ main:1006 ] - [ DEBUG ]   Row insert: update USERS_DB set role_id=? where id=?
2022-02-15 15:55:11  [ main:1007 ] - [ DEBUG ]   Row update: update USERS_DB set  where id=?
2022-02-15 15:55:11  [ main:1007 ] - [ DEBUG ]   Row delete: update USERS_DB set role_id=null where role_id=? and id=?
2022-02-15 15:55:11  [ main:1007 ] - [ DEBUG ]   One-shot delete: update USERS_DB set role_id=null where role_id=?
2022-02-15 15:55:11  [ main:1009 ] - [ DEBUG ]  Static SQL for entity: User
2022-02-15 15:55:11  [ main:1009 ] - [ DEBUG ]   Version select: select id from USERS_DB where id =?
2022-02-15 15:55:11  [ main:1009 ] - [ DEBUG ]   Snapshot select: select user_.id, user_.birthday as birthday2_1_, user_.email as email3_1_, user_.firstname as firstnam4_1_, user_.lastname as lastname5_1_, user_.login as login6_1_, user_.password as password7_1_, user_.role_id as role_id8_1_ from USERS_DB user_ where user_.id=?
2022-02-15 15:55:11  [ main:1010 ] - [ DEBUG ]   Insert 0: insert into USERS_DB (birthday, email, firstname, lastname, login, password, role_id, id) values (?, ?, ?, ?, ?, ?, ?, ?)
2022-02-15 15:55:11  [ main:1010 ] - [ DEBUG ]   Update 0: update USERS_DB set birthday=?, email=?, firstname=?, lastname=?, login=?, password=?, role_id=? where id=?
2022-02-15 15:55:11  [ main:1010 ] - [ DEBUG ]   Delete 0: delete from USERS_DB where id=?
2022-02-15 15:55:11  [ main:1010 ] - [ DEBUG ]   Identity insert: insert into USERS_DB (id, birthday, email, firstname, lastname, login, password, role_id) values (null, ?, ?, ?, ?, ?, ?, ?)
2022-02-15 15:55:11  [ main:1020 ] - [ DEBUG ]  Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@507d64aa]
2022-02-15 15:55:11  [ main:1021 ] - [ DEBUG ]  Visiting attribute path : birthday
2022-02-15 15:55:11  [ main:1021 ] - [ DEBUG ]  Visiting attribute path : email
2022-02-15 15:55:11  [ main:1022 ] - [ DEBUG ]  Visiting attribute path : firstName
2022-02-15 15:55:11  [ main:1022 ] - [ DEBUG ]  Visiting attribute path : lastName
2022-02-15 15:55:11  [ main:1022 ] - [ DEBUG ]  Visiting attribute path : login
2022-02-15 15:55:11  [ main:1022 ] - [ DEBUG ]  Visiting attribute path : password
2022-02-15 15:55:11  [ main:1022 ] - [ DEBUG ]  Visiting attribute path : role
2022-02-15 15:55:11  [ main:1024 ] - [ DEBUG ]  Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1f1ff879]
2022-02-15 15:55:11  [ main:1025 ] - [ DEBUG ]  Building LoadPlan...
2022-02-15 15:55:11  [ main:1032 ] - [ DEBUG ]  processing queryspace <gen:0>
2022-02-15 15:55:11  [ main:1035 ] - [ DEBUG ]  LoadPlan(entity=User)
    - Returns
       - EntityReturnImpl(entity=User, querySpaceUid=<gen:0>, path=User)
          - EntityAttributeFetchImpl(entity=Role, querySpaceUid=<gen:1>, path=User.role)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2022-02-15 15:55:11  [ main:1037 ] - [ DEBUG ]  Static select for entity User [NONE]: select user0_.id as id1_1_0_, user0_.birthday as birthday2_1_0_, user0_.email as email3_1_0_, user0_.firstname as firstnam4_1_0_, user0_.lastname as lastname5_1_0_, user0_.login as login6_1_0_, user0_.password as password7_1_0_, user0_.role_id as role_id8_1_0_ from USERS_DB user0_ where user0_.id=?
2022-02-15 15:55:11  [ main:1037 ] - [ DEBUG ]  Static SQL for entity: Role
2022-02-15 15:55:11  [ main:1037 ] - [ DEBUG ]   Version select: select id from ROLES_DB where id =?
2022-02-15 15:55:11  [ main:1037 ] - [ DEBUG ]   Snapshot select: select role_.id, role_.name as name2_0_ from ROLES_DB role_ where role_.id=?
2022-02-15 15:55:11  [ main:1037 ] - [ DEBUG ]   Insert 0: insert into ROLES_DB (name, id) values (?, ?)
2022-02-15 15:55:11  [ main:1037 ] - [ DEBUG ]   Update 0: update ROLES_DB set name=? where id=?
2022-02-15 15:55:11  [ main:1038 ] - [ DEBUG ]   Delete 0: delete from ROLES_DB where id=?
2022-02-15 15:55:11  [ main:1038 ] - [ DEBUG ]   Identity insert: insert into ROLES_DB (id, name) values (null, ?)
2022-02-15 15:55:11  [ main:1038 ] - [ DEBUG ]  Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@650ae78c]
2022-02-15 15:55:11  [ main:1038 ] - [ DEBUG ]  Visiting attribute path : name
2022-02-15 15:55:11  [ main:1038 ] - [ DEBUG ]  Visiting attribute path : users
2022-02-15 15:55:11  [ main:1039 ] - [ DEBUG ]  Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@534e58b6]
2022-02-15 15:55:11  [ main:1040 ] - [ DEBUG ]  Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2d38edfd]
2022-02-15 15:55:11  [ main:1040 ] - [ DEBUG ]  Building LoadPlan...
2022-02-15 15:55:11  [ main:1040 ] - [ DEBUG ]  processing queryspace <gen:0>
2022-02-15 15:55:11  [ main:1041 ] - [ DEBUG ]  LoadPlan(entity=Role)
    - Returns
       - EntityReturnImpl(entity=Role, querySpaceUid=<gen:0>, path=Role)
          - CollectionAttributeFetchImpl(collection=Role.users, querySpaceUid=<gen:1>, path=Role.users)
             - (collection element) CollectionFetchableElementEntityGraph(entity=User, querySpaceUid=<gen:2>, path=Role.users.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=Role)
          - SQL table alias mapping - role0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2022-02-15 15:55:11  [ main:1041 ] - [ DEBUG ]  Static select for entity Role [NONE]: select role0_.id as id1_0_0_, role0_.name as name2_0_0_ from ROLES_DB role0_ where role0_.id=?
2022-02-15 15:55:11  [ main:1044 ] - [ DEBUG ]  Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@77114efe]
2022-02-15 15:55:11  [ main:1044 ] - [ DEBUG ]  Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@79a7bfbc]
2022-02-15 15:55:11  [ main:1045 ] - [ DEBUG ]  Visiting attribute path : birthday
2022-02-15 15:55:11  [ main:1045 ] - [ DEBUG ]  Visiting attribute path : email
2022-02-15 15:55:11  [ main:1045 ] - [ DEBUG ]  Visiting attribute path : firstName
2022-02-15 15:55:11  [ main:1045 ] - [ DEBUG ]  Visiting attribute path : lastName
2022-02-15 15:55:11  [ main:1045 ] - [ DEBUG ]  Visiting attribute path : login
2022-02-15 15:55:11  [ main:1046 ] - [ DEBUG ]  Visiting attribute path : password
2022-02-15 15:55:11  [ main:1046 ] - [ DEBUG ]  Visiting attribute path : role
2022-02-15 15:55:11  [ main:1046 ] - [ DEBUG ]  Property path deemed to be circular : role
2022-02-15 15:55:11  [ main:1046 ] - [ DEBUG ]  Building LoadPlan...
2022-02-15 15:55:11  [ main:1048 ] - [ DEBUG ]  processing queryspace <gen:0>
2022-02-15 15:55:11  [ main:1049 ] - [ DEBUG ]  LoadPlan(collection=Role.users)
    - Returns
       - CollectionReturnImpl(collection=Role.users, querySpaceUid=<gen:0>, path=[Role.users])
          - (collection element) CollectionFetchableElementEntityGraph(entity=User, querySpaceUid=<gen:1>, path=[Role.users].<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=Role.users)
          - SQL table alias mapping - users0_
          - alias suffix - 0_
          - suffixed key columns - {role_id8_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=User)
                - SQL table alias mapping - users0_
                - alias suffix - 1_
                - suffixed key columns - {id1_1_1_}

2022-02-15 15:55:11  [ main:1049 ] - [ DEBUG ]  Static select for collection Role.users: select users0_.role_id as role_id8_1_0_, users0_.id as id1_1_0_, users0_.id as id1_1_1_, users0_.birthday as birthday2_1_1_, users0_.email as email3_1_1_, users0_.firstname as firstnam4_1_1_, users0_.lastname as lastname5_1_1_, users0_.login as login6_1_1_, users0_.password as password7_1_1_, users0_.role_id as role_id8_1_1_ from USERS_DB users0_ where users0_.role_id=?
2022-02-15 15:55:11  [ main:1073 ] - [ DEBUG ]  drop table if exists ROLES_DB CASCADE 
2022-02-15 15:55:11  [ main:1074 ] - [ INFO ]  HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@2b5c4f17] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2022-02-15 15:55:11  [ main:1075 ] - [ DEBUG ]  drop table if exists USERS_DB CASCADE 
2022-02-15 15:55:11  [ main:1076 ] - [ DEBUG ]  create table ROLES_DB (id bigint generated by default as identity, name varchar(255), primary key (id))
2022-02-15 15:55:11  [ main:1077 ] - [ INFO ]  HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@7301eebe] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2022-02-15 15:55:11  [ main:1082 ] - [ DEBUG ]  create table USERS_DB (id bigint generated by default as identity, birthday date, email varchar(255), firstname varchar(255), lastname varchar(255), login varchar(255), password varchar(255), role_id bigint, primary key (id))
2022-02-15 15:55:11  [ main:1083 ] - [ DEBUG ]  alter table USERS_DB add constraint FK1wn5f4npo3veii76yo6ldueg9 foreign key (role_id) references ROLES_DB
2022-02-15 15:55:11  [ main:1091 ] - [ DEBUG ]  Checking 0 named HQL queries
2022-02-15 15:55:11  [ main:1092 ] - [ DEBUG ]  Checking 0 named SQL queries
2022-02-15 15:55:11  [ main:1093 ] - [ DEBUG ]  EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2022-02-15 15:55:11  [ main:1096 ] - [ DEBUG ]  Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@7c011174
2022-02-15 15:55:11  [ main:1097 ] - [ DEBUG ]  Registering SessionFactory: eb79896f-9bc8-495c-a606-1b9a234d345e (<unnamed>)
2022-02-15 15:55:11  [ main:1097 ] - [ DEBUG ]  Not binding SessionFactory to JNDI, no JNDI name configured
2022-02-15 15:55:11  [ main:1097 ] - [ DEBUG ]  Finish method
2022-02-15 15:55:11  [ main:1102 ] - [ DEBUG ]  creating executor instance default
2022-02-15 15:55:11  [ main:1111 ] - [ DEBUG ]  Database connection info: 
	database product name=H2
	database version=1.4.200 (2019-10-14)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.200 (2019-10-14)
	jdbc driver major version=1
	jdbc driver minor version=4

2022-02-15 15:55:11  [ main:1112 ] - [ DEBUG ]  validateSchema(validateStrict=false) - start
2022-02-15 15:55:11  [ main:1112 ] - [ DEBUG ]  Schema is null. Nothing to validate.
2022-02-15 15:55:11  [ main:1112 ] - [ INFO ]  The property ending with 'schema' was not found. Please notify a dbunit developer to add the property to the class org.dbunit.database.DatabaseConfig
2022-02-15 15:55:11  [ main:1112 ] - [ INFO ]  The property ending with 'replacers' was not found. Please notify a dbunit developer to add the property to the class org.dbunit.database.DatabaseConfig
2022-02-15 15:55:11  [ main:1113 ] - [ INFO ]  DBUnit configuration for dataset executor 'default':cacheConnection: true
cacheTableNames: true
caseInsensitiveStrategy: UPPERCASE
columnSensing: false
leakHunter: false
mergeDataSets: false
mergingStrategy: METHOD
disableSequenceFiltering: false
alwaysCleanBefore: false
alwaysCleanAfter: false
raiseExceptionOnCleanUp: false
disablePKCheckFor: com.github.database.rider.core.configuration.DBUnitConfig@e776036b
schema: 
tableType: [TABLE]
allowEmptyFields: false
fetchSize: 100
qualifiedTableNames: false
batchSize: 100
batchedStatements: false
caseSensitiveTableNames: false
replacers: [com.github.database.rider.core.replacers.DateTimeReplacer@7f973a14, com.github.database.rider.core.replacers.UnixTimestampReplacer@76130a29, com.github.database.rider.core.replacers.NullReplacer@124d02b2]

2022-02-15 15:55:11  [ main:1126 ] - [ WARN ]  Database will not be populated because no dataset has been provided.
2022-02-15 15:55:11  [ main:1127 ] - [ DEBUG ]  start method findAll User
2022-02-15 15:55:11  [ main:1127 ] - [ DEBUG ]  Start method
2022-02-15 15:55:11  [ main:1158 ] - [ DEBUG ]  Statistics initialized [enabled=false]
2022-02-15 15:55:11  [ main:1178 ] - [ DEBUG ]  SELECT * FROM USERS_DB
2022-02-15 15:55:11  [ main:1179 ] - [ DEBUG ]  Result set row: 0
2022-02-15 15:55:11  [ main:1181 ] - [ DEBUG ]  Result row: EntityKey[User#1]
2022-02-15 15:55:11  [ main:1188 ] - [ DEBUG ]  Result set row: 1
2022-02-15 15:55:11  [ main:1188 ] - [ DEBUG ]  Result row: EntityKey[User#2]
2022-02-15 15:55:11  [ main:1189 ] - [ DEBUG ]  Resolving attributes for [User#1]
2022-02-15 15:55:11  [ main:1190 ] - [ DEBUG ]  Processing attribute `birthday` : value = 2000-11-01
2022-02-15 15:55:11  [ main:1190 ] - [ DEBUG ]  Attribute (`birthday`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1190 ] - [ DEBUG ]  Processing attribute `email` : value = email1
2022-02-15 15:55:11  [ main:1190 ] - [ DEBUG ]  Attribute (`email`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1190 ] - [ DEBUG ]  Processing attribute `firstName` : value = fname1
2022-02-15 15:55:11  [ main:1190 ] - [ DEBUG ]  Attribute (`firstName`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1190 ] - [ DEBUG ]  Processing attribute `lastName` : value = lname1
2022-02-15 15:55:11  [ main:1190 ] - [ DEBUG ]  Attribute (`lastName`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1190 ] - [ DEBUG ]  Processing attribute `login` : value = login1
2022-02-15 15:55:11  [ main:1190 ] - [ DEBUG ]  Attribute (`login`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1190 ] - [ DEBUG ]  Processing attribute `password` : value = pass1
2022-02-15 15:55:11  [ main:1190 ] - [ DEBUG ]  Attribute (`password`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1190 ] - [ DEBUG ]  Processing attribute `role` : value = 1
2022-02-15 15:55:11  [ main:1191 ] - [ DEBUG ]  Attribute (`role`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1196 ] - [ DEBUG ]  Done materializing entity [User#1]
2022-02-15 15:55:11  [ main:1196 ] - [ DEBUG ]  Resolving attributes for [User#2]
2022-02-15 15:55:11  [ main:1196 ] - [ DEBUG ]  Processing attribute `birthday` : value = 2000-11-01
2022-02-15 15:55:11  [ main:1196 ] - [ DEBUG ]  Attribute (`birthday`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1196 ] - [ DEBUG ]  Processing attribute `email` : value = email2
2022-02-15 15:55:11  [ main:1196 ] - [ DEBUG ]  Attribute (`email`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1196 ] - [ DEBUG ]  Processing attribute `firstName` : value = fname2
2022-02-15 15:55:11  [ main:1196 ] - [ DEBUG ]  Attribute (`firstName`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1196 ] - [ DEBUG ]  Processing attribute `lastName` : value = lname2
2022-02-15 15:55:11  [ main:1196 ] - [ DEBUG ]  Attribute (`lastName`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1196 ] - [ DEBUG ]  Processing attribute `login` : value = login2
2022-02-15 15:55:11  [ main:1196 ] - [ DEBUG ]  Attribute (`login`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1196 ] - [ DEBUG ]  Processing attribute `password` : value = pass2
2022-02-15 15:55:11  [ main:1197 ] - [ DEBUG ]  Attribute (`password`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1197 ] - [ DEBUG ]  Processing attribute `role` : value = 2
2022-02-15 15:55:11  [ main:1197 ] - [ DEBUG ]  Attribute (`role`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1197 ] - [ DEBUG ]  Done materializing entity [User#2]
2022-02-15 15:55:11  [ main:1199 ] - [ DEBUG ]  Initiating JDBC connection release from afterTransaction
2022-02-15 15:55:11  [ main:1200 ] - [ DEBUG ]  createDataSet() - start
2022-02-15 15:55:11  [ main:1202 ] - [ DEBUG ]  Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:11  [ main:1202 ] - [ DEBUG ]  Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:11  [ main:1204 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1204 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1204 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1204 ] - [ DEBUG ]  setConsumer(consumer) - start
2022-02-15 15:55:11  [ main:1204 ] - [ DEBUG ]  produce() - start
2022-02-15 15:55:11  [ main:1208 ] - [ DEBUG ]  setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@1e7f19b4, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@235b4cb8) - start
2022-02-15 15:55:11  [ main:1208 ] - [ DEBUG ]  setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@1e7f19b4, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@235b4cb8) - start
2022-02-15 15:55:11  [ main:1209 ] - [ DEBUG ]  startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4ed15347) - start
2022-02-15 15:55:11  [ main:1209 ] - [ DEBUG ]  startDataSet() - start
2022-02-15 15:55:11  [ main:1210 ] - [ DEBUG ]  startElement(uri=, localName=, qName=USERS_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4ed15347) - start
2022-02-15 15:55:11  [ main:1210 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1210 ] - [ DEBUG ]  isLastTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1210 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1210 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1210 ] - [ DEBUG ]  createTableMetaData(tableName=USERS_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4ed15347) - start
2022-02-15 15:55:11  [ main:1215 ] - [ DEBUG ]  getColumns(columnNames=[], columns=[(LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:11  [ main:1215 ] - [ DEBUG ]  add(tableName=USERS_DB, object=tableName=USERS_DB, columns=[(LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:11  [ main:1215 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1215 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1215 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1215 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1215 ] - [ DEBUG ]  startTable(metaData=tableName=USERS_DB, columns=[(LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:11  [ main:1216 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1216 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1216 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1216 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1216 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1216 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1216 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1216 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1216 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1216 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1216 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1216 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1216 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1216 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1216 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1216 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  row(values=login1) - start
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  addRow(values=login1) - start
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  endElement(uri=, localName=, qName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  startElement(uri=, localName=, qName=USERS_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4ed15347) - start
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  isLastTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1217 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  row(values=login2) - start
2022-02-15 15:55:11  [ main:1218 ] - [ DEBUG ]  addRow(values=login2) - start
2022-02-15 15:55:11  [ main:1219 ] - [ DEBUG ]  endElement(uri=, localName=, qName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1219 ] - [ DEBUG ]  endElement(uri=, localName=, qName=dataset) - start
2022-02-15 15:55:11  [ main:1219 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1219 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1219 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1219 ] - [ DEBUG ]  endTable() - start
2022-02-15 15:55:11  [ main:1219 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1219 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1219 ] - [ DEBUG ]  add(tableName=USERS_DB, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USERS_DB, columns=[(LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
2022-02-15 15:55:11  [ main:1219 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1219 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1219 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1219 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1219 ] - [ DEBUG ]  endDataSet() - start
2022-02-15 15:55:11  [ main:1219 ] - [ DEBUG ]  endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USERS_DB], _tableMap={USERS_DB=org.dbunit.dataset.DefaultTable[_metaData=tableName=USERS_DB, columns=[(LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
2022-02-15 15:55:11  [ main:1220 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:11  [ main:1220 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:11  [ main:1220 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1220 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1220 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1220 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1221 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:11  [ main:1223 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  add(tableName=USERS_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41) - start
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  add(tableName=USERS_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41) - start
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1224 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1225 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1225 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1226 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YESTERDAY], replacementSubstring=2022-02-14 15:55:11) - start
2022-02-15 15:55:11  [ main:1226 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,TOMORROW], replacementSubstring=2022-02-16 15:55:11) - start
2022-02-15 15:55:11  [ main:1226 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_AFTER], replacementSubstring=2022-02-22 15:55:11) - start
2022-02-15 15:55:11  [ main:1226 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_BEFORE], replacementSubstring=2022-02-08 15:55:11) - start
2022-02-15 15:55:11  [ main:1226 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_AFTER], replacementSubstring=2022-03-17 15:55:11) - start
2022-02-15 15:55:11  [ main:1226 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_BEFORE], replacementSubstring=2022-01-16 15:55:11) - start
2022-02-15 15:55:11  [ main:1226 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_BEFORE], replacementSubstring=2021-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1226 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_AFTER], replacementSubstring=2023-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1227 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1227 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_ONE], replacementSubstring=2022-02-15 16:55:11) - start
2022-02-15 15:55:11  [ main:1227 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_ONE], replacementSubstring=2022-02-15 14:55:11) - start
2022-02-15 15:55:11  [ main:1227 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_TEN], replacementSubstring=2022-02-16 01:55:11) - start
2022-02-15 15:55:11  [ main:1227 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_TEN], replacementSubstring=2022-02-15 05:55:11) - start
2022-02-15 15:55:11  [ main:1227 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1228 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_ONE], replacementSubstring=2022-02-15 15:56:11) - start
2022-02-15 15:55:11  [ main:1228 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_ONE], replacementSubstring=2022-02-15 15:54:11) - start
2022-02-15 15:55:11  [ main:1228 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_TEN], replacementSubstring=2022-02-15 16:05:11) - start
2022-02-15 15:55:11  [ main:1228 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_TEN], replacementSubstring=2022-02-15 15:45:11) - start
2022-02-15 15:55:11  [ main:1228 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_30], replacementSubstring=2022-02-15 16:25:11) - start
2022-02-15 15:55:11  [ main:1228 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_30], replacementSubstring=2022-02-15 15:25:11) - start
2022-02-15 15:55:11  [ main:1228 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1228 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_ONE], replacementSubstring=2022-02-15 15:55:12) - start
2022-02-15 15:55:11  [ main:1228 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_ONE], replacementSubstring=2022-02-15 15:55:10) - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_TEN], replacementSubstring=2022-02-15 15:55:21) - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_TEN], replacementSubstring=2022-02-15 15:55:01) - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_30], replacementSubstring=2022-02-15 15:55:41) - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_30], replacementSubstring=2022-02-15 15:54:41) - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  addReplacementObject(originalObject=[UNIX_TIMESTAMP], replacementObject=1644933311) - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  addReplacementObject(originalObject=[null], replacementObject=null) - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  add(tableName=USERS_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41) - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  getTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  getTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1229 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1230 ] - [ DEBUG ]  The table name map has already been initialized.
2022-02-15 15:55:11  [ main:1230 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1230 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1230 ] - [ DEBUG ]  createReplacementTable(table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41) - start
2022-02-15 15:55:11  [ main:1230 ] - [ DEBUG ]  setStrictReplacement(strictReplacement=false) - start
2022-02-15 15:55:11  [ main:1230 ] - [ DEBUG ]  getTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1230 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1230 ] - [ DEBUG ]  Initializing the data set from the database...
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  
	database product name=H2
	database version=1.4.200 (2019-10-14)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.200 (2019-10-14)
	jdbc driver major version=1
	jdbc driver minor version=4

2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  metadata resultset=rs8: org.h2.result.LocalResultImpl@79eeff87 columns: 11 rows: 2 pos: -1
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@6b4fc2d1, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@8bd076a, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.ext.h2.H2DataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@1de4285e], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1378eea2, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@634ff56, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null, http://www.dbunit.org/properties/allowVerifytabledefinitionExpectedtableCountMismatch=false}]) - start
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  Qualified table names feature is disabled. Returning plain table name
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ROLES_DB, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  add(tableName=ROLES_DB, object=null) - start
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - start
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  getTableName(tableName=ROLES_DB) - end - result=ROLES_DB
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@6b4fc2d1, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@8bd076a, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.ext.h2.H2DataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@1de4285e], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1378eea2, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@634ff56, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null, http://www.dbunit.org/properties/allowVerifytabledefinitionExpectedtableCountMismatch=false}]) - start
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  Qualified table names feature is disabled. Returning plain table name
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=USERS_DB, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  add(tableName=USERS_DB, object=null) - start
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1232 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1233 ] - [ DEBUG ]  getTableMetaData(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1233 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1233 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1233 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1233 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1233 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1233 ] - [ DEBUG ]  isEscaped returns 'false' for tableName=USERS_DB (dbIdentifierQuoteString=")
2022-02-15 15:55:11  [ main:1234 ] - [ DEBUG ]  Validating if table 'USERS_DB' exists in schema 'null' ...
2022-02-15 15:55:11  [ main:1239 ] - [ DEBUG ]  close(resultSet=rs9: org.h2.result.LocalResultImpl@4215e133 columns: 11 rows: 1 pos: 0) - start
2022-02-15 15:55:11  [ main:1239 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1256 ] - [ DEBUG ]  The current database 'H2' fits to the configured data type factory 'org.dbunit.ext.h2.H2DataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@1de4285e]'. Validation successful.
2022-02-15 15:55:11  [ main:1257 ] - [ DEBUG ]  Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TESTDB1 schema: null<=>PUBLIC table: USERS_DB<=>USERS_DB column: null<=>ID
2022-02-15 15:55:11  [ main:1257 ] - [ DEBUG ]  createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USERS_DB, columnName=ID) - start
2022-02-15 15:55:11  [ main:1257 ] - [ DEBUG ]  createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
2022-02-15 15:55:11  [ main:1257 ] - [ DEBUG ]  createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
2022-02-15 15:55:11  [ main:1257 ] - [ DEBUG ]  forSqlType(sqlType=-5) - start
2022-02-15 15:55:11  [ main:1257 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1257 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1257 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1257 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1257 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  nullableValue(nullable=0) - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  autoIncrementValue(isAutoIncrement=YES) - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TESTDB1 schema: null<=>PUBLIC table: USERS_DB<=>USERS_DB column: null<=>LOGIN
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USERS_DB, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  forSqlType(sqlType=12) - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  nullableValue(nullable=0) - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  autoIncrementValue(isAutoIncrement=NO) - start
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TESTDB1 schema: null<=>PUBLIC table: USERS_DB<=>USERS_DB column: null<=>PASSWORD
2022-02-15 15:55:11  [ main:1258 ] - [ DEBUG ]  createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USERS_DB, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  forSqlType(sqlType=12) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  nullableValue(nullable=0) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  autoIncrementValue(isAutoIncrement=NO) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TESTDB1 schema: null<=>PUBLIC table: USERS_DB<=>USERS_DB column: null<=>EMAIL
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USERS_DB, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  forSqlType(sqlType=12) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  nullableValue(nullable=1) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  autoIncrementValue(isAutoIncrement=NO) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TESTDB1 schema: null<=>PUBLIC table: USERS_DB<=>USERS_DB column: null<=>FIRSTNAME
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USERS_DB, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  forSqlType(sqlType=12) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  nullableValue(nullable=1) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  autoIncrementValue(isAutoIncrement=NO) - start
2022-02-15 15:55:11  [ main:1259 ] - [ DEBUG ]  Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TESTDB1 schema: null<=>PUBLIC table: USERS_DB<=>USERS_DB column: null<=>LASTNAME
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USERS_DB, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  forSqlType(sqlType=12) - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  nullableValue(nullable=1) - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  autoIncrementValue(isAutoIncrement=NO) - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TESTDB1 schema: null<=>PUBLIC table: USERS_DB<=>USERS_DB column: null<=>BIRTHDAY
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USERS_DB, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  createDataType(sqlType=91, sqlTypeName=DATE) - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  createDataType(sqlType=91, sqlTypeName=DATE) - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  forSqlType(sqlType=91) - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1260 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  nullableValue(nullable=1) - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  autoIncrementValue(isAutoIncrement=NO) - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TESTDB1 schema: null<=>PUBLIC table: USERS_DB<=>USERS_DB column: null<=>ROLE_ID
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  createDataType(sqlType=4 , sqlTypeName=INTEGER, tableName=USERS_DB, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  createDataType(sqlType=4, sqlTypeName=INTEGER) - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  createDataType(sqlType=4, sqlTypeName=INTEGER) - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  forSqlType(sqlType=4) - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1261 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1262 ] - [ DEBUG ]  getSqlType() - start
2022-02-15 15:55:11  [ main:1262 ] - [ DEBUG ]  nullableValue(nullable=1) - start
2022-02-15 15:55:11  [ main:1262 ] - [ DEBUG ]  autoIncrementValue(isAutoIncrement=NO) - start
2022-02-15 15:55:11  [ main:1262 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1262 ] - [ DEBUG ]  getPrimaryKeyNames() - start
2022-02-15 15:55:11  [ main:1263 ] - [ DEBUG ]  getName() - start
2022-02-15 15:55:11  [ main:1263 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1263 ] - [ DEBUG ]  getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)]) - start
2022-02-15 15:55:11  [ main:1263 ] - [ DEBUG ]  getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)]) - start
2022-02-15 15:55:11  [ main:1263 ] - [ DEBUG ]  update(tableName=USERS_DB, object=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)]) - start
2022-02-15 15:55:11  [ main:1263 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1263 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1263 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1263 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1264 ] - [ DEBUG ]  Statement fetch size set to 100
2022-02-15 15:55:11  [ main:1264 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1264 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1264 ] - [ DEBUG ]  getSelectStatement(schema=null, metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], escapePattern=null) - start
2022-02-15 15:55:11  [ main:1264 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1264 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1264 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1264 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1264 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1264 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1264 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1265 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1265 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1265 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1265 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1265 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1265 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1265 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1265 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1265 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1265 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1265 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ROLE_ID, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1265 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1265 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=USERS_DB, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1265 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1265 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1265 ] - [ DEBUG ]  Query: select ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ROLE_ID from USERS_DB order by ID
2022-02-15 15:55:11  [ main:1266 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1266 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1266 ] - [ DEBUG ]  addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)]], _resultSet=[rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: -1], _statement=[stat8]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
2022-02-15 15:55:11  [ main:1266 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1266 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1266 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1266 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1266 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1266 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1266 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getSqlValue(column=3, resultSet=rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getSqlValue(column=4, resultSet=rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getSqlValue(column=5, resultSet=rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1267 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getSqlValue(column=6, resultSet=rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getSqlValue(column=7, resultSet=rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getSqlValue(column=8, resultSet=rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1268 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getSqlValue(column=3, resultSet=rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getSqlValue(column=4, resultSet=rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getSqlValue(column=5, resultSet=rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getSqlValue(column=6, resultSet=rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getSqlValue(column=7, resultSet=rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1269 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1270 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1270 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1270 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1270 ] - [ DEBUG ]  getSqlValue(column=8, resultSet=rs12: org.h2.result.LocalResultImpl@33e434c8 columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1270 ] - [ DEBUG ]  getValue(row=2, columnName=ID) - start
2022-02-15 15:55:11  [ main:1270 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1270 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1270 ] - [ DEBUG ]  includedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], columns=[(LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:11  [ main:1271 ] - [ DEBUG ]  includeColumns(columns=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1271 ] - [ DEBUG ]  addPattern(patternName=LOGIN) - start
2022-02-15 15:55:11  [ main:1271 ] - [ DEBUG ]  addPattern(patternName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1271 ] - [ DEBUG ]  addPattern(patternName=EMAIL) - start
2022-02-15 15:55:11  [ main:1271 ] - [ DEBUG ]  addPattern(patternName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1271 ] - [ DEBUG ]  addPattern(patternName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1271 ] - [ DEBUG ]  addPattern(patternName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1271 ] - [ DEBUG ]  addPattern(patternName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1271 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1271 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[PASSWORD, LASTNAME, ROLE_ID, LOGIN, FIRSTNAME, EMAIL, BIRTHDAY], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1271 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1271 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1271 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1271 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1271 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1271 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(FIRSTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LASTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(BIRTHDAY, DATE, nullable)) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ROLE_ID, INTEGER, nullable)) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[PASSWORD, LASTNAME, ROLE_ID, LOGIN, FIRSTNAME, EMAIL, BIRTHDAY], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1272 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1273 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1273 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1274 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1274 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1274 ] - [ DEBUG ]  assertEqualsIgnoreCols(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], ignoreCols=[]) - start
2022-02-15 15:55:11  [ main:1274 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], columnNames=[]) - start
2022-02-15 15:55:11  [ main:1274 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:11  [ main:1274 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:11  [ main:1274 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1274 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1274 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(EMAIL, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(FIRSTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LASTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(BIRTHDAY, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ROLE_ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], columnNames=[]) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1275 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(FIRSTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LASTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(BIRTHDAY, DATE, nullable)) - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ROLE_ID, INTEGER, nullable)) - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2]) - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1276 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], additionalColumnInfo=null) - start
2022-02-15 15:55:11  [ main:1278 ] - [ DEBUG ]  assertWithValueComparer: expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null]
2022-02-15 15:55:11  [ main:1278 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1278 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1278 ] - [ DEBUG ]  assertWithValueComparer: actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2]
2022-02-15 15:55:11  [ main:1278 ] - [ DEBUG ]  assertWithValueComparer: failureHandler=null
2022-02-15 15:55:11  [ main:1278 ] - [ DEBUG ]  assertWithValueComparer: defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer
2022-02-15 15:55:11  [ main:1278 ] - [ DEBUG ]  assertWithValueComparer: columnValueComparers=null
2022-02-15 15:55:11  [ main:1278 ] - [ DEBUG ]  FailureHandler is null. Using default implementation
2022-02-15 15:55:11  [ main:1279 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1279 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1279 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1279 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1279 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1279 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@6a6c7f42) - start
2022-02-15 15:55:11  [ main:1279 ] - [ DEBUG ]  compare(o1=(PASSWORD, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(EMAIL, UNKNOWN, nullableUnknown), o2=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(EMAIL, UNKNOWN, nullableUnknown), o2=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(EMAIL, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, UNKNOWN, nullableUnknown), o2=(EMAIL, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(LASTNAME, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(LASTNAME, UNKNOWN, nullableUnknown), o2=(FIRSTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, UNKNOWN, nullableUnknown), o2=(LASTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, UNKNOWN, nullableUnknown), o2=(FIRSTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, UNKNOWN, nullableUnknown), o2=(EMAIL, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(ROLE_ID, UNKNOWN, nullableUnknown), o2=(LASTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(ROLE_ID, UNKNOWN, nullableUnknown), o2=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@5a515e5d) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(PASSWORD, VARCHAR, noNulls), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(EMAIL, VARCHAR, nullable), o2=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(EMAIL, VARCHAR, nullable), o2=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(EMAIL, VARCHAR, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(LASTNAME, VARCHAR, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(LASTNAME, VARCHAR, nullable), o2=(FIRSTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, DATE, nullable), o2=(LASTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, DATE, nullable), o2=(FIRSTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, DATE, nullable), o2=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1280 ] - [ DEBUG ]  compare(o1=(ROLE_ID, INTEGER, nullable), o2=(LASTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1281 ] - [ DEBUG ]  compare(o1=(ROLE_ID, INTEGER, nullable), o2=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1281 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@6a6c7f42, columnsToSearch=[(LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)])
2022-02-15 15:55:11  [ main:1281 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1281 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1281 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1281 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1281 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1281 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1281 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1281 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@5a515e5d, columnsToSearch=[(LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)])
2022-02-15 15:55:11  [ main:1281 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1281 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1281 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1281 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1281 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1281 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1282 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1282 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(BIRTHDAY, UNKNOWN, nullableUnknown), actualColumn=(BIRTHDAY, DATE, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1282 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(EMAIL, UNKNOWN, nullableUnknown), actualColumn=(EMAIL, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1282 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(FIRSTNAME, UNKNOWN, nullableUnknown), actualColumn=(FIRSTNAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1282 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(LASTNAME, UNKNOWN, nullableUnknown), actualColumn=(LASTNAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1282 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(LOGIN, UNKNOWN, nullableUnknown), actualColumn=(LOGIN, VARCHAR, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1282 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(PASSWORD, UNKNOWN, nullableUnknown), actualColumn=(PASSWORD, VARCHAR, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1282 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(ROLE_ID, UNKNOWN, nullableUnknown), actualColumn=(ROLE_ID, INTEGER, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1282 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1282 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1282 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7e15f4d4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5a058be5, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4eaf7902, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@20c812c8, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@71aaf151, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7061622, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@32d418a9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null], defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer, columnValueComparers=null) - start
2022-02-15 15:55:11  [ main:1282 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1282 ] - [ DEBUG ]  determineValidColumnValueComparers: using getDefaultValueComparerMap()={} as columnValueComparers=null for tableName=USERS_DB
2022-02-15 15:55:11  [ main:1282 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1282 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7e15f4d4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5a058be5, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4eaf7902, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@20c812c8, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@71aaf151, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7061622, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@32d418a9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  getValue(row=0, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  getValue(row=0, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  compare(o1=2000-11-01, o2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1283 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  compareNonNulls(value1=2000-11-01, value2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  getValue(row=0, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  getValue(row=0, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  compare(o1=email1, o2=email1) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  getValue(row=0, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1284 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getValue(row=0, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  compare(o1=fname1, o2=fname1) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getValue(row=0, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getValue(row=0, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  compare(o1=lname1, o2=lname1) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1285 ] - [ DEBUG ]  getValue(row=0, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getValue(row=0, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  compare(o1=login1, o2=login1) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getValue(row=0, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getValue(row=0, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  compare(o1=pass1, o2=pass1) - start
2022-02-15 15:55:11  [ main:1286 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  getValue(row=0, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  getValue(row=0, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  compare(o1=1, o2=1) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  compareNonNulls(value1=1, value2=1) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  getValue(row=1, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1287 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  getValue(row=1, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  compare(o1=2000-11-01, o2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  compareNonNulls(value1=2000-11-01, value2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  getValue(row=1, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  getValue(row=1, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1288 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  compare(o1=email2, o2=email2) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getValue(row=1, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getValue(row=1, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  compare(o1=fname2, o2=fname2) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getValue(row=1, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  getValue(row=1, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1289 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  compare(o1=lname2, o2=lname2) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getValue(row=1, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getValue(row=1, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  compare(o1=login2, o2=login2) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getValue(row=1, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1290 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  getValue(row=1, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  compare(o1=pass2, o2=pass2) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  getValue(row=1, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  getValue(row=1, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  compare(o1=2, o2=2) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  compareNonNulls(value1=2, value2=2) - start
2022-02-15 15:55:11  [ main:1291 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7e15f4d4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5a058be5, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4eaf7902, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@20c812c8, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@71aaf151, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7061622, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@32d418a9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7e15f4d4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5a058be5, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4eaf7902, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@20c812c8, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@71aaf151, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7061622, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@32d418a9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7e15f4d4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5a058be5, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4eaf7902, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@20c812c8, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@71aaf151, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7061622, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@32d418a9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1292 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7e15f4d4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5a058be5, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4eaf7902, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@20c812c8, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@71aaf151, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7061622, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@32d418a9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7e15f4d4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5a058be5, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4eaf7902, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@20c812c8, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@71aaf151, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7061622, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@32d418a9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7e15f4d4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5a058be5, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4eaf7902, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@20c812c8, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@71aaf151, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7061622, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@32d418a9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7e15f4d4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5a058be5, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4eaf7902, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@20c812c8, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@71aaf151, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7061622, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@32d418a9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1293 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7e15f4d4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5a058be5, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4eaf7902, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@20c812c8, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@71aaf151, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7061622, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@32d418a9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7e15f4d4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5a058be5, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4eaf7902, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@20c812c8, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@71aaf151, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7061622, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@32d418a9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7e15f4d4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5a058be5, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4eaf7902, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@20c812c8, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@71aaf151, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7061622, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@32d418a9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7e15f4d4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5a058be5, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4eaf7902, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@20c812c8, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@71aaf151, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7061622, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@32d418a9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1294 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1295 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1295 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7e15f4d4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5a058be5, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4eaf7902, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@20c812c8, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@71aaf151, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7061622, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@32d418a9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1295 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1295 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1295 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1295 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1295 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1295 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@49f3ff41, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7e15f4d4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5a058be5, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4eaf7902, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@20c812c8, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@71aaf151, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7061622, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@32d418a9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1295 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1295 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1295 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1295 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1298 ] - [ DEBUG ]  Start method
2022-02-15 15:55:11  [ main:1305 ] - [ WARN ]  Database will not be populated because no dataset has been provided.
2022-02-15 15:55:11  [ main:1305 ] - [ DEBUG ]  start method remove User
2022-02-15 15:55:11  [ main:1305 ] - [ DEBUG ]  Start method
2022-02-15 15:55:11  [ main:1306 ] - [ DEBUG ]  On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-02-15 15:55:11  [ main:1306 ] - [ DEBUG ]  begin
2022-02-15 15:55:11  [ main:1312 ] - [ DEBUG ]  User removed successfully
2022-02-15 15:55:11  [ main:1312 ] - [ DEBUG ]  committing
2022-02-15 15:55:11  [ main:1313 ] - [ DEBUG ]  Processing flush-time cascades
2022-02-15 15:55:11  [ main:1313 ] - [ DEBUG ]  Dirty checking collections
2022-02-15 15:55:11  [ main:1315 ] - [ DEBUG ]  Flushed: 0 insertions, 0 updates, 1 deletions to 1 objects
2022-02-15 15:55:11  [ main:1315 ] - [ DEBUG ]  Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2022-02-15 15:55:11  [ main:1316 ] - [ DEBUG ]  Listing entities:
2022-02-15 15:55:11  [ main:1316 ] - [ DEBUG ]  User{birthday=null, firstName=null, lastName=null, password=null, role=null, id=2, login=null, email=null}
2022-02-15 15:55:11  [ main:1319 ] - [ DEBUG ]  delete from USERS_DB where id=?
2022-02-15 15:55:11  [ main:1322 ] - [ DEBUG ]  Initiating JDBC connection release from afterTransaction
2022-02-15 15:55:11  [ main:1322 ] - [ DEBUG ]  Initiating JDBC connection release from afterTransaction
2022-02-15 15:55:11  [ main:1322 ] - [ DEBUG ]  finish method remove User
2022-02-15 15:55:11  [ main:1322 ] - [ DEBUG ]  HHH000420: Closing un-released batch
2022-02-15 15:55:11  [ main:1322 ] - [ DEBUG ]  createDataSet() - start
2022-02-15 15:55:11  [ main:1323 ] - [ DEBUG ]  Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:11  [ main:1323 ] - [ DEBUG ]  Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:11  [ main:1323 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1323 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1323 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1323 ] - [ DEBUG ]  setConsumer(consumer) - start
2022-02-15 15:55:11  [ main:1323 ] - [ DEBUG ]  produce() - start
2022-02-15 15:55:11  [ main:1323 ] - [ DEBUG ]  setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@667dcaad, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@22d7fd41) - start
2022-02-15 15:55:11  [ main:1323 ] - [ DEBUG ]  setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@667dcaad, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@22d7fd41) - start
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2c748a15) - start
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  startDataSet() - start
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  startElement(uri=, localName=, qName=USERS_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2c748a15) - start
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  isLastTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  createTableMetaData(tableName=USERS_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2c748a15) - start
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  add(tableName=USERS_DB, object=tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  startTable(metaData=tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1324 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  row(values=1) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  addRow(values=1) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  endElement(uri=, localName=, qName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1325 ] - [ DEBUG ]  endElement(uri=, localName=, qName=dataset) - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  endTable() - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  add(tableName=USERS_DB, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1]) - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  endDataSet() - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USERS_DB], _tableMap={USERS_DB=org.dbunit.dataset.DefaultTable[_metaData=tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1]}, _caseSensitiveTableNames=false]
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1326 ] - [ DEBUG ]  add(tableName=USERS_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075) - start
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  add(tableName=USERS_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075) - start
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1327 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YESTERDAY], replacementSubstring=2022-02-14 15:55:11) - start
2022-02-15 15:55:11  [ main:1328 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,TOMORROW], replacementSubstring=2022-02-16 15:55:11) - start
2022-02-15 15:55:11  [ main:1328 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_AFTER], replacementSubstring=2022-02-22 15:55:11) - start
2022-02-15 15:55:11  [ main:1328 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_BEFORE], replacementSubstring=2022-02-08 15:55:11) - start
2022-02-15 15:55:11  [ main:1328 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_AFTER], replacementSubstring=2022-03-17 15:55:11) - start
2022-02-15 15:55:11  [ main:1328 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_BEFORE], replacementSubstring=2022-01-16 15:55:11) - start
2022-02-15 15:55:11  [ main:1328 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_BEFORE], replacementSubstring=2021-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1328 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_AFTER], replacementSubstring=2023-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1328 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1328 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_ONE], replacementSubstring=2022-02-15 16:55:11) - start
2022-02-15 15:55:11  [ main:1328 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_ONE], replacementSubstring=2022-02-15 14:55:11) - start
2022-02-15 15:55:11  [ main:1329 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_TEN], replacementSubstring=2022-02-16 01:55:11) - start
2022-02-15 15:55:11  [ main:1329 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_TEN], replacementSubstring=2022-02-15 05:55:11) - start
2022-02-15 15:55:11  [ main:1329 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1329 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_ONE], replacementSubstring=2022-02-15 15:56:11) - start
2022-02-15 15:55:11  [ main:1329 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_ONE], replacementSubstring=2022-02-15 15:54:11) - start
2022-02-15 15:55:11  [ main:1329 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_TEN], replacementSubstring=2022-02-15 16:05:11) - start
2022-02-15 15:55:11  [ main:1329 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_TEN], replacementSubstring=2022-02-15 15:45:11) - start
2022-02-15 15:55:11  [ main:1329 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_30], replacementSubstring=2022-02-15 16:25:11) - start
2022-02-15 15:55:11  [ main:1329 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_30], replacementSubstring=2022-02-15 15:25:11) - start
2022-02-15 15:55:11  [ main:1329 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1329 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_ONE], replacementSubstring=2022-02-15 15:55:12) - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_ONE], replacementSubstring=2022-02-15 15:55:10) - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_TEN], replacementSubstring=2022-02-15 15:55:21) - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_TEN], replacementSubstring=2022-02-15 15:55:01) - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_30], replacementSubstring=2022-02-15 15:55:41) - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_30], replacementSubstring=2022-02-15 15:54:41) - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  addReplacementObject(originalObject=[UNIX_TIMESTAMP], replacementObject=1644933311) - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  addReplacementObject(originalObject=[null], replacementObject=null) - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  add(tableName=USERS_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075) - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  getTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  getTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  The table name map has already been initialized.
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1330 ] - [ DEBUG ]  createReplacementTable(table=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075) - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  setStrictReplacement(strictReplacement=false) - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getTableMetaData(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  Statement fetch size set to 100
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getSelectStatement(schema=null, metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], escapePattern=null) - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1331 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1332 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1332 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ROLE_ID, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1332 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1332 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=USERS_DB, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1332 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1332 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1332 ] - [ DEBUG ]  Query: select ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ROLE_ID from USERS_DB order by ID
2022-02-15 15:55:11  [ main:1332 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1332 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1332 ] - [ DEBUG ]  addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)]], _resultSet=[rs13: org.h2.result.LocalResultImpl@45117dd columns: 8 rows: 1 pos: -1], _statement=[stat20]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
2022-02-15 15:55:11  [ main:1332 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1332 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1332 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1332 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1332 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1332 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs13: org.h2.result.LocalResultImpl@45117dd columns: 8 rows: 1 pos: 0) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs13: org.h2.result.LocalResultImpl@45117dd columns: 8 rows: 1 pos: 0) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getSqlValue(column=3, resultSet=rs13: org.h2.result.LocalResultImpl@45117dd columns: 8 rows: 1 pos: 0) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getSqlValue(column=4, resultSet=rs13: org.h2.result.LocalResultImpl@45117dd columns: 8 rows: 1 pos: 0) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getSqlValue(column=5, resultSet=rs13: org.h2.result.LocalResultImpl@45117dd columns: 8 rows: 1 pos: 0) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getSqlValue(column=6, resultSet=rs13: org.h2.result.LocalResultImpl@45117dd columns: 8 rows: 1 pos: 0) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1333 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1334 ] - [ DEBUG ]  getSqlValue(column=7, resultSet=rs13: org.h2.result.LocalResultImpl@45117dd columns: 8 rows: 1 pos: 0) - start
2022-02-15 15:55:11  [ main:1334 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1334 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1334 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1334 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1334 ] - [ DEBUG ]  getSqlValue(column=8, resultSet=rs13: org.h2.result.LocalResultImpl@45117dd columns: 8 rows: 1 pos: 0) - start
2022-02-15 15:55:11  [ main:1334 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1334 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1334 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1334 ] - [ DEBUG ]  includedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:11  [ main:1334 ] - [ DEBUG ]  includeColumns(columns=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1334 ] - [ DEBUG ]  addPattern(patternName=ID) - start
2022-02-15 15:55:11  [ main:1334 ] - [ DEBUG ]  addPattern(patternName=LOGIN) - start
2022-02-15 15:55:11  [ main:1334 ] - [ DEBUG ]  addPattern(patternName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1334 ] - [ DEBUG ]  addPattern(patternName=EMAIL) - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  addPattern(patternName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  addPattern(patternName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  addPattern(patternName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  addPattern(patternName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[PASSWORD, LASTNAME, ROLE_ID, LOGIN, FIRSTNAME, ID, EMAIL, BIRTHDAY], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1335 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(FIRSTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LASTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(BIRTHDAY, DATE, nullable)) - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1336 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ROLE_ID, INTEGER, nullable)) - start
2022-02-15 15:55:11  [ main:1337 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1337 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1337 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1337 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1337 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[PASSWORD, LASTNAME, ROLE_ID, LOGIN, FIRSTNAME, ID, EMAIL, BIRTHDAY], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1337 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1337 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1337 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1337 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1337 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1337 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1337 ] - [ DEBUG ]  assertEqualsIgnoreCols(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], ignoreCols=[]) - start
2022-02-15 15:55:11  [ main:1337 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], columnNames=[]) - start
2022-02-15 15:55:11  [ main:1337 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:11  [ main:1337 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(EMAIL, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(FIRSTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1338 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LASTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1339 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1339 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1339 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(BIRTHDAY, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1339 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1339 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1339 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ROLE_ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1339 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1339 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1339 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1339 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1339 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1339 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], columnNames=[]) - start
2022-02-15 15:55:11  [ main:1339 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:11  [ main:1339 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:11  [ main:1339 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1339 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(FIRSTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LASTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1340 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1341 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1341 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(BIRTHDAY, DATE, nullable)) - start
2022-02-15 15:55:11  [ main:1341 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1341 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1341 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ROLE_ID, INTEGER, nullable)) - start
2022-02-15 15:55:11  [ main:1341 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1341 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1341 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1341 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1341 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1341 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1341 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1341 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1341 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1]) - start
2022-02-15 15:55:11  [ main:1341 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1341 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], additionalColumnInfo=null) - start
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  assertWithValueComparer: expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null]
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  assertWithValueComparer: actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1]
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  assertWithValueComparer: failureHandler=null
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  assertWithValueComparer: defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  assertWithValueComparer: columnValueComparers=null
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  FailureHandler is null. Using default implementation
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@604d23fa) - start
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  compare(o1=(LOGIN, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  compare(o1=(PASSWORD, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  compare(o1=(EMAIL, UNKNOWN, nullableUnknown), o2=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1342 ] - [ DEBUG ]  compare(o1=(EMAIL, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  compare(o1=(EMAIL, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, UNKNOWN, nullableUnknown), o2=(EMAIL, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  compare(o1=(LASTNAME, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  compare(o1=(LASTNAME, UNKNOWN, nullableUnknown), o2=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  compare(o1=(LASTNAME, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, UNKNOWN, nullableUnknown), o2=(LASTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, UNKNOWN, nullableUnknown), o2=(FIRSTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, UNKNOWN, nullableUnknown), o2=(EMAIL, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  compare(o1=(ROLE_ID, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  compare(o1=(ROLE_ID, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  compare(o1=(ROLE_ID, UNKNOWN, nullableUnknown), o2=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@1cc8416a) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  compare(o1=(LOGIN, VARCHAR, noNulls), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  compare(o1=(PASSWORD, VARCHAR, noNulls), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1343 ] - [ DEBUG ]  compare(o1=(EMAIL, VARCHAR, nullable), o2=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  compare(o1=(EMAIL, VARCHAR, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  compare(o1=(EMAIL, VARCHAR, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  compare(o1=(LASTNAME, VARCHAR, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  compare(o1=(LASTNAME, VARCHAR, nullable), o2=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  compare(o1=(LASTNAME, VARCHAR, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, DATE, nullable), o2=(LASTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, DATE, nullable), o2=(FIRSTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, DATE, nullable), o2=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  compare(o1=(ROLE_ID, INTEGER, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  compare(o1=(ROLE_ID, INTEGER, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  compare(o1=(ROLE_ID, INTEGER, nullable), o2=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@604d23fa, columnsToSearch=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)])
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1344 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@1cc8416a, columnsToSearch=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)])
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(BIRTHDAY, UNKNOWN, nullableUnknown), actualColumn=(BIRTHDAY, DATE, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1345 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(EMAIL, UNKNOWN, nullableUnknown), actualColumn=(EMAIL, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1346 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(FIRSTNAME, UNKNOWN, nullableUnknown), actualColumn=(FIRSTNAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1346 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(ID, UNKNOWN, nullableUnknown), actualColumn=(ID, BIGINT, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1346 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(LASTNAME, UNKNOWN, nullableUnknown), actualColumn=(LASTNAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1346 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(LOGIN, UNKNOWN, nullableUnknown), actualColumn=(LOGIN, VARCHAR, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1346 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(PASSWORD, UNKNOWN, nullableUnknown), actualColumn=(PASSWORD, VARCHAR, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1346 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(ROLE_ID, UNKNOWN, nullableUnknown), actualColumn=(ROLE_ID, INTEGER, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1346 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1346 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1346 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@79980d8d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@35d60381, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@68ab6ab0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@61ffd148, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@58324c9f, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5d7d8613, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6eb089e6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@715a70e9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null], defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer, columnValueComparers=null) - start
2022-02-15 15:55:11  [ main:1346 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1346 ] - [ DEBUG ]  determineValidColumnValueComparers: using getDefaultValueComparerMap()={} as columnValueComparers=null for tableName=USERS_DB
2022-02-15 15:55:11  [ main:1346 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1346 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1346 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1346 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@79980d8d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@35d60381, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@68ab6ab0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@61ffd148, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@58324c9f, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5d7d8613, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6eb089e6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@715a70e9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1347 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1347 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1347 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1347 ] - [ DEBUG ]  getValue(row=0, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1347 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1347 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:11  [ main:1347 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1347 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1347 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1347 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1347 ] - [ DEBUG ]  getValue(row=0, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1347 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1347 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:11  [ main:1347 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1347 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1347 ] - [ DEBUG ]  compare(o1=2000-11-01, o2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1348 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1348 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1348 ] - [ DEBUG ]  compareNonNulls(value1=2000-11-01, value2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1348 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1348 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1348 ] - [ DEBUG ]  getValue(row=0, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1348 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1348 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:11  [ main:1348 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1348 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1348 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1348 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1348 ] - [ DEBUG ]  getValue(row=0, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1348 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1348 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:11  [ main:1348 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  compare(o1=email1, o2=email1) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  getValue(row=0, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  getValue(row=0, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1349 ] - [ DEBUG ]  compare(o1=fname1, o2=fname1) - start
2022-02-15 15:55:11  [ main:1350 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1350 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1350 ] - [ DEBUG ]  getValue(row=0, column=ID) - start
2022-02-15 15:55:11  [ main:1350 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1350 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:11  [ main:1350 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1350 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1350 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1350 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1350 ] - [ DEBUG ]  getValue(row=0, column=ID) - start
2022-02-15 15:55:11  [ main:1350 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1350 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:11  [ main:1350 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1350 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1350 ] - [ DEBUG ]  compare(o1=1, o2=1) - start
2022-02-15 15:55:11  [ main:1350 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  compareNonNulls(value1=1, value2=1) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  getValue(row=0, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  getValue(row=0, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1351 ] - [ DEBUG ]  compare(o1=lname1, o2=lname1) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  getValue(row=0, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  getValue(row=0, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  compare(o1=login1, o2=login1) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1352 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  getValue(row=0, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  getValue(row=0, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  compare(o1=pass1, o2=pass1) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  getValue(row=0, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1353 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:11  [ main:1354 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1354 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1354 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1354 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1354 ] - [ DEBUG ]  getValue(row=0, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1354 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1354 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=1) - start
2022-02-15 15:55:11  [ main:1354 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1354 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1354 ] - [ DEBUG ]  compare(o1=1, o2=1) - start
2022-02-15 15:55:11  [ main:1354 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1354 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1354 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1354 ] - [ DEBUG ]  compareNonNulls(value1=1, value2=1) - start
2022-02-15 15:55:11  [ main:1354 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1354 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1355 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1355 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@79980d8d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@35d60381, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@68ab6ab0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@61ffd148, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@58324c9f, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5d7d8613, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6eb089e6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@715a70e9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1355 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1355 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1355 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1355 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1355 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@79980d8d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@35d60381, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@68ab6ab0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@61ffd148, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@58324c9f, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5d7d8613, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6eb089e6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@715a70e9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1355 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1355 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1355 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1355 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1355 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@79980d8d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@35d60381, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@68ab6ab0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@61ffd148, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@58324c9f, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5d7d8613, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6eb089e6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@715a70e9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1355 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1355 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1356 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1356 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1356 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@79980d8d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@35d60381, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@68ab6ab0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@61ffd148, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@58324c9f, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5d7d8613, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6eb089e6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@715a70e9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1356 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1356 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1356 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1356 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1356 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@79980d8d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@35d60381, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@68ab6ab0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@61ffd148, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@58324c9f, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5d7d8613, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6eb089e6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@715a70e9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1356 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1356 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1356 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1356 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1356 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@79980d8d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@35d60381, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@68ab6ab0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@61ffd148, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@58324c9f, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5d7d8613, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6eb089e6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@715a70e9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1356 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1356 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1357 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1357 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1357 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@cfd1075, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@79980d8d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@35d60381, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@68ab6ab0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@61ffd148, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@58324c9f, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5d7d8613, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6eb089e6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@715a70e9], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1357 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1357 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1357 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1358 ] - [ DEBUG ]  Start method
2022-02-15 15:55:11  [ main:1364 ] - [ WARN ]  Database will not be populated because no dataset has been provided.
2022-02-15 15:55:11  [ main:1365 ] - [ DEBUG ]  Start method
2022-02-15 15:55:11  [ main:1365 ] - [ DEBUG ]  On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-02-15 15:55:11  [ main:1365 ] - [ DEBUG ]  begin
2022-02-15 15:55:11  [ main:1367 ] - [ DEBUG ]  Executing identity-insert immediately
2022-02-15 15:55:11  [ main:1368 ] - [ DEBUG ]  insert into USERS_DB (id, birthday, email, firstname, lastname, login, password, role_id) values (null, ?, ?, ?, ?, ?, ?, ?)
2022-02-15 15:55:11  [ main:1370 ] - [ DEBUG ]  Natively generated identity: 3
2022-02-15 15:55:11  [ main:1370 ] - [ DEBUG ]  HHH000387: ResultSet's statement was not registered
2022-02-15 15:55:11  [ main:1371 ] - [ DEBUG ]  User created successfully
2022-02-15 15:55:11  [ main:1372 ] - [ DEBUG ]  committing
2022-02-15 15:55:11  [ main:1372 ] - [ DEBUG ]  Processing flush-time cascades
2022-02-15 15:55:11  [ main:1372 ] - [ DEBUG ]  Dirty checking collections
2022-02-15 15:55:11  [ main:1372 ] - [ DEBUG ]  Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2022-02-15 15:55:11  [ main:1372 ] - [ DEBUG ]  Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2022-02-15 15:55:11  [ main:1372 ] - [ DEBUG ]  Listing entities:
2022-02-15 15:55:11  [ main:1372 ] - [ DEBUG ]  User{birthday=1970-01-01, firstName=fname3, lastName=lname3, password=pass3, role=Role#1, id=3, login=login3, email=email3}
2022-02-15 15:55:11  [ main:1373 ] - [ DEBUG ]  Initiating JDBC connection release from afterTransaction
2022-02-15 15:55:11  [ main:1373 ] - [ DEBUG ]  Initiating JDBC connection release from afterTransaction
2022-02-15 15:55:11  [ main:1373 ] - [ DEBUG ]  finish method create User
2022-02-15 15:55:11  [ main:1373 ] - [ DEBUG ]  createDataSet() - start
2022-02-15 15:55:11  [ main:1373 ] - [ DEBUG ]  Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:11  [ main:1373 ] - [ DEBUG ]  Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:11  [ main:1373 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1373 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1373 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1373 ] - [ DEBUG ]  setConsumer(consumer) - start
2022-02-15 15:55:11  [ main:1373 ] - [ DEBUG ]  produce() - start
2022-02-15 15:55:11  [ main:1374 ] - [ DEBUG ]  setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@6f5d0190, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@67332b1e) - start
2022-02-15 15:55:11  [ main:1374 ] - [ DEBUG ]  setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@6f5d0190, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@67332b1e) - start
2022-02-15 15:55:11  [ main:1374 ] - [ DEBUG ]  startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7e34b127) - start
2022-02-15 15:55:11  [ main:1374 ] - [ DEBUG ]  startDataSet() - start
2022-02-15 15:55:11  [ main:1374 ] - [ DEBUG ]  startElement(uri=, localName=, qName=USERS_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7e34b127) - start
2022-02-15 15:55:11  [ main:1374 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  isLastTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  createTableMetaData(tableName=USERS_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7e34b127) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  add(tableName=USERS_DB, object=tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  startTable(metaData=tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1375 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  row(values=1) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  addRow(values=1) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  endElement(uri=, localName=, qName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  startElement(uri=, localName=, qName=USERS_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7e34b127) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  isLastTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1376 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  row(values=2) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  addRow(values=2) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  endElement(uri=, localName=, qName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1377 ] - [ DEBUG ]  startElement(uri=, localName=, qName=USERS_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7e34b127) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  isLastTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1378 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  row(values=3) - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  addRow(values=3) - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  endElement(uri=, localName=, qName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  endElement(uri=, localName=, qName=dataset) - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  endTable() - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  add(tableName=USERS_DB, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3]) - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  endDataSet() - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USERS_DB], _tableMap={USERS_DB=org.dbunit.dataset.DefaultTable[_metaData=tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3]}, _caseSensitiveTableNames=false]
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1379 ] - [ DEBUG ]  add(tableName=USERS_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a) - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  add(tableName=USERS_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a) - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YESTERDAY], replacementSubstring=2022-02-14 15:55:11) - start
2022-02-15 15:55:11  [ main:1380 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,TOMORROW], replacementSubstring=2022-02-16 15:55:11) - start
2022-02-15 15:55:11  [ main:1381 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_AFTER], replacementSubstring=2022-02-22 15:55:11) - start
2022-02-15 15:55:11  [ main:1381 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_BEFORE], replacementSubstring=2022-02-08 15:55:11) - start
2022-02-15 15:55:11  [ main:1381 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_AFTER], replacementSubstring=2022-03-17 15:55:11) - start
2022-02-15 15:55:11  [ main:1381 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_BEFORE], replacementSubstring=2022-01-16 15:55:11) - start
2022-02-15 15:55:11  [ main:1381 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_BEFORE], replacementSubstring=2021-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1381 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_AFTER], replacementSubstring=2023-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1381 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1381 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_ONE], replacementSubstring=2022-02-15 16:55:11) - start
2022-02-15 15:55:11  [ main:1381 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_ONE], replacementSubstring=2022-02-15 14:55:11) - start
2022-02-15 15:55:11  [ main:1381 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_TEN], replacementSubstring=2022-02-16 01:55:11) - start
2022-02-15 15:55:11  [ main:1381 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_TEN], replacementSubstring=2022-02-15 05:55:11) - start
2022-02-15 15:55:11  [ main:1382 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1382 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_ONE], replacementSubstring=2022-02-15 15:56:11) - start
2022-02-15 15:55:11  [ main:1382 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_ONE], replacementSubstring=2022-02-15 15:54:11) - start
2022-02-15 15:55:11  [ main:1382 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_TEN], replacementSubstring=2022-02-15 16:05:11) - start
2022-02-15 15:55:11  [ main:1382 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_TEN], replacementSubstring=2022-02-15 15:45:11) - start
2022-02-15 15:55:11  [ main:1382 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_30], replacementSubstring=2022-02-15 16:25:11) - start
2022-02-15 15:55:11  [ main:1382 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_30], replacementSubstring=2022-02-15 15:25:11) - start
2022-02-15 15:55:11  [ main:1382 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1382 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_ONE], replacementSubstring=2022-02-15 15:55:12) - start
2022-02-15 15:55:11  [ main:1382 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_ONE], replacementSubstring=2022-02-15 15:55:10) - start
2022-02-15 15:55:11  [ main:1382 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_TEN], replacementSubstring=2022-02-15 15:55:21) - start
2022-02-15 15:55:11  [ main:1382 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_TEN], replacementSubstring=2022-02-15 15:55:01) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_30], replacementSubstring=2022-02-15 15:55:41) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_30], replacementSubstring=2022-02-15 15:54:41) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  addReplacementObject(originalObject=[UNIX_TIMESTAMP], replacementObject=1644933311) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  addReplacementObject(originalObject=[null], replacementObject=null) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  add(tableName=USERS_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  getTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  getTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  The table name map has already been initialized.
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  createReplacementTable(table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  setStrictReplacement(strictReplacement=false) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  getTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  getTableMetaData(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1383 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  Statement fetch size set to 100
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getSelectStatement(schema=null, metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], escapePattern=null) - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ROLE_ID, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=USERS_DB, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1384 ] - [ DEBUG ]  Query: select ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ROLE_ID from USERS_DB order by ID
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)]], _resultSet=[rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: -1], _statement=[stat32]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 0) - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 0) - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1385 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getSqlValue(column=3, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 0) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getSqlValue(column=4, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 0) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getSqlValue(column=5, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 0) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getSqlValue(column=6, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 0) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getSqlValue(column=7, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 0) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getSqlValue(column=8, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 0) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 1) - start
2022-02-15 15:55:11  [ main:1386 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 1) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getSqlValue(column=3, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 1) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getSqlValue(column=4, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 1) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getSqlValue(column=5, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 1) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getSqlValue(column=6, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 1) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getSqlValue(column=7, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 1) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getSqlValue(column=8, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 1) - start
2022-02-15 15:55:11  [ main:1387 ] - [ DEBUG ]  getValue(row=2, columnName=ID) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 2) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getValue(row=2, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 2) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getValue(row=2, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getSqlValue(column=3, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 2) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getValue(row=2, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getSqlValue(column=4, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 2) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getValue(row=2, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getSqlValue(column=5, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 2) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getValue(row=2, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getSqlValue(column=6, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 2) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getValue(row=2, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1388 ] - [ DEBUG ]  getSqlValue(column=7, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 2) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  getValue(row=2, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  getSqlValue(column=8, resultSet=rs15: org.h2.result.LocalResultImpl@4538856f columns: 8 rows: 3 pos: 2) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  getValue(row=3, columnName=ID) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  includedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  includeColumns(columns=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  addPattern(patternName=ID) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  addPattern(patternName=LOGIN) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  addPattern(patternName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  addPattern(patternName=EMAIL) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  addPattern(patternName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  addPattern(patternName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  addPattern(patternName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  addPattern(patternName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[PASSWORD, LASTNAME, ROLE_ID, LOGIN, FIRSTNAME, ID, EMAIL, BIRTHDAY], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1389 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(FIRSTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LASTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(BIRTHDAY, DATE, nullable)) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ROLE_ID, INTEGER, nullable)) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[PASSWORD, LASTNAME, ROLE_ID, LOGIN, FIRSTNAME, ID, EMAIL, BIRTHDAY], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  assertEqualsIgnoreCols(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], ignoreCols=[]) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], columnNames=[]) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:11  [ main:1390 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(EMAIL, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(FIRSTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LASTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(BIRTHDAY, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ROLE_ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], columnNames=[]) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1391 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(FIRSTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LASTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(BIRTHDAY, DATE, nullable)) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ROLE_ID, INTEGER, nullable)) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3]) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], additionalColumnInfo=null) - start
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  assertWithValueComparer: expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null]
2022-02-15 15:55:11  [ main:1392 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  assertWithValueComparer: actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3]
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  assertWithValueComparer: failureHandler=null
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  assertWithValueComparer: defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  assertWithValueComparer: columnValueComparers=null
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  FailureHandler is null. Using default implementation
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@1e8fb66f) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(LOGIN, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(PASSWORD, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(EMAIL, UNKNOWN, nullableUnknown), o2=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(EMAIL, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(EMAIL, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, UNKNOWN, nullableUnknown), o2=(EMAIL, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(LASTNAME, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(LASTNAME, UNKNOWN, nullableUnknown), o2=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(LASTNAME, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, UNKNOWN, nullableUnknown), o2=(LASTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, UNKNOWN, nullableUnknown), o2=(FIRSTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, UNKNOWN, nullableUnknown), o2=(EMAIL, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(ROLE_ID, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(ROLE_ID, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(ROLE_ID, UNKNOWN, nullableUnknown), o2=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@3d8d17a3) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(LOGIN, VARCHAR, noNulls), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(PASSWORD, VARCHAR, noNulls), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(EMAIL, VARCHAR, nullable), o2=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1393 ] - [ DEBUG ]  compare(o1=(EMAIL, VARCHAR, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  compare(o1=(EMAIL, VARCHAR, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  compare(o1=(LASTNAME, VARCHAR, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  compare(o1=(LASTNAME, VARCHAR, nullable), o2=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  compare(o1=(LASTNAME, VARCHAR, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, DATE, nullable), o2=(LASTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, DATE, nullable), o2=(FIRSTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, DATE, nullable), o2=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  compare(o1=(ROLE_ID, INTEGER, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  compare(o1=(ROLE_ID, INTEGER, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  compare(o1=(ROLE_ID, INTEGER, nullable), o2=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@1e8fb66f, columnsToSearch=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)])
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@3d8d17a3, columnsToSearch=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)])
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(BIRTHDAY, UNKNOWN, nullableUnknown), actualColumn=(BIRTHDAY, DATE, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(EMAIL, UNKNOWN, nullableUnknown), actualColumn=(EMAIL, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1394 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(FIRSTNAME, UNKNOWN, nullableUnknown), actualColumn=(FIRSTNAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(ID, UNKNOWN, nullableUnknown), actualColumn=(ID, BIGINT, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(LASTNAME, UNKNOWN, nullableUnknown), actualColumn=(LASTNAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(LOGIN, UNKNOWN, nullableUnknown), actualColumn=(LOGIN, VARCHAR, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(PASSWORD, UNKNOWN, nullableUnknown), actualColumn=(PASSWORD, VARCHAR, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(ROLE_ID, UNKNOWN, nullableUnknown), actualColumn=(ROLE_ID, INTEGER, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null], defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer, columnValueComparers=null) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  determineValidColumnValueComparers: using getDefaultValueComparerMap()={} as columnValueComparers=null for tableName=USERS_DB
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getValue(row=0, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getValue(row=0, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1395 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  compare(o1=2000-11-01, o2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  compareNonNulls(value1=2000-11-01, value2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getValue(row=0, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getValue(row=0, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  compare(o1=email1, o2=email1) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getValue(row=0, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  getValue(row=0, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1396 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  compare(o1=fname1, o2=fname1) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getValue(row=0, column=ID) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getValue(row=0, column=ID) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  compare(o1=1, o2=1) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  compareNonNulls(value1=1, value2=1) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getValue(row=0, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  getValue(row=0, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1397 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  compare(o1=lname1, o2=lname1) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getValue(row=0, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getValue(row=0, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  compare(o1=login1, o2=login1) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getValue(row=0, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getValue(row=0, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  compare(o1=pass1, o2=pass1) - start
2022-02-15 15:55:11  [ main:1398 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getValue(row=0, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getValue(row=0, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=3) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  compare(o1=1, o2=1) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  compareNonNulls(value1=1, value2=1) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getValue(row=1, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getValue(row=1, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1399 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  compare(o1=2000-11-01, o2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  compareNonNulls(value1=2000-11-01, value2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getValue(row=1, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getValue(row=1, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  compare(o1=email2, o2=email2) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getValue(row=1, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getValue(row=1, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:11  [ main:1400 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  compare(o1=fname2, o2=fname2) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getValue(row=1, column=ID) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getValue(row=1, column=ID) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  compare(o1=2, o2=2) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  compareNonNulls(value1=2, value2=2) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getValue(row=1, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getValue(row=1, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:11  [ main:1401 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  compare(o1=lname2, o2=lname2) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getValue(row=1, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getValue(row=1, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  compare(o1=login2, o2=login2) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getValue(row=1, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getValue(row=1, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  compare(o1=pass2, o2=pass2) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1402 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getValue(row=1, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getValue(row=1, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=3) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  compare(o1=2, o2=2) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  compareNonNulls(value1=2, value2=2) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getValue(row=2, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getValue(row=2, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getValue(row=2, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getValue(row=2, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getValue(row=2, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getValue(row=2, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1403 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  compare(o1=1970-01-01, o2=1970-01-01) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  typeCast(value=1970-01-01) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  typeCast(value=1970-01-01) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  compareNonNulls(value1=1970-01-01, value2=1970-01-01) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getValue(row=2, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getValue(row=2, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getValue(row=2, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getValue(row=2, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getValue(row=2, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getValue(row=2, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  compare(o1=email3, o2=email3) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getValue(row=2, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getValue(row=2, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getValue(row=2, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getValue(row=2, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getValue(row=2, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getValue(row=2, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1404 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  compare(o1=fname3, o2=fname3) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getValue(row=2, columnName=ID) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getValue(row=2, columnName=ID) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getValue(row=2, column=ID) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getValue(row=2, columnName=ID) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getValue(row=2, columnName=ID) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getValue(row=2, column=ID) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  compare(o1=3, o2=3) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  typeCast(value=3) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  typeCast(value=3) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  compareNonNulls(value1=3, value2=3) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getValue(row=2, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getValue(row=2, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getValue(row=2, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getValue(row=2, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getValue(row=2, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getValue(row=2, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:11  [ main:1405 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  compare(o1=lname3, o2=lname3) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getValue(row=2, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getValue(row=2, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getValue(row=2, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getValue(row=2, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getValue(row=2, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getValue(row=2, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  compare(o1=login3, o2=login3) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getValue(row=2, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getValue(row=2, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getValue(row=2, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getValue(row=2, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getValue(row=2, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getValue(row=2, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  compare(o1=pass3, o2=pass3) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getValue(row=2, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1406 ] - [ DEBUG ]  getValue(row=2, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  getValue(row=2, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  getValue(row=2, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  getValue(row=2, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  getValue(row=2, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  assertValidRowIndex(row=2) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  assertValidRowIndex(row=2, rowCount=3) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  compare(o1=1, o2=1) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  compareNonNulls(value1=1, value2=1) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1407 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1408 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1409 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1410 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1411 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1412 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1413 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1414 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1414 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1414 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1414 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1414 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1414 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@1e5eb20a, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@49433c98, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@b5c6a30, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3bfae028, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1775c4e7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@47829d6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f677247, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43f03c23, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7a1b8a46], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1414 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1414 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1414 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1414 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1414 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1415 ] - [ DEBUG ]  Start method
2022-02-15 15:55:11  [ main:1421 ] - [ WARN ]  Database will not be populated because no dataset has been provided.
2022-02-15 15:55:11  [ main:1421 ] - [ DEBUG ]  Start method
2022-02-15 15:55:11  [ main:1423 ] - [ WARN ]  HHH90000022: Hibernate's legacy org.hibernate.Criteria API is deprecated; use the JPA javax.persistence.criteria.CriteriaQuery instead
2022-02-15 15:55:11  [ main:1430 ] - [ DEBUG ]  select this_.id as id1_1_0_, this_.birthday as birthday2_1_0_, this_.email as email3_1_0_, this_.firstname as firstnam4_1_0_, this_.lastname as lastname5_1_0_, this_.login as login6_1_0_, this_.password as password7_1_0_, this_.role_id as role_id8_1_0_ from USERS_DB this_ where this_.email like ?
2022-02-15 15:55:11  [ main:1431 ] - [ DEBUG ]  Result set row: 0
2022-02-15 15:55:11  [ main:1431 ] - [ DEBUG ]  Result row: EntityKey[User#1]
2022-02-15 15:55:11  [ main:1432 ] - [ DEBUG ]  Resolving attributes for [User#1]
2022-02-15 15:55:11  [ main:1432 ] - [ DEBUG ]  Processing attribute `birthday` : value = 2000-11-01
2022-02-15 15:55:11  [ main:1432 ] - [ DEBUG ]  Attribute (`birthday`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1432 ] - [ DEBUG ]  Processing attribute `email` : value = email1
2022-02-15 15:55:11  [ main:1432 ] - [ DEBUG ]  Attribute (`email`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1432 ] - [ DEBUG ]  Processing attribute `firstName` : value = fname1
2022-02-15 15:55:11  [ main:1432 ] - [ DEBUG ]  Attribute (`firstName`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1432 ] - [ DEBUG ]  Processing attribute `lastName` : value = lname1
2022-02-15 15:55:11  [ main:1432 ] - [ DEBUG ]  Attribute (`lastName`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1432 ] - [ DEBUG ]  Processing attribute `login` : value = login1
2022-02-15 15:55:11  [ main:1432 ] - [ DEBUG ]  Attribute (`login`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1432 ] - [ DEBUG ]  Processing attribute `password` : value = pass1
2022-02-15 15:55:11  [ main:1432 ] - [ DEBUG ]  Attribute (`password`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1432 ] - [ DEBUG ]  Processing attribute `role` : value = 1
2022-02-15 15:55:11  [ main:1432 ] - [ DEBUG ]  Attribute (`role`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1433 ] - [ DEBUG ]  Done materializing entity [User#1]
2022-02-15 15:55:11  [ main:1433 ] - [ DEBUG ]  Initiating JDBC connection release from afterTransaction
2022-02-15 15:55:11  [ main:1433 ] - [ DEBUG ]  createDataSet() - start
2022-02-15 15:55:11  [ main:1434 ] - [ DEBUG ]  Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:11  [ main:1434 ] - [ DEBUG ]  Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:11  [ main:1434 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1434 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1434 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1434 ] - [ DEBUG ]  setConsumer(consumer) - start
2022-02-15 15:55:11  [ main:1434 ] - [ DEBUG ]  produce() - start
2022-02-15 15:55:11  [ main:1434 ] - [ DEBUG ]  setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@6dce59e, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@11381415) - start
2022-02-15 15:55:11  [ main:1434 ] - [ DEBUG ]  setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@6dce59e, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@11381415) - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5ad6cc21) - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  startDataSet() - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  startElement(uri=, localName=, qName=USERS_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5ad6cc21) - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  isLastTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  createTableMetaData(tableName=USERS_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5ad6cc21) - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  add(tableName=USERS_DB, object=tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  startTable(metaData=tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1435 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  row(values=1) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  addRow(values=1) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  endElement(uri=, localName=, qName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  startElement(uri=, localName=, qName=USERS_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5ad6cc21) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  isLastTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1436 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  row(values=2) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  addRow(values=2) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  endElement(uri=, localName=, qName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  endElement(uri=, localName=, qName=dataset) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  endTable() - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1437 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  add(tableName=USERS_DB, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  endDataSet() - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USERS_DB], _tableMap={USERS_DB=org.dbunit.dataset.DefaultTable[_metaData=tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  add(tableName=USERS_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65) - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1438 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  add(tableName=USERS_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65) - start
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YESTERDAY], replacementSubstring=2022-02-14 15:55:11) - start
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,TOMORROW], replacementSubstring=2022-02-16 15:55:11) - start
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_AFTER], replacementSubstring=2022-02-22 15:55:11) - start
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_BEFORE], replacementSubstring=2022-02-08 15:55:11) - start
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_AFTER], replacementSubstring=2022-03-17 15:55:11) - start
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_BEFORE], replacementSubstring=2022-01-16 15:55:11) - start
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_BEFORE], replacementSubstring=2021-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1439 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_AFTER], replacementSubstring=2023-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1440 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1440 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_ONE], replacementSubstring=2022-02-15 16:55:11) - start
2022-02-15 15:55:11  [ main:1440 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_ONE], replacementSubstring=2022-02-15 14:55:11) - start
2022-02-15 15:55:11  [ main:1440 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_TEN], replacementSubstring=2022-02-16 01:55:11) - start
2022-02-15 15:55:11  [ main:1440 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_TEN], replacementSubstring=2022-02-15 05:55:11) - start
2022-02-15 15:55:11  [ main:1440 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1440 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_ONE], replacementSubstring=2022-02-15 15:56:11) - start
2022-02-15 15:55:11  [ main:1440 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_ONE], replacementSubstring=2022-02-15 15:54:11) - start
2022-02-15 15:55:11  [ main:1440 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_TEN], replacementSubstring=2022-02-15 16:05:11) - start
2022-02-15 15:55:11  [ main:1440 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_TEN], replacementSubstring=2022-02-15 15:45:11) - start
2022-02-15 15:55:11  [ main:1440 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_30], replacementSubstring=2022-02-15 16:25:11) - start
2022-02-15 15:55:11  [ main:1440 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_30], replacementSubstring=2022-02-15 15:25:11) - start
2022-02-15 15:55:11  [ main:1440 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1440 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_ONE], replacementSubstring=2022-02-15 15:55:12) - start
2022-02-15 15:55:11  [ main:1440 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_ONE], replacementSubstring=2022-02-15 15:55:10) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_TEN], replacementSubstring=2022-02-15 15:55:21) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_TEN], replacementSubstring=2022-02-15 15:55:01) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_30], replacementSubstring=2022-02-15 15:55:41) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_30], replacementSubstring=2022-02-15 15:54:41) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  addReplacementObject(originalObject=[UNIX_TIMESTAMP], replacementObject=1644933311) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  addReplacementObject(originalObject=[null], replacementObject=null) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  add(tableName=USERS_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  The table name map has already been initialized.
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  createReplacementTable(table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  setStrictReplacement(strictReplacement=false) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTableMetaData(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1441 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  Statement fetch size set to 100
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getSelectStatement(schema=null, metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], escapePattern=null) - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ROLE_ID, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=USERS_DB, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1442 ] - [ DEBUG ]  Query: select ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ROLE_ID from USERS_DB order by ID
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)]], _resultSet=[rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: -1], _statement=[stat44]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getSqlValue(column=3, resultSet=rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getSqlValue(column=4, resultSet=rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getSqlValue(column=5, resultSet=rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1443 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getSqlValue(column=6, resultSet=rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getSqlValue(column=7, resultSet=rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getSqlValue(column=8, resultSet=rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getSqlValue(column=3, resultSet=rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getSqlValue(column=4, resultSet=rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getSqlValue(column=5, resultSet=rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1444 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getSqlValue(column=6, resultSet=rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getSqlValue(column=7, resultSet=rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getSqlValue(column=8, resultSet=rs17: org.h2.result.LocalResultImpl@5403799b columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getValue(row=2, columnName=ID) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  includedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  includeColumns(columns=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  addPattern(patternName=ID) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  addPattern(patternName=LOGIN) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  addPattern(patternName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  addPattern(patternName=EMAIL) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  addPattern(patternName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  addPattern(patternName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  addPattern(patternName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  addPattern(patternName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[PASSWORD, LASTNAME, ROLE_ID, LOGIN, FIRSTNAME, ID, EMAIL, BIRTHDAY], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1445 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(FIRSTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LASTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(BIRTHDAY, DATE, nullable)) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ROLE_ID, INTEGER, nullable)) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[PASSWORD, LASTNAME, ROLE_ID, LOGIN, FIRSTNAME, ID, EMAIL, BIRTHDAY], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  assertEqualsIgnoreCols(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], ignoreCols=[]) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], columnNames=[]) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:11  [ main:1446 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(EMAIL, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(FIRSTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LASTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(BIRTHDAY, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ROLE_ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], columnNames=[]) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1447 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(FIRSTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LASTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(BIRTHDAY, DATE, nullable)) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ROLE_ID, INTEGER, nullable)) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2]) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], additionalColumnInfo=null) - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  assertWithValueComparer: expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null]
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  assertWithValueComparer: actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2]
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  assertWithValueComparer: failureHandler=null
2022-02-15 15:55:11  [ main:1448 ] - [ DEBUG ]  assertWithValueComparer: defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  assertWithValueComparer: columnValueComparers=null
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  FailureHandler is null. Using default implementation
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@d13960e) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(LOGIN, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(PASSWORD, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(EMAIL, UNKNOWN, nullableUnknown), o2=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(EMAIL, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(EMAIL, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, UNKNOWN, nullableUnknown), o2=(EMAIL, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(LASTNAME, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(LASTNAME, UNKNOWN, nullableUnknown), o2=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(LASTNAME, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, UNKNOWN, nullableUnknown), o2=(LASTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, UNKNOWN, nullableUnknown), o2=(FIRSTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, UNKNOWN, nullableUnknown), o2=(EMAIL, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(ROLE_ID, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(ROLE_ID, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(ROLE_ID, UNKNOWN, nullableUnknown), o2=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@27f3f512) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(LOGIN, VARCHAR, noNulls), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(PASSWORD, VARCHAR, noNulls), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(EMAIL, VARCHAR, nullable), o2=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(EMAIL, VARCHAR, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(EMAIL, VARCHAR, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(LASTNAME, VARCHAR, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1449 ] - [ DEBUG ]  compare(o1=(LASTNAME, VARCHAR, nullable), o2=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  compare(o1=(LASTNAME, VARCHAR, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, DATE, nullable), o2=(LASTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, DATE, nullable), o2=(FIRSTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, DATE, nullable), o2=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  compare(o1=(ROLE_ID, INTEGER, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  compare(o1=(ROLE_ID, INTEGER, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  compare(o1=(ROLE_ID, INTEGER, nullable), o2=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@d13960e, columnsToSearch=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)])
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@27f3f512, columnsToSearch=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)])
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(BIRTHDAY, UNKNOWN, nullableUnknown), actualColumn=(BIRTHDAY, DATE, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(EMAIL, UNKNOWN, nullableUnknown), actualColumn=(EMAIL, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(FIRSTNAME, UNKNOWN, nullableUnknown), actualColumn=(FIRSTNAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(ID, UNKNOWN, nullableUnknown), actualColumn=(ID, BIGINT, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(LASTNAME, UNKNOWN, nullableUnknown), actualColumn=(LASTNAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(LOGIN, UNKNOWN, nullableUnknown), actualColumn=(LOGIN, VARCHAR, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(PASSWORD, UNKNOWN, nullableUnknown), actualColumn=(PASSWORD, VARCHAR, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1450 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(ROLE_ID, UNKNOWN, nullableUnknown), actualColumn=(ROLE_ID, INTEGER, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null], defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer, columnValueComparers=null) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  determineValidColumnValueComparers: using getDefaultValueComparerMap()={} as columnValueComparers=null for tableName=USERS_DB
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getValue(row=0, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getValue(row=0, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  compare(o1=2000-11-01, o2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  compareNonNulls(value1=2000-11-01, value2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1451 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getValue(row=0, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getValue(row=0, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  compare(o1=email1, o2=email1) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getValue(row=0, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getValue(row=0, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  compare(o1=fname1, o2=fname1) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getValue(row=0, column=ID) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1452 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getValue(row=0, column=ID) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  compare(o1=1, o2=1) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  compareNonNulls(value1=1, value2=1) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getValue(row=0, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getValue(row=0, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  compare(o1=lname1, o2=lname1) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getValue(row=0, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1453 ] - [ DEBUG ]  getValue(row=0, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  compare(o1=login1, o2=login1) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getValue(row=0, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getValue(row=0, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  compare(o1=pass1, o2=pass1) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getValue(row=0, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getValue(row=0, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  compare(o1=1, o2=1) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1454 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  compareNonNulls(value1=1, value2=1) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getValue(row=1, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getValue(row=1, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  compare(o1=2000-11-01, o2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  compareNonNulls(value1=2000-11-01, value2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getValue(row=1, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  getValue(row=1, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1455 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  compare(o1=email2, o2=email2) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getValue(row=1, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getValue(row=1, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  compare(o1=fname2, o2=fname2) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getValue(row=1, column=ID) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getValue(row=1, column=ID) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  compare(o1=2, o2=2) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1456 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  compareNonNulls(value1=2, value2=2) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getValue(row=1, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getValue(row=1, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  compare(o1=lname2, o2=lname2) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getValue(row=1, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getValue(row=1, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  compare(o1=login2, o2=login2) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getValue(row=1, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1457 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getValue(row=1, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  compare(o1=pass2, o2=pass2) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getValue(row=1, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getValue(row=1, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  compare(o1=2, o2=2) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  compareNonNulls(value1=2, value2=2) - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1458 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1459 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1460 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@38d80d65, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2ac519dc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3d53e6f7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1de4bee0, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3ece79fe, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3cc79c02, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1e01b133, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@262a1fad, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6be6931f], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1461 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1463 ] - [ DEBUG ]  Start method
2022-02-15 15:55:11  [ main:1470 ] - [ WARN ]  Database will not be populated because no dataset has been provided.
2022-02-15 15:55:11  [ main:1470 ] - [ DEBUG ]  Start method
2022-02-15 15:55:11  [ main:1471 ] - [ WARN ]  HHH90000022: Hibernate's legacy org.hibernate.Criteria API is deprecated; use the JPA javax.persistence.criteria.CriteriaQuery instead
2022-02-15 15:55:11  [ main:1471 ] - [ DEBUG ]  select this_.id as id1_1_0_, this_.birthday as birthday2_1_0_, this_.email as email3_1_0_, this_.firstname as firstnam4_1_0_, this_.lastname as lastname5_1_0_, this_.login as login6_1_0_, this_.password as password7_1_0_, this_.role_id as role_id8_1_0_ from USERS_DB this_ where this_.login like ?
2022-02-15 15:55:11  [ main:1472 ] - [ DEBUG ]  Result set row: 0
2022-02-15 15:55:11  [ main:1472 ] - [ DEBUG ]  Result row: EntityKey[User#1]
2022-02-15 15:55:11  [ main:1472 ] - [ DEBUG ]  Resolving attributes for [User#1]
2022-02-15 15:55:11  [ main:1472 ] - [ DEBUG ]  Processing attribute `birthday` : value = 2000-11-01
2022-02-15 15:55:11  [ main:1472 ] - [ DEBUG ]  Attribute (`birthday`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1472 ] - [ DEBUG ]  Processing attribute `email` : value = email1
2022-02-15 15:55:11  [ main:1472 ] - [ DEBUG ]  Attribute (`email`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1472 ] - [ DEBUG ]  Processing attribute `firstName` : value = fname1
2022-02-15 15:55:11  [ main:1472 ] - [ DEBUG ]  Attribute (`firstName`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1473 ] - [ DEBUG ]  Processing attribute `lastName` : value = lname1
2022-02-15 15:55:11  [ main:1473 ] - [ DEBUG ]  Attribute (`lastName`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1473 ] - [ DEBUG ]  Processing attribute `login` : value = login1
2022-02-15 15:55:11  [ main:1473 ] - [ DEBUG ]  Attribute (`login`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1473 ] - [ DEBUG ]  Processing attribute `password` : value = pass1
2022-02-15 15:55:11  [ main:1473 ] - [ DEBUG ]  Attribute (`password`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1473 ] - [ DEBUG ]  Processing attribute `role` : value = 1
2022-02-15 15:55:11  [ main:1473 ] - [ DEBUG ]  Attribute (`role`)  - enhanced for lazy-loading? - false
2022-02-15 15:55:11  [ main:1473 ] - [ DEBUG ]  Done materializing entity [User#1]
2022-02-15 15:55:11  [ main:1473 ] - [ DEBUG ]  Initiating JDBC connection release from afterTransaction
2022-02-15 15:55:11  [ main:1474 ] - [ DEBUG ]  createDataSet() - start
2022-02-15 15:55:11  [ main:1474 ] - [ DEBUG ]  Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:11  [ main:1474 ] - [ DEBUG ]  Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
2022-02-15 15:55:11  [ main:1474 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1474 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1474 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1474 ] - [ DEBUG ]  setConsumer(consumer) - start
2022-02-15 15:55:11  [ main:1474 ] - [ DEBUG ]  produce() - start
2022-02-15 15:55:11  [ main:1474 ] - [ DEBUG ]  setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@59a2388e, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@186d8a71) - start
2022-02-15 15:55:11  [ main:1474 ] - [ DEBUG ]  setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@59a2388e, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@186d8a71) - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@3dc40ab9) - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  startDataSet() - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  startElement(uri=, localName=, qName=USERS_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@3dc40ab9) - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  isLastTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  createTableMetaData(tableName=USERS_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@3dc40ab9) - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  add(tableName=USERS_DB, object=tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  startTable(metaData=tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[]) - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1475 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  row(values=1) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  addRow(values=1) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  endElement(uri=, localName=, qName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  startElement(uri=, localName=, qName=USERS_DB, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@3dc40ab9) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  isLastTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1476 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  row(values=2) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  addRow(values=2) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  endElement(uri=, localName=, qName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  endElement(uri=, localName=, qName=dataset) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getLastTableName() - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  endTable() - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  add(tableName=USERS_DB, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
2022-02-15 15:55:11  [ main:1477 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  endDataSet() - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USERS_DB], _tableMap={USERS_DB=org.dbunit.dataset.DefaultTable[_metaData=tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  add(tableName=USERS_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  iterator() - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  addTable(newTable=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, tableList=org.dbunit.dataset.OrderedTableNameMap[_tableNames=[], _tableMap={}, _caseSensitiveTableNames=false], combine=true) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  add(tableName=USERS_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  orderedValues() - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1478 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1479 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1479 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YESTERDAY], replacementSubstring=2022-02-14 15:55:11) - start
2022-02-15 15:55:11  [ main:1479 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,TOMORROW], replacementSubstring=2022-02-16 15:55:11) - start
2022-02-15 15:55:11  [ main:1479 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_AFTER], replacementSubstring=2022-02-22 15:55:11) - start
2022-02-15 15:55:11  [ main:1479 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,WEEK_BEFORE], replacementSubstring=2022-02-08 15:55:11) - start
2022-02-15 15:55:11  [ main:1479 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_AFTER], replacementSubstring=2022-03-17 15:55:11) - start
2022-02-15 15:55:11  [ main:1479 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,MONTH_BEFORE], replacementSubstring=2022-01-16 15:55:11) - start
2022-02-15 15:55:11  [ main:1479 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_BEFORE], replacementSubstring=2021-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1479 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[DAY,YEAR_AFTER], replacementSubstring=2023-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1479 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1479 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_ONE], replacementSubstring=2022-02-15 16:55:11) - start
2022-02-15 15:55:11  [ main:1479 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_ONE], replacementSubstring=2022-02-15 14:55:11) - start
2022-02-15 15:55:11  [ main:1479 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,PLUS_TEN], replacementSubstring=2022-02-16 01:55:11) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[HOUR,MINUS_TEN], replacementSubstring=2022-02-15 05:55:11) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_ONE], replacementSubstring=2022-02-15 15:56:11) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_ONE], replacementSubstring=2022-02-15 15:54:11) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_TEN], replacementSubstring=2022-02-15 16:05:11) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_TEN], replacementSubstring=2022-02-15 15:45:11) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,PLUS_30], replacementSubstring=2022-02-15 16:25:11) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[MIN,MINUS_30], replacementSubstring=2022-02-15 15:25:11) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,NOW], replacementSubstring=2022-02-15 15:55:11) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_ONE], replacementSubstring=2022-02-15 15:55:12) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_ONE], replacementSubstring=2022-02-15 15:55:10) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_TEN], replacementSubstring=2022-02-15 15:55:21) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_TEN], replacementSubstring=2022-02-15 15:55:01) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,PLUS_30], replacementSubstring=2022-02-15 15:55:41) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementSubstring(originalSubstring=[SEC,MINUS_30], replacementSubstring=2022-02-15 15:54:41) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementObject(originalObject=[UNIX_TIMESTAMP], replacementObject=1644933311) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  addReplacementObject(originalObject=[null], replacementObject=null) - start
2022-02-15 15:55:11  [ main:1480 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getTableNames() - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  createIterator(reversed=false) - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getTable() - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  add(tableName=USERS_DB, object=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d) - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  The table name map has already been initialized.
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  createReplacementTable(table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d) - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  setStrictReplacement(strictReplacement=false) - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getTable(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getTableMetaData(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  initialize() - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getTableName(tableName=USERS_DB) - end - result=USERS_DB
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  Statement fetch size set to 100
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getSelectStatement(schema=null, metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], escapePattern=null) - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1481 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ROLE_ID, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=USERS_DB, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getQualifiedName() - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  Query: select ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ROLE_ID from USERS_DB order by ID
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)]], _resultSet=[rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: -1], _statement=[stat56]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
2022-02-15 15:55:11  [ main:1482 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getSqlValue(column=3, resultSet=rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getSqlValue(column=4, resultSet=rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1483 ] - [ DEBUG ]  getSqlValue(column=5, resultSet=rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getSqlValue(column=6, resultSet=rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getSqlValue(column=7, resultSet=rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getSqlValue(column=8, resultSet=rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: 0) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getSqlValue(column=1, resultSet=rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getSqlValue(column=2, resultSet=rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getSqlValue(column=3, resultSet=rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1484 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getSqlValue(column=4, resultSet=rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getSqlValue(column=5, resultSet=rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getSqlValue(column=6, resultSet=rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getSqlValue(column=7, resultSet=rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getSqlValue(column=8, resultSet=rs19: org.h2.result.LocalResultImpl@cde8c6c columns: 8 rows: 2 pos: 1) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getValue(row=2, columnName=ID) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  includedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)]) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  includeColumns(columns=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  addPattern(patternName=ID) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  addPattern(patternName=LOGIN) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  addPattern(patternName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  addPattern(patternName=EMAIL) - start
2022-02-15 15:55:11  [ main:1485 ] - [ DEBUG ]  addPattern(patternName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  addPattern(patternName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  addPattern(patternName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  addPattern(patternName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[PASSWORD, LASTNAME, ROLE_ID, LOGIN, FIRSTNAME, ID, EMAIL, BIRTHDAY], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(FIRSTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LASTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(BIRTHDAY, DATE, nullable)) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ROLE_ID, INTEGER, nullable)) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1486 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[PASSWORD, LASTNAME, ROLE_ID, LOGIN, FIRSTNAME, ID, EMAIL, BIRTHDAY], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  assertEqualsIgnoreCols(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], ignoreCols=[]) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], columnNames=[]) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(EMAIL, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(FIRSTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LASTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(BIRTHDAY, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1487 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ROLE_ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  excludedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], columnNames=[]) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  excludeColumn(columnPattern=) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  addPattern(patternName=) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(name=LOGIN) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(name=PASSWORD) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(name=EMAIL) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(FIRSTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(name=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(LASTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(name=LASTNAME) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(BIRTHDAY, DATE, nullable)) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(name=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ROLE_ID, INTEGER, nullable)) - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1488 ] - [ DEBUG ]  accept(name=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  getFilteredColumns(tableName=USERS_DB, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]]]) - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  accept(tableName=USERS_DB, column=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  isEmpty() - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  accept(name=ID) - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2]) - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  assertEquals(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], additionalColumnInfo=null) - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  assertWithValueComparer: expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null]
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  assertWithValueComparer: actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2]
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  assertWithValueComparer: failureHandler=null
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  assertWithValueComparer: defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  assertWithValueComparer: columnValueComparers=null
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  FailureHandler is null. Using default implementation
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@4aeb0e2b) - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  compare(o1=(LOGIN, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  compare(o1=(PASSWORD, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  compare(o1=(EMAIL, UNKNOWN, nullableUnknown), o2=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  compare(o1=(EMAIL, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  compare(o1=(EMAIL, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1489 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, UNKNOWN, nullableUnknown), o2=(EMAIL, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(LASTNAME, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(LASTNAME, UNKNOWN, nullableUnknown), o2=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(LASTNAME, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, UNKNOWN, nullableUnknown), o2=(LASTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, UNKNOWN, nullableUnknown), o2=(FIRSTNAME, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, UNKNOWN, nullableUnknown), o2=(EMAIL, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(ROLE_ID, UNKNOWN, nullableUnknown), o2=(ID, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(ROLE_ID, UNKNOWN, nullableUnknown), o2=(LOGIN, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(ROLE_ID, UNKNOWN, nullableUnknown), o2=(PASSWORD, UNKNOWN, nullableUnknown)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@648c5fb3) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(LOGIN, VARCHAR, noNulls), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(PASSWORD, VARCHAR, noNulls), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(EMAIL, VARCHAR, nullable), o2=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(EMAIL, VARCHAR, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(EMAIL, VARCHAR, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(LASTNAME, VARCHAR, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(LASTNAME, VARCHAR, nullable), o2=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(LASTNAME, VARCHAR, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, DATE, nullable), o2=(LASTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, DATE, nullable), o2=(FIRSTNAME, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(BIRTHDAY, DATE, nullable), o2=(EMAIL, VARCHAR, nullable)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(ROLE_ID, INTEGER, nullable), o2=(ID, BIGINT, noNulls)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(ROLE_ID, INTEGER, nullable), o2=(LOGIN, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  compare(o1=(ROLE_ID, INTEGER, nullable), o2=(PASSWORD, VARCHAR, noNulls)) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@4aeb0e2b, columnsToSearch=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)])
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1490 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@648c5fb3, columnsToSearch=[(ID, UNKNOWN, nullableUnknown), (LOGIN, UNKNOWN, nullableUnknown), (PASSWORD, UNKNOWN, nullableUnknown), (EMAIL, UNKNOWN, nullableUnknown), (FIRSTNAME, UNKNOWN, nullableUnknown), (LASTNAME, UNKNOWN, nullableUnknown), (BIRTHDAY, UNKNOWN, nullableUnknown), (ROLE_ID, UNKNOWN, nullableUnknown)])
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(BIRTHDAY, UNKNOWN, nullableUnknown), actualColumn=(BIRTHDAY, DATE, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(EMAIL, UNKNOWN, nullableUnknown), actualColumn=(EMAIL, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(FIRSTNAME, UNKNOWN, nullableUnknown), actualColumn=(FIRSTNAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(ID, UNKNOWN, nullableUnknown), actualColumn=(ID, BIGINT, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(LASTNAME, UNKNOWN, nullableUnknown), actualColumn=(LASTNAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(LOGIN, UNKNOWN, nullableUnknown), actualColumn=(LOGIN, VARCHAR, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(PASSWORD, UNKNOWN, nullableUnknown), actualColumn=(PASSWORD, VARCHAR, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getComparisonDataType(tableName=USERS_DB, expectedColumn=(ROLE_ID, UNKNOWN, nullableUnknown), actualColumn=(ROLE_ID, INTEGER, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1491 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null], defaultValueComparer=org.dbunit.assertion.comparer.value.IsActualEqualToExpectedWithEmptyFailMessageValueComparer, columnValueComparers=null) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getTableMetaData() - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  determineValidColumnValueComparers: using getDefaultValueComparerMap()={} as columnValueComparers=null for tableName=USERS_DB
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getValue(row=0, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getValue(row=0, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getValue(row=0, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  compare(o1=2000-11-01, o2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  compareNonNulls(value1=2000-11-01, value2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1492 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getValue(row=0, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getValue(row=0, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getValue(row=0, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  compare(o1=email1, o2=email1) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getValue(row=0, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getValue(row=0, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getValue(row=0, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  compare(o1=fname1, o2=fname1) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getValue(row=0, column=ID) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1493 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getValue(row=0, columnName=ID) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getValue(row=0, column=ID) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  compare(o1=1, o2=1) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  compareNonNulls(value1=1, value2=1) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getValue(row=0, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getValue(row=0, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getValue(row=0, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  compare(o1=lname1, o2=lname1) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getValue(row=0, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1494 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getValue(row=0, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getValue(row=0, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  compare(o1=login1, o2=login1) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getValue(row=0, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getValue(row=0, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getValue(row=0, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  compare(o1=pass1, o2=pass1) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getValue(row=0, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getValue(row=0, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  getValue(row=0, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  assertValidRowIndex(row=0) - start
2022-02-15 15:55:11  [ main:1495 ] - [ DEBUG ]  assertValidRowIndex(row=0, rowCount=2) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  compare(o1=1, o2=1) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  typeCast(value=1) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  compareNonNulls(value1=1, value2=1) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getValue(row=1, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getValue(row=1, columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getValue(row=1, column=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getColumnIndex(columnName=BIRTHDAY) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  compare(o1=2000-11-01, o2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  typeCast(value=2000-11-01) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  compareNonNulls(value1=2000-11-01, value2=2000-11-01) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getValue(row=1, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1496 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getValue(row=1, columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getValue(row=1, column=EMAIL) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getColumnIndex(columnName=EMAIL) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  compare(o1=email2, o2=email2) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getValue(row=1, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getValue(row=1, columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getValue(row=1, column=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getColumnIndex(columnName=FIRSTNAME) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  compare(o1=fname2, o2=fname2) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getValue(row=1, column=ID) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getValue(row=1, columnName=ID) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  getValue(row=1, column=ID) - start
2022-02-15 15:55:11  [ main:1497 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getColumnIndex(columnName=ID) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  compare(o1=2, o2=2) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  compareNonNulls(value1=2, value2=2) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getValue(row=1, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getValue(row=1, columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getValue(row=1, column=LASTNAME) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getColumnIndex(columnName=LASTNAME) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  compare(o1=lname2, o2=lname2) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getValue(row=1, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getValue(row=1, columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1498 ] - [ DEBUG ]  getValue(row=1, column=LOGIN) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getColumnIndex(columnName=LOGIN) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  compare(o1=login2, o2=login2) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getValue(row=1, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getValue(row=1, columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getValue(row=1, column=PASSWORD) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getColumnIndex(columnName=PASSWORD) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  compare(o1=pass2, o2=pass2) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getValue(row=1, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1499 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getValue(row=1, columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getValue(row=1, column=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  assertValidRowIndex(row=1) - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  assertValidRowIndex(row=1, rowCount=2) - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getColumnIndex(columnName=ROLE_ID) - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  compare(o1=2, o2=2) - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  typeCast(value=2) - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  compareNonNulls(value1=2, value2=2) - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1500 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1501 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1502 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  getColumns() - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  getPrimaryKeys() - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  compareData(expectedTable=org.dbunit.dataset.ReplacementTable[_strictReplacement=false, _table=com.github.database.rider.core.api.dataset.ScriptableTable@11d2dd2d, _objectMap={[null]=null, [UNIX_TIMESTAMP]=1644933311}, _substringMap={[MIN,PLUS_ONE]=2022-02-15 15:56:11, [HOUR,PLUS_TEN]=2022-02-16 01:55:11, [DAY,WEEK_BEFORE]=2022-02-08 15:55:11, [DAY,TOMORROW]=2022-02-16 15:55:11, [MIN,MINUS_TEN]=2022-02-15 15:45:11, [DAY,YEAR_AFTER]=2023-02-15 15:55:11, [MIN,MINUS_30]=2022-02-15 15:25:11, [MIN,PLUS_30]=2022-02-15 16:25:11, [DAY,YEAR_BEFORE]=2021-02-15 15:55:11, [SEC,PLUS_TEN]=2022-02-15 15:55:21, [MIN,MINUS_ONE]=2022-02-15 15:54:11, [HOUR,MINUS_ONE]=2022-02-15 14:55:11, [SEC,MINUS_30]=2022-02-15 15:54:41, [DAY,MONTH_AFTER]=2022-03-17 15:55:11, [SEC,NOW]=2022-02-15 15:55:11, [DAY,MONTH_BEFORE]=2022-01-16 15:55:11, [DAY,YESTERDAY]=2022-02-14 15:55:11, [MIN,NOW]=2022-02-15 15:55:11, [SEC,MINUS_ONE]=2022-02-15 15:55:10, [DAY,WEEK_AFTER]=2022-02-22 15:55:11, [HOUR,NOW]=2022-02-15 15:55:11, [SEC,MINUS_TEN]=2022-02-15 15:55:01, [HOUR,PLUS_ONE]=2022-02-15 16:55:11, [MIN,PLUS_TEN]=2022-02-15 16:05:11, [HOUR,MINUS_TEN]=2022-02-15 05:55:11, [DAY,NOW]=2022-02-15 15:55:11, [SEC,PLUS_ONE]=2022-02-15 15:55:12, [SEC,PLUS_30]=2022-02-15 15:55:41}, _startDelim=null, _endDelim=null], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USERS_DB, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, noNulls), (PASSWORD, VARCHAR, noNulls), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ROLE_ID, INTEGER, nullable)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@13ed066e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4d705112, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@590765c4, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@19489b27, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@626d2016, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2d5a1588, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@4f116ca2, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@125d47c4], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  getRowCount() - start
2022-02-15 15:55:11  [ main:1503 ] - [ DEBUG ]  getRowCount() - start
